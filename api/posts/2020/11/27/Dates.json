{
  "content": "\nDates\n=====\n\nThis module provides minimal date time records and procedures\nfor working with dates in YYYY-MM-DD and MM/DD/YYYY format and\ntimes in H:MM, HH:MM and HH:MM:SS formats.\n\n\nSet\n: Set a DateTime record providing year, month, day, hour, minute and second as integers and the DateTime record to be populated.\n\nSetDate\n: Set the date portion of a DateTime record, leaves the hour, minute and second attributes unmodified. \n\nSetTime\n: Set the time portion of a DateTime record, leaves the year, month, date attributes unmodified.\n\nCopy\n: Copy the attributes of one DateTime record into another DateTime record\n\nToChars\n: Given a DateTime record and a format constant, render the DateTime record to an array of CHAR.\n\nLeapYear\n: Given a DateTime record check to see if it is a  leap year.\n\nNumOfDays\n: Given a year and monoth return the number of days in the month.\n\nIsValid\n: Check to see if the all attributes in a DateTime record are valid.\n\nOberonToDateTime\n: Convert oberon date and time integer values into a DateTime record\n\nDateTimeToOberon\n: Convert a DateTime record into Oberon date and time integer values.\n\nNow\n: Set a DateTime record's attributes to the current time, depends of on the implementation of Clock.Mod.\n\nWeekDate\n: Given a DateTime record calculates the year, week and weekday as integers values.\n\nEqual\n: Checks to DateTime records to see if they have equivalent attribute values.\n\nCompare\n: Compare two DateTime records, if t1 < t2 then return -1, if t1 = t2 return 0 else if t1 > t2 return 1.\n\nCompareDate\n: Compare the year, month, day attributes of two DateTime records following the approach used in Compare.\n\nCompareTime\n: Compare the hour, minute, second attributes of two DateTime records following the approach used in Compare.\n\nTimeDifference\n: Take the differ of two DateTime records setting the difference in integer values for days, hours, minutes and seconds.\n\nAddYears\n: Add years to a DateTime record. Years is a positive or negative integer.\n\nAddMonths\n: Add months to a DateTime record. Months is either a positive or negative integer. Months will propogate to year in the DataTime record.\n\nAddDays\n: Add days to a DateTime record. Days can be either a positive or negative integer.  Days will propogate to month and year attributes of the DateTime record.\n\nAddHours\n: Add hours to a DateTime record. Hours can be either a positive or negative integer.  Hours will propogate to day, month and year attributes of the DateTime record.\n\nAddMinutes\n: Add minutes to a DateTime record. Minutes can be either a positive or negative integer. Minutes will propogate to hour, day, month and year attributes of the DateTime record.\n\nAddSeconds\n: Add seconds to a DateTime record. Seconds can be either a positive or negatice integer.  Seconds will propogate to minute, hour, day, month, year attributes of the DateTime record.\n\nIsValidDate\n: IsValidDate checks the day, month, year attributes of a DateTime record and validates the values. Returns TRUE if everthing is ok, FALSE otherwise.\n\nIsValidTime\n: IsValidTime checks the hour, minute, second attributes of a DateTime record and validates the values. Returns TRUE if everthing is ok, FALSE otherwise.\n\nIsDateString\n: Checks to see if an ARRAY OF CHAR is a parsiable date string (e.g. in 2020-11-26 or 11/26/2020). Returns TRUE if the string is parsable, FALSE otherwise. NOTE: It does NOT check to see if the day, month or year values are valid. It only checks the format of the string.\n\nIsTimeString\n: Checks to see if an ARRAY OF CHAR is a parsible time string (e.g. 3:32, 14:55, 09:19:22). NOTE: It only checks the format and does not check the hour, minute and second values.\n\nParseDate\n: Parse an ARRAY OF CHAR setting the values if year, month and day. Return TRUE on successful parse and FALSE otherwise.\n\nParseTime\n: Parse an ARRAY OF CHAR setting the values of hour, minute and second. Return TRUE on succesful parse and FALSE otherwise.\n\nParse\n: Parse an ARRAY OF CHAR setting the attributes of a DateTime record. Return TURE on success, FALSE otherwise.\n\nLimitations\n-----------\n\nDates are presumed to be in the YYYY-DD-MM or MM/DD/YYYY formats.\nDoes not handle dates with spelled out months or weekdays.\n\nTime portion of the date object doesn't include time zone.\nThis will need to be rectified at some point.\n\n\n\nSource code for **Dates.Mod**\n-----------------------------\n\n~~~\n(* Dates -- this module was inspired by the A2's Dates module, adapted\n   for Oberon-07 and a POSIX system. It provides an assortment of procedures\n   for working with a simple datetime record.\n\nCopyright (C) 2020 R. S. Doiel\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\n@Author R. S. Doiel, <rsdoiel@gmail.com>\ncopyright (c) 2020, all rights reserved.\nThis software is released under the GNU AGPL\nSee http://www.gnu.org/licenses/agpl-3.0.html\n*)\nMODULE Dates;\nIMPORT Chars, Strings, Clock, Convert := extConvert; (*, Out; **)\n\nCONST\n    MAXSTR = Chars.MAXSTR;\n    SHORTSTR = Chars.SHORTSTR;\n\n    YYYYMMDD* = 1; (* YYYY-MM-DD format *)\n    MMDDYYYY* = 2; (* MM/DD/YYYY format *)\n    YYYYMMDDHHMMSS* = 3; (* YYYY-MM-DD HH:MM:SS format *)\n\nTYPE\n    DateTime* = RECORD\n        year*, month*, day*, hour*, minute*, second* : INTEGER\n    END;\n\nVAR\n    (* Month names, January = 0, December = 11 *)\n    Months*: ARRAY 23 OF ARRAY 10 OF CHAR; \n    (* Days of week, Monday = 0, Sunday = 6 *)\n    Days*: ARRAY 7 OF ARRAY 10 OF CHAR;\n    DaysInMonth: ARRAY 12 OF INTEGER;\n\n\n(* Set -- initialize a date record year, month and day values *)\nPROCEDURE Set*(year, month, day, hour, minute, second : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.year := year;\n    dt.month := month;\n    dt.day := day;\n    dt.hour := hour;\n    dt.minute := minute;\n    dt.second := second;\nEND Set;\n\n(* SetDate -- set a Date record's year, month and day attributes *)\nPROCEDURE SetDate*(year, month, day : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.year := year;\n    dt.month := month;\n    dt.day := day;\nEND SetDate;\n\n(* SetTime -- set a Date record's hour, minute, second attributes *)\nPROCEDURE SetTime*(hour, minute, second : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.hour := hour;\n    dt.minute := minute;\n    dt.second := second;\nEND SetTime;\n\n(* Copy -- copy the values from one date record to another *)\nPROCEDURE Copy*(src : DateTime; VAR dest : DateTime);\nBEGIN\n    dest.year := src.year;\n    dest.month := src.month;\n    dest.day := src.day;\n    dest.hour := src.hour;\n    dest.minute := src.minute;\n    dest.second := src.second;\nEND Copy;\n\n(* ToChars -- converts a date record into an array of chars using\nthe format constant. Formats supported are YYYY-MM-DD HH:MM:SS\nor MM/DD/YYYY HH:MM:SS. *)\nPROCEDURE ToChars*(dt: DateTime; fmt : INTEGER; VAR src : ARRAY OF CHAR);\nVAR ok : BOOLEAN;\nBEGIN\n    Chars.Clear(src);\n    IF fmt = YYYYMMDD THEN\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n    ELSIF fmt = MMDDYYYY THEN\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"/\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n        ok := Chars.AppendChar(\"/\", src);\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n    ELSIF fmt = YYYYMMDDHHMMSS THEN\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n        ok := Chars.AppendChar(\" \", src);\n        Chars.AppendInt(dt.hour, 2, \"0\", src);\n        ok := Chars.AppendChar(\":\", src);\n        Chars.AppendInt(dt.minute, 2, \"0\", src);\n        ok := Chars.AppendChar(\":\", src);\n        Chars.AppendInt(dt.second, 2, \"0\", src);\n    END;\nEND ToChars;\n\n(* \n * Date and Time functions very much inspired by A2 but\n * adapted for use in Oberon-07 and OBNC compiler.\n *)\n\n(* LeapYear -- returns TRUE if 'year' is a leap year *)\nPROCEDURE LeapYear*(year: INTEGER): BOOLEAN;\nBEGIN\n\tRETURN (year > 0) & (year MOD 4 = 0) & (~(year MOD 100 = 0) OR (year MOD 400 = 0))\nEND LeapYear;\n\n(* NumOfDays -- number of days, returns the number of days in that month *)\nPROCEDURE NumOfDays*(year, month: INTEGER): INTEGER;\nVAR result : INTEGER;\nBEGIN\n    result := 0;\n\tDEC(month);\n\tIF ((month >= 0) & (month < 12)) THEN\n\t    IF (month = 1) & LeapYear(year) THEN \n            result := DaysInMonth[1]+1;\n\t    ELSE \n            result := DaysInMonth[month];\n\t    END;\n    END;\n    RETURN result\nEND NumOfDays;\n\n(* IsValid -- checks if the attributes set in a DateTime record are valid *)\nPROCEDURE IsValid*(dt: DateTime): BOOLEAN;\nBEGIN\n\tRETURN ((dt.year > 0) & (dt.month > 0) & (dt.month <= 12) & (dt.day > 0) & (dt.day <= NumOfDays(dt.year, dt.month)) & (dt.hour >= 0) & (dt.hour < 24) & (dt.minute >= 0) & (dt.minute < 60) & (dt.second >= 0) & (dt.second < 60))\nEND IsValid;\n\n(* IsValidDate -- checks to see if a datetime record has valid day, month and year\nattributes *)\nPROCEDURE IsValidDate*(dt: DateTime) : BOOLEAN;\nBEGIN\n\tRETURN (dt.year > 0) & (dt.month > 0) & (dt.month <= 12) & (dt.day > 0) & (dt.day <= NumOfDays(dt.year, dt.month))\nEND IsValidDate;\n\n(* IsValidTime -- checks if the hour, minute, second attributes set in a DateTime record are valid *)\nPROCEDURE IsValidTime*(dt: DateTime): BOOLEAN;\nBEGIN\n\tRETURN (dt.hour >= 0) & (dt.hour < 24) & (dt.minute >= 0) & (dt.minute < 60) & (dt.second >= 0) & (dt.second < 60)\nEND IsValidTime;\n\n\n(* OberonToDateTime -- convert an Oberon date/time to a DateTime \nstructure *)\nPROCEDURE OberonToDateTime*(Date, Time: INTEGER; VAR dt : DateTime);\nBEGIN\n\tdt.second := Time MOD 64; Time := Time DIV 64;\n\tdt.minute := Time MOD 64; Time := Time DIV 64;\n\tdt.hour := Time MOD 24;\n\tdt.day := Date MOD 32; Date := Date DIV 32;\n\tdt.month := (Date MOD 16) + 1; Date := Date DIV 16;\n\tdt.year := Date;\nEND OberonToDateTime;\n\n(* DateTimeToOberon -- convert a DateTime structure to an Oberon \ndate/time *)\nPROCEDURE DateTimeToOberon*(dt: DateTime; VAR date, time: INTEGER);\nBEGIN\n\tIF IsValid(dt) THEN\n\tdate := (dt.year)*512 + dt.month*32 + dt.day;\n\ttime := dt.hour*4096 + dt.minute*64 + dt.second\n    ELSE\n        date := 0;\n        time := 0;\n    END;\nEND DateTimeToOberon;\n\n(* Now -- returns the current date and time as a DateTime record. *)\nPROCEDURE Now*(VAR dt: DateTime);\nVAR d, t: INTEGER;\nBEGIN\n\tClock.Get(t, d);\n\tOberonToDateTime(d, t, dt);\nEND Now;\n\n\n(* WeekDate -- returns the ISO 8601 year number, week number &\nweek day (Monday=1, ....Sunday=7) \nAlgorithm is by Rick McCarty, http://personal.ecu.edu/mccartyr/ISOwdALG.txt\n*)\nPROCEDURE WeekDate*(dt: DateTime; VAR year, week, weekday: INTEGER);\nVAR doy, i, yy, c, g, jan1: INTEGER; leap: BOOLEAN;\nBEGIN\n\tIF IsValid(dt) THEN\n\t\tleap := LeapYear(dt.year);\n\t\tdoy := dt.day; i := 0;\n\t\tWHILE (i < (dt.month - 1)) DO \n            doy := doy + DaysInMonth[i];\n            INC(i);\n        END;\n\t\tIF leap & (dt.month > 2) THEN \n            INC(doy);\n        END;\n\t\tyy := (dt.year - 1) MOD 100; \n        c := (dt.year - 1) - yy; \n        g := (yy + yy) DIV 4;\n\t\tjan1 := 1 + (((((c DIV 100) MOD 4) * 5) + g) MOD 7);\n\n\t\tweekday := 1 + (((doy + (jan1 - 1)) - 1) MOD 7);\n\n\t\tIF (doy <= (8 - jan1)) & (jan1 > 4) THEN (* falls in year-1 ? *)\n\t\t\tyear := dt.year - 1;\n\t\t\tIF (jan1 = 5) OR ((jan1 = 6) & LeapYear(year)) THEN \n                week := 53;\n\t\t\tELSE \n                week := 52;\n\t\t\tEND;\n\t\tELSE\n\t\t\tIF leap THEN \n                i := 366;\n            ELSE \n                i := 365;\n            END;\n\t\t\tIF ((i - doy) < (4 - weekday)) THEN\n\t\t\t\tyear := dt.year + 1;\n\t\t\t\tweek := 1;\n\t\t\tELSE\n\t\t\t\tyear := dt.year;\n\t\t\t\ti := doy + (7-weekday) + (jan1-1);\n\t\t\t\tweek := i DIV 7;\n\t\t\t\tIF (jan1 > 4) THEN \n                    DEC(week);\n                END;\n\t\t\tEND;\n\t\tEND;\n\tELSE\n\t\tyear := -1; week := -1; weekday := -1;\n\tEND;\nEND WeekDate;\n\n(* Equal -- compare to date records to see if they are equal values *)\nPROCEDURE Equal*(t1, t2: DateTime) : BOOLEAN;\nBEGIN\n\tRETURN ((t1.second = t2.second) & (t1.minute = t2.minute) & (t1.hour = t2.hour) & (t1.day = t2.day) & (t1.month = t2.month) & (t1.year = t2.year))\nEND Equal;\n\n(* compare -- used in Compare only for comparing specific values,\n    returning an appropriate -1, 0, 1 *)\nPROCEDURE compare(t1, t2 : INTEGER) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tIF (t1 < t2) THEN \n        result := -1;\n\tELSIF (t1 > t2) THEN \n        result := 1;\n\tELSE \n        result := 0;\n\tEND;\n\tRETURN result\nEND compare;\n\n(* Compare -- returns -1 if (t1 < t2), 0 if (t1 = t2) or 1 if (t1 >  t2) *)\nPROCEDURE Compare*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.year, t2.year);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.month, t2.month);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.day, t2.day);\n\t\t\tIF (result = 0) THEN\n\t\t\t\tresult := compare(t1.hour, t2.hour);\n\t\t\t\tIF (result = 0) THEN\n\t\t\t\t\tresult := compare(t1.minute, t2.minute);\n\t\t\t\t\tIF (result = 0) THEN\n\t\t\t\t\t\tresult := compare(t1.second, t2.second);\n\t\t\t\t\tEND;\n\t\t\t\tEND;\n\t\t\tEND;\n\t\tEND;\n\tEND;\n\tRETURN result\nEND Compare;\n\n(* CompareDate -- compare day, month and year values only *)\nPROCEDURE CompareDate*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.year, t2.year);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.month, t2.month);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.day, t2.day);\n\t\tEND;\n\tEND;\n\tRETURN result\nEND CompareDate;\n\n(* CompareTime -- compare second, minute and hour values only *)\nPROCEDURE CompareTime*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.hour, t2.hour);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.minute, t2.minute);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.second, t2.second);\n\t\tEND;\n\tEND;\n\tRETURN result\nEND CompareTime;\n\n\n\n(* TimeDifferences -- returns the absolute time difference between \nt1 and t2.\n\nNote that leap seconds are not counted, \nsee http://www.eecis.udel.edu/~mills/leap.html *)\nPROCEDURE TimeDifference*(t1, t2: DateTime; VAR days, hours, minutes, seconds : INTEGER);\nCONST SecondsPerMinute = 60; SecondsPerHour = 3600; SecondsPerDay = 86400;\nVAR start, end: DateTime; year, month, second : INTEGER;\nBEGIN\n\tIF (Compare(t1, t2) = -1) THEN \n        start := t1; \n        end := t2; \n    ELSE \n        start := t2; \n        end := t1; \n    END;\n\tIF (start.year = end.year) & (start.month = end.month) & (start.day = end.day) THEN\n\t\tsecond := end.second - start.second + ((end.minute - start.minute) * SecondsPerMinute) + ((end.hour - start.hour) * SecondsPerHour);\n\t\tdays := 0;\n        hours := 0;\n        minutes := 0;\n\tELSE\n\t\t(* use start date/time as reference point *)\n\t\t(* seconds until end of the start.day *)\n\t\tsecond := (SecondsPerDay - start.second) - (start.minute * SecondsPerMinute) - (start.hour * SecondsPerHour);\n\t\tIF (start.year = end.year) & (start.month = end.month) THEN\n\t\t\t(* days between start.day and end.day *)\n\t\t\tdays := (end.day - start.day) - 1;\n\t\tELSE\n\t\t\t(* days until start.month ends excluding start.day *)\n\t\t\tdays := NumOfDays(start.year, start.month) - start.day;\n\t\t\tIF (start.year = end.year) THEN\n\t\t\t\t(* months between start.month and end.month *)\n\t\t\t\tFOR month := start.month + 1 TO end.month - 1 DO\n\t\t\t\t\tdays := days + NumOfDays(start.year, month);\n\t\t\t\tEND;\n\t\t\tELSE\n\t\t\t\t(* days until start.year ends (excluding start.month) *)\n\t\t\t\tFOR month := start.month + 1 TO 12 DO\n\t\t\t\t\tdays := days + NumOfDays(start.year, month);\n\t\t\t\tEND;\n\t\t\t\tFOR year := start.year + 1 TO end.year - 1 DO (* days between start.years and end.year *)\n\t\t\t\t\tIF LeapYear(year) THEN days := days + 366; ELSE days := days + 365; END;\n\t\t\t\tEND;\n\t\t\t\tFOR month := 1 TO end.month - 1 DO (* days until we reach end.month in end.year *)\n\t\t\t\t\tdays := days + NumOfDays(end.year, month);\n\t\t\t\tEND;\n\t\t\tEND;\n\t\t\t(* days in end.month until reaching end.day excluding end.day *)\n\t\t\tdays := (days + end.day) - 1;\n\t\tEND;\n\t\t(* seconds in end.day *)\n\t\tsecond := second + end.second + (end.minute * SecondsPerMinute) + (end.hour * SecondsPerHour);\n\tEND;\n\tdays := days + (second DIV SecondsPerDay); second := (second MOD SecondsPerDay);\n\thours := (second DIV SecondsPerHour); second := (second MOD SecondsPerHour);\n\tminutes := (second DIV SecondsPerMinute); second := (second MOD SecondsPerMinute);\n\tseconds := second;\nEND TimeDifference;\n\n(* AddYear -- Add/Subtract a number of years to/from date *)\nPROCEDURE AddYears*(VAR dt: DateTime; years : INTEGER);\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.year := dt.year + years;\n\tASSERT(IsValid(dt));\nEND AddYears;\n\n(* AddMonths -- Add/Subtract a number of months to/from date.\nThis will adjust date.year if necessary *)\nPROCEDURE AddMonths*(VAR dt: DateTime; months : INTEGER);\nVAR years : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tyears := months DIV 12;\n\tdt.month := dt.month + (months MOD 12);\n\tIF (dt.month > 12) THEN\n\t\tdt.month := dt.month - 12;\n\t\tINC(years);\n\tELSIF (dt.month < 1) THEN\n\t\tdt.month := dt.month + 12;\n\t\tDEC(years);\n\tEND;\n\tIF (years # 0) THEN AddYears(dt, years); END;\n\tASSERT(IsValid(dt));\nEND AddMonths;\n\n(* AddDays --  Add/Subtract a number of days to/from date.\nThis will adjust date.month and date.year if necessary *)\nPROCEDURE AddDays*(VAR dt: DateTime; days : INTEGER);\nVAR nofDaysLeft : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tIF (days > 0) THEN\n\t\tWHILE (days > 0) DO\n\t\t\tnofDaysLeft := NumOfDays(dt.year, dt.month) - dt.day;\n\t\t\tIF (days > nofDaysLeft) THEN\n\t\t\t\tdt.day := 1;\n\t\t\t\tAddMonths(dt, 1);\n\t\t\t\tdays := days - nofDaysLeft - 1; (* -1 because we consume the first day of the next month *)\n\t\t\tELSE\n\t\t\t\tdt.day := dt.day + days;\n\t\t\t\tdays := 0;\n\t\t\tEND;\n\t\tEND;\n\tELSIF (days < 0) THEN\n\t\tdays := -days;\n\t\tWHILE (days > 0) DO\n\t\t\tnofDaysLeft := dt.day - 1;\n\t\t\tIF (days > nofDaysLeft) THEN\n\t\t\t\tdt.day := 1; (* otherwise, dt could become an invalid date if the previous month has less days than dt.day *)\n\t\t\t\tAddMonths(dt, -1);\n\t\t\t\tdt.day := NumOfDays(dt.year, dt.month);\n\t\t\t\tdays := days - nofDaysLeft - 1; (* -1 because we consume the last day of the previous month *)\n\t\t\tELSE\n\t\t\t\tdt.day := dt.day - days;\n\t\t\t\tdays := 0;\n\t\t\tEND;\n\t\tEND;\n\tEND;\n\tASSERT(IsValid(dt));\nEND AddDays;\n\n(* AddHours -- Add/Subtract a number of hours to/from date.\nThis will adjust date.day, date.month and date.year if necessary *)\nPROCEDURE AddHours*(VAR dt: DateTime; hours : INTEGER);\nVAR days : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.hour := dt.hour + hours;\n\tdays := dt.hour DIV 24;\n\tdt.hour := dt.hour MOD 24;\n\tIF (dt.hour < 0) THEN\n\t\tdt.hour := dt.hour + 24;\n\t\tDEC(days);\n\tEND;\n\tIF (days # 0) THEN AddDays(dt, days); END;\n\tASSERT(IsValid(dt));\nEND AddHours;\n\n(* AddMinutes -- Add/Subtract a number of minutes to/from date.\nThis will adjust date.hour, date.day, date.month and date.year \nif necessary *)\nPROCEDURE AddMinutes*(VAR dt: DateTime; minutes : INTEGER);\nVAR hours : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.minute := dt.minute + minutes;\n\thours := dt.minute DIV 60;\n\tdt.minute := dt.minute MOD 60;\n\tIF (dt.minute < 0) THEN\n\t\tdt.minute := dt.minute + 60;\n\t\tDEC(hours);\n\tEND;\n\tIF (hours # 0) THEN AddHours(dt, hours); END;\n\tASSERT(IsValid(dt));\nEND AddMinutes;\n\n(* AddSeconds -- Add/Subtract a number of seconds to/from date.\nThis will adjust date.minute, date.hour, date.day, date.month and\ndate.year if necessary *)\nPROCEDURE AddSeconds*(VAR dt: DateTime; seconds : INTEGER);\nVAR minutes : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.second := dt.second + seconds;\n\tminutes := dt.second DIV 60;\n\tdt.second := dt.second MOD 60;\n\tIF (dt.second < 0) THEN\n\t\tdt.second := dt.second + 60;\n\t\tDEC(minutes);\n\tEND;\n\tIF (minutes # 0) THEN AddMinutes(dt, minutes); END;\n\tASSERT(IsValid(dt));\nEND AddSeconds;\n\n\n(* IsDateString -- return TRUE if the ARRAY OF CHAR is 10 characters\nlong and is either in the form of YYYY-MM-DD or MM/DD/YYYY where\nY, M and D are digits. \nNOTE: is DOES NOT check the ranges of the digits. *)\nPROCEDURE IsDateString*(inline : ARRAY OF CHAR) : BOOLEAN;\nVAR \n    test : BOOLEAN; i, pos : INTEGER;\n    src : ARRAY MAXSTR OF CHAR;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    test := FALSE;\n    IF Strings.Length(src) = 10 THEN\n        pos := Strings.Pos(\"-\", src, 0);\n        IF pos > 0 THEN\n            IF (src[4] = \"-\") & (src[7] = \"-\") THEN\n                test := TRUE;\n                FOR i := 0 TO 9 DO\n                    IF (i # 4) & (i # 7) THEN\n                       IF Chars.IsDigit(src[i]) = FALSE THEN\n                           test := FALSE;\n                       END;\n                    END;\n                END;\n            ELSE\n                test := FALSE;\n            END;\n        END;\n        pos := Strings.Pos(\"/\", src, 0);\n        IF pos > 0 THEN\n            IF (src[2] = \"/\") & (src[5] = \"/\") THEN\n                test := TRUE;\n                FOR i := 0 TO 9 DO\n                    IF (i # 2) & (i # 5) THEN\n                        IF Chars.IsDigit(src[i]) = FALSE THEN\n                            test := FALSE;\n                        END;\n                    END;\n                END;\n            ELSE\n                test := FALSE;\n            END;\n        END;\n    END;\n    RETURN test\nEND IsDateString;\n\n(* IsTimeString -- return TRUE if the ARRAY OF CHAR has 4 to 8 \ncharacters in the form of H:MM, HH:MM, HH:MM:SS where H, M and S\nare digits. *)\nPROCEDURE IsTimeString*(inline : ARRAY OF CHAR) : BOOLEAN;\nVAR \n    test : BOOLEAN; \n    l : INTEGER;\n    src : ARRAY MAXSTR OF CHAR;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    (* remove any trailing am/pm suffixes *)\n    IF Chars.EndsWith(\"m\", src) THEN\n        IF Chars.EndsWith(\"am\", src) THEN\n            Chars.TrimSuffix(\"am\", src);\n        ELSE\n            Chars.TrimSuffix(\"pm\", src);\n        END;\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"M\", src) THEN\n        Chars.TrimSuffix(\"AM\", src);\n        Chars.TrimSuffix(\"PM\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"p\", src) THEN\n        Chars.TrimSuffix(\"p\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"P\", src) THEN\n        Chars.TrimSuffix(\"P\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"a\", src) THEN\n        Chars.TrimSuffix(\"a\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"A\", src) THEN\n        Chars.TrimSuffix(\"A\", src);\n        Chars.TrimSpace(src);\n    END;\n    Strings.Extract(src, 0, 8, src);\n    test := FALSE;\n    l := Strings.Length(src);\n    IF (l = 4) THEN\n        IF Chars.IsDigit(src[0]) & (src[1] = \":\") & \n            Chars.IsDigit(src[2]) & Chars.IsDigit(src[3]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSIF (l = 5) THEN\n        IF Chars.IsDigit(src[0]) & Chars.IsDigit(src[1]) &\n            (src[2] = \":\") & \n            Chars.IsDigit(src[3]) & Chars.IsDigit(src[4]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSIF (l = 8) THEN\n        IF Chars.IsDigit(src[0]) & Chars.IsDigit(src[1]) &\n            (src[2] = \":\") & \n            Chars.IsDigit(src[3]) & Chars.IsDigit(src[4]) & \n            (src[5] = \":\") & \n            Chars.IsDigit(src[6]) & Chars.IsDigit(src[7]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSE\n        test := FALSE;\n    END;\n    RETURN test\nEND IsTimeString;\n\n(* ParseDate -- parses a date string in YYYY-MM-DD or\nMM/DD/YYYY format. *)\nPROCEDURE ParseDate*(inline : ARRAY OF CHAR; VAR year, month, day : INTEGER) : BOOLEAN;\nVAR src, tmp : ARRAY MAXSTR OF CHAR; ok, b : BOOLEAN;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.Clear(tmp);\n    ok := FALSE;\n\tIF IsDateString(src) THEN\n        (* FIXME: Need to allow for more than 4 digit years! *)\n        IF (src[2] = \"/\") & (src[5] = \"/\") THEN\n            ok := TRUE;\n            Strings.Extract(src, 0, 2, tmp);\n            Convert.StringToInt(tmp, month, b);\n            ok := ok & b;\n            Strings.Extract(src, 4, 2, tmp);\n            Convert.StringToInt(tmp, day, b);\n            ok := ok & b;\n            Strings.Extract(src, 6, 4, tmp);\n            Convert.StringToInt(tmp, year, b);\n            ok := ok & b;\n        ELSIF (src[4] = \"-\") & (src[7] = \"-\") THEN\n            ok := TRUE;\n            Strings.Extract(src, 0, 4, tmp);\n            Convert.StringToInt(tmp, year, b);\n            ok := ok & b;\n            Strings.Extract(src, 5, 2, tmp);\n            Convert.StringToInt(tmp, month, b);\n            ok := ok & b;\n            Strings.Extract(src, 8, 2, tmp);\n            Convert.StringToInt(tmp, day, b);\n            ok := ok & b;\n        ELSE\n            ok := FALSE;\n        END;\n    END;\n    RETURN ok\nEND ParseDate;\n\n(* ParseTime -- procedure for parsing time strings into hour,\nminute, second. Returns TRUE on successful parse, FALSE otherwise *)\nPROCEDURE ParseTime*(inline : ARRAY OF CHAR; VAR hour, minute, second : INTEGER) : BOOLEAN;\nVAR src, tmp : ARRAY MAXSTR OF CHAR; ok : BOOLEAN; cur, pos, l : INTEGER;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.Clear(tmp);\n\tIF IsTimeString(src) THEN\n        ok := TRUE;\n        cur := 0; pos := 0;\n        pos := Strings.Pos(\":\", src, cur);\n        IF pos > 0 THEN\n        (* Get Hour *)\n            Strings.Extract(src, cur, pos - cur, tmp);\n            Convert.StringToInt(tmp, hour, ok);\n            IF ok THEN\n                (* Get Minute *)\n                cur := pos + 1;\n                Strings.Extract(src, cur, 2, tmp);\n                Convert.StringToInt(tmp, minute, ok);\n                IF ok THEN\n                    (* Get second, optional, default to zero *)\n                    pos := Strings.Pos(\":\", src, cur);\n                    IF pos > 0 THEN\n                        cur := pos + 1;\n                        Strings.Extract(src, cur, 2, tmp);\n                        Convert.StringToInt(tmp, second, ok);\n                        cur := cur + 2;\n                    ELSE\n                        second := 0;\n                    END;\n                    (* Get AM/PM, optional, adjust hour if PM *)\n                    l := Strings.Length(src);\n                    WHILE (cur < l) & Chars.IsSpace(src[cur]) DO\n                        cur := cur + 1;\n                    END;\n                    Strings.Extract(src, cur, 2, tmp);\n                    Chars.TrimSpace(tmp);\n                    IF Chars.Equal(tmp, \"PM\") OR Chars.Equal(tmp, \"pm\") THEN\n                        hour := hour + 12;\n                    END;\n                ELSE\n                    ok := FALSE;\n                END;\n            END;\n        ELSE\n            ok := FALSE;\n        END;\n    ELSE\n        ok := FALSE;\n    END;\n    IF ok THEN\n        ok := ((hour >= 0) & (hour <= 23)) &\n            ((minute >= 0) & (minute <= 59)) &\n                ((second >= 0) & (second <= 59));\n    END;\n    RETURN ok\nEND ParseTime;\n\n\n(* Parse accepts a date array of chars in either dates, times\nor dates and times separate by spaces. Date formats supported\ninclude YYYY-MM-DD, MM/DD/YYYY. Time formats include\nH:MM, HH:MM, H:MM:SS, HH:MM:SS with 'a', 'am', 'p', 'pm' \nsuffixes.  Dates and times can also be accepted as JSON \nexpressions with the individual time compontents are specified \nas attributes, e.g. `{\"year\": 1998, \"month\": 12, \"day\": 10,\n\"hour\": 11, \"minute\": 4, \"second\": 3}.\nParse returns TRUE on successful parse, FALSE otherwise.\n\nBUG: Assumes a 4 digit year.\n*) \nPROCEDURE Parse*(inline : ARRAY OF CHAR; VAR dt: DateTime) : BOOLEAN;\nVAR src, ds, ts, tmp : ARRAY SHORTSTR OF CHAR; ok, okDate, okTime : BOOLEAN; \n    pos, year, month, day, hour, minute, second : INTEGER;\nBEGIN\n    dt.year := 0;\n    dt.month := 0;\n    dt.day := 0;\n    dt.hour := 0;\n    dt.minute := 0;\n    dt.second := 0;\n    Chars.Clear(tmp);\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    (* Split into Date and Time components *)\n    pos := Strings.Pos(\" \", src, 0);\n    IF pos >= 0 THEN\n        Strings.Extract(src, 0, pos, ds);\n        pos := pos + 1;\n        Strings.Extract(src, pos, Strings.Length(src) - pos, ts);\n    ELSE\n        Chars.Set(src, ds);\n        Chars.Set(src, ts);\n    END;\n    ok := FALSE;\n    IF IsDateString(ds) THEN\n        ok := TRUE;\n        okDate := ParseDate(ds, year, month, day);\n        SetDate(year, month, day, dt);\n        ok := ok & okDate;\n    END;\n    IF IsTimeString(ts) THEN\n        ok := ok OR okDate;\n        okTime := ParseTime(ts, hour, minute, second);\n        SetTime(hour, minute, second, dt);\n        ok := ok & okTime;\n    END;\n    RETURN ok\nEND Parse;\n\nBEGIN\n    Chars.Set(\"January\", Months[0]);\n    Chars.Set(\"February\", Months[1]);\n    Chars.Set(\"March\", Months[2]);\n    Chars.Set(\"April\", Months[3]);\n    Chars.Set(\"May\", Months[4]);\n    Chars.Set(\"June\", Months[5]);\n    Chars.Set(\"July\", Months[6]);\n    Chars.Set(\"August\", Months[7]);\n    Chars.Set(\"September\", Months[8]);\n    Chars.Set(\"October\", Months[9]);\n    Chars.Set(\"November\", Months[10]);\n    Chars.Set(\"December\", Months[11]);\n\n    Chars.Set(\"Sunday\", Days[0]);\n    Chars.Set(\"Monday\", Days[1]);\n    Chars.Set(\"Tuesday\", Days[2]);\n    Chars.Set(\"Wednesday\", Days[3]);\n    Chars.Set(\"Thursday\", Days[4]);\n    Chars.Set(\"Friday\", Days[5]);\n    Chars.Set(\"Saturday\", Days[6]);\n\n    DaysInMonth[0] := 31; (* January *)\n    DaysInMonth[1] := 28; (* February *)\n    DaysInMonth[2] := 31; (* March *)\n    DaysInMonth[3] := 30; (* April *)\n    DaysInMonth[4] := 31; (* May *)\n    DaysInMonth[5] := 30; (* June *)\n    DaysInMonth[6] := 31; (* July *)\n    DaysInMonth[7] := 31; (* August *)\n    DaysInMonth[8] := 30; (* September *)\n    DaysInMonth[9] := 31; (* October *)\n    DaysInMonth[10] := 30; (* November *)\n    DaysInMonth[11] := 31; (* December *)\n\nEND Dates.\n\n~~~\n\n\n",
  "content_ast": {
    "children": [
      {
        "children": [
          {
            "type": "text",
            "value": "Dates"
          }
        ],
        "depth": 1,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "This module provides minimal date time records and procedures\nfor working with dates in YYYY-MM-DD and MM/DD/YYYY format and\ntimes in H:MM, HH:MM and HH:MM:SS formats."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Set\n: Set a DateTime record providing year, month, day, hour, minute and second as integers and the DateTime record to be populated."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "SetDate\n: Set the date portion of a DateTime record, leaves the hour, minute and second attributes unmodified."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "SetTime\n: Set the time portion of a DateTime record, leaves the year, month, date attributes unmodified."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Copy\n: Copy the attributes of one DateTime record into another DateTime record"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "ToChars\n: Given a DateTime record and a format constant, render the DateTime record to an array of CHAR."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "LeapYear\n: Given a DateTime record check to see if it is a  leap year."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "NumOfDays\n: Given a year and monoth return the number of days in the month."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsValid\n: Check to see if the all attributes in a DateTime record are valid."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "OberonToDateTime\n: Convert oberon date and time integer values into a DateTime record"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "DateTimeToOberon\n: Convert a DateTime record into Oberon date and time integer values."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Now\n: Set a DateTime record's attributes to the current time, depends of on the implementation of Clock.Mod."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "WeekDate\n: Given a DateTime record calculates the year, week and weekday as integers values."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Equal\n: Checks to DateTime records to see if they have equivalent attribute values."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Compare\n: Compare two DateTime records, if t1 < t2 then return -1, if t1 = t2 return 0 else if t1 > t2 return 1."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "CompareDate\n: Compare the year, month, day attributes of two DateTime records following the approach used in Compare."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "CompareTime\n: Compare the hour, minute, second attributes of two DateTime records following the approach used in Compare."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "TimeDifference\n: Take the differ of two DateTime records setting the difference in integer values for days, hours, minutes and seconds."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "AddYears\n: Add years to a DateTime record. Years is a positive or negative integer."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "AddMonths\n: Add months to a DateTime record. Months is either a positive or negative integer. Months will propogate to year in the DataTime record."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "AddDays\n: Add days to a DateTime record. Days can be either a positive or negative integer.  Days will propogate to month and year attributes of the DateTime record."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "AddHours\n: Add hours to a DateTime record. Hours can be either a positive or negative integer.  Hours will propogate to day, month and year attributes of the DateTime record."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "AddMinutes\n: Add minutes to a DateTime record. Minutes can be either a positive or negative integer. Minutes will propogate to hour, day, month and year attributes of the DateTime record."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "AddSeconds\n: Add seconds to a DateTime record. Seconds can be either a positive or negatice integer.  Seconds will propogate to minute, hour, day, month, year attributes of the DateTime record."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsValidDate\n: IsValidDate checks the day, month, year attributes of a DateTime record and validates the values. Returns TRUE if everthing is ok, FALSE otherwise."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsValidTime\n: IsValidTime checks the hour, minute, second attributes of a DateTime record and validates the values. Returns TRUE if everthing is ok, FALSE otherwise."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsDateString\n: Checks to see if an ARRAY OF CHAR is a parsiable date string (e.g. in 2020-11-26 or 11/26/2020). Returns TRUE if the string is parsable, FALSE otherwise. NOTE: It does NOT check to see if the day, month or year values are valid. It only checks the format of the string."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsTimeString\n: Checks to see if an ARRAY OF CHAR is a parsible time string (e.g. 3:32, 14:55, 09:19:22). NOTE: It only checks the format and does not check the hour, minute and second values."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "ParseDate\n: Parse an ARRAY OF CHAR setting the values if year, month and day. Return TRUE on successful parse and FALSE otherwise."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "ParseTime\n: Parse an ARRAY OF CHAR setting the values of hour, minute and second. Return TRUE on succesful parse and FALSE otherwise."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Parse\n: Parse an ARRAY OF CHAR setting the attributes of a DateTime record. Return TURE on success, FALSE otherwise."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Limitations"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Dates are presumed to be in the YYYY-DD-MM or MM/DD/YYYY formats.\nDoes not handle dates with spelled out months or weekdays."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Time portion of the date object doesn't include time zone.\nThis will need to be rectified at some point."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Source code for "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Dates.Mod"
              }
            ],
            "type": "strong"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "type": "code",
        "value": "(* Dates -- this module was inspired by the A2's Dates module, adapted\n   for Oberon-07 and a POSIX system. It provides an assortment of procedures\n   for working with a simple datetime record.\n\nCopyright (C) 2020 R. S. Doiel\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\n@Author R. S. Doiel, <rsdoiel@gmail.com>\ncopyright (c) 2020, all rights reserved.\nThis software is released under the GNU AGPL\nSee http://www.gnu.org/licenses/agpl-3.0.html\n*)\nMODULE Dates;\nIMPORT Chars, Strings, Clock, Convert := extConvert; (*, Out; **)\n\nCONST\n    MAXSTR = Chars.MAXSTR;\n    SHORTSTR = Chars.SHORTSTR;\n\n    YYYYMMDD* = 1; (* YYYY-MM-DD format *)\n    MMDDYYYY* = 2; (* MM/DD/YYYY format *)\n    YYYYMMDDHHMMSS* = 3; (* YYYY-MM-DD HH:MM:SS format *)\n\nTYPE\n    DateTime* = RECORD\n        year*, month*, day*, hour*, minute*, second* : INTEGER\n    END;\n\nVAR\n    (* Month names, January = 0, December = 11 *)\n    Months*: ARRAY 23 OF ARRAY 10 OF CHAR; \n    (* Days of week, Monday = 0, Sunday = 6 *)\n    Days*: ARRAY 7 OF ARRAY 10 OF CHAR;\n    DaysInMonth: ARRAY 12 OF INTEGER;\n\n\n(* Set -- initialize a date record year, month and day values *)\nPROCEDURE Set*(year, month, day, hour, minute, second : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.year := year;\n    dt.month := month;\n    dt.day := day;\n    dt.hour := hour;\n    dt.minute := minute;\n    dt.second := second;\nEND Set;\n\n(* SetDate -- set a Date record's year, month and day attributes *)\nPROCEDURE SetDate*(year, month, day : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.year := year;\n    dt.month := month;\n    dt.day := day;\nEND SetDate;\n\n(* SetTime -- set a Date record's hour, minute, second attributes *)\nPROCEDURE SetTime*(hour, minute, second : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.hour := hour;\n    dt.minute := minute;\n    dt.second := second;\nEND SetTime;\n\n(* Copy -- copy the values from one date record to another *)\nPROCEDURE Copy*(src : DateTime; VAR dest : DateTime);\nBEGIN\n    dest.year := src.year;\n    dest.month := src.month;\n    dest.day := src.day;\n    dest.hour := src.hour;\n    dest.minute := src.minute;\n    dest.second := src.second;\nEND Copy;\n\n(* ToChars -- converts a date record into an array of chars using\nthe format constant. Formats supported are YYYY-MM-DD HH:MM:SS\nor MM/DD/YYYY HH:MM:SS. *)\nPROCEDURE ToChars*(dt: DateTime; fmt : INTEGER; VAR src : ARRAY OF CHAR);\nVAR ok : BOOLEAN;\nBEGIN\n    Chars.Clear(src);\n    IF fmt = YYYYMMDD THEN\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n    ELSIF fmt = MMDDYYYY THEN\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"/\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n        ok := Chars.AppendChar(\"/\", src);\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n    ELSIF fmt = YYYYMMDDHHMMSS THEN\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n        ok := Chars.AppendChar(\" \", src);\n        Chars.AppendInt(dt.hour, 2, \"0\", src);\n        ok := Chars.AppendChar(\":\", src);\n        Chars.AppendInt(dt.minute, 2, \"0\", src);\n        ok := Chars.AppendChar(\":\", src);\n        Chars.AppendInt(dt.second, 2, \"0\", src);\n    END;\nEND ToChars;\n\n(* \n * Date and Time functions very much inspired by A2 but\n * adapted for use in Oberon-07 and OBNC compiler.\n *)\n\n(* LeapYear -- returns TRUE if 'year' is a leap year *)\nPROCEDURE LeapYear*(year: INTEGER): BOOLEAN;\nBEGIN\n\tRETURN (year > 0) & (year MOD 4 = 0) & (~(year MOD 100 = 0) OR (year MOD 400 = 0))\nEND LeapYear;\n\n(* NumOfDays -- number of days, returns the number of days in that month *)\nPROCEDURE NumOfDays*(year, month: INTEGER): INTEGER;\nVAR result : INTEGER;\nBEGIN\n    result := 0;\n\tDEC(month);\n\tIF ((month >= 0) & (month < 12)) THEN\n\t    IF (month = 1) & LeapYear(year) THEN \n            result := DaysInMonth[1]+1;\n\t    ELSE \n            result := DaysInMonth[month];\n\t    END;\n    END;\n    RETURN result\nEND NumOfDays;\n\n(* IsValid -- checks if the attributes set in a DateTime record are valid *)\nPROCEDURE IsValid*(dt: DateTime): BOOLEAN;\nBEGIN\n\tRETURN ((dt.year > 0) & (dt.month > 0) & (dt.month <= 12) & (dt.day > 0) & (dt.day <= NumOfDays(dt.year, dt.month)) & (dt.hour >= 0) & (dt.hour < 24) & (dt.minute >= 0) & (dt.minute < 60) & (dt.second >= 0) & (dt.second < 60))\nEND IsValid;\n\n(* IsValidDate -- checks to see if a datetime record has valid day, month and year\nattributes *)\nPROCEDURE IsValidDate*(dt: DateTime) : BOOLEAN;\nBEGIN\n\tRETURN (dt.year > 0) & (dt.month > 0) & (dt.month <= 12) & (dt.day > 0) & (dt.day <= NumOfDays(dt.year, dt.month))\nEND IsValidDate;\n\n(* IsValidTime -- checks if the hour, minute, second attributes set in a DateTime record are valid *)\nPROCEDURE IsValidTime*(dt: DateTime): BOOLEAN;\nBEGIN\n\tRETURN (dt.hour >= 0) & (dt.hour < 24) & (dt.minute >= 0) & (dt.minute < 60) & (dt.second >= 0) & (dt.second < 60)\nEND IsValidTime;\n\n\n(* OberonToDateTime -- convert an Oberon date/time to a DateTime \nstructure *)\nPROCEDURE OberonToDateTime*(Date, Time: INTEGER; VAR dt : DateTime);\nBEGIN\n\tdt.second := Time MOD 64; Time := Time DIV 64;\n\tdt.minute := Time MOD 64; Time := Time DIV 64;\n\tdt.hour := Time MOD 24;\n\tdt.day := Date MOD 32; Date := Date DIV 32;\n\tdt.month := (Date MOD 16) + 1; Date := Date DIV 16;\n\tdt.year := Date;\nEND OberonToDateTime;\n\n(* DateTimeToOberon -- convert a DateTime structure to an Oberon \ndate/time *)\nPROCEDURE DateTimeToOberon*(dt: DateTime; VAR date, time: INTEGER);\nBEGIN\n\tIF IsValid(dt) THEN\n\tdate := (dt.year)*512 + dt.month*32 + dt.day;\n\ttime := dt.hour*4096 + dt.minute*64 + dt.second\n    ELSE\n        date := 0;\n        time := 0;\n    END;\nEND DateTimeToOberon;\n\n(* Now -- returns the current date and time as a DateTime record. *)\nPROCEDURE Now*(VAR dt: DateTime);\nVAR d, t: INTEGER;\nBEGIN\n\tClock.Get(t, d);\n\tOberonToDateTime(d, t, dt);\nEND Now;\n\n\n(* WeekDate -- returns the ISO 8601 year number, week number &\nweek day (Monday=1, ....Sunday=7) \nAlgorithm is by Rick McCarty, http://personal.ecu.edu/mccartyr/ISOwdALG.txt\n*)\nPROCEDURE WeekDate*(dt: DateTime; VAR year, week, weekday: INTEGER);\nVAR doy, i, yy, c, g, jan1: INTEGER; leap: BOOLEAN;\nBEGIN\n\tIF IsValid(dt) THEN\n\t\tleap := LeapYear(dt.year);\n\t\tdoy := dt.day; i := 0;\n\t\tWHILE (i < (dt.month - 1)) DO \n            doy := doy + DaysInMonth[i];\n            INC(i);\n        END;\n\t\tIF leap & (dt.month > 2) THEN \n            INC(doy);\n        END;\n\t\tyy := (dt.year - 1) MOD 100; \n        c := (dt.year - 1) - yy; \n        g := (yy + yy) DIV 4;\n\t\tjan1 := 1 + (((((c DIV 100) MOD 4) * 5) + g) MOD 7);\n\n\t\tweekday := 1 + (((doy + (jan1 - 1)) - 1) MOD 7);\n\n\t\tIF (doy <= (8 - jan1)) & (jan1 > 4) THEN (* falls in year-1 ? *)\n\t\t\tyear := dt.year - 1;\n\t\t\tIF (jan1 = 5) OR ((jan1 = 6) & LeapYear(year)) THEN \n                week := 53;\n\t\t\tELSE \n                week := 52;\n\t\t\tEND;\n\t\tELSE\n\t\t\tIF leap THEN \n                i := 366;\n            ELSE \n                i := 365;\n            END;\n\t\t\tIF ((i - doy) < (4 - weekday)) THEN\n\t\t\t\tyear := dt.year + 1;\n\t\t\t\tweek := 1;\n\t\t\tELSE\n\t\t\t\tyear := dt.year;\n\t\t\t\ti := doy + (7-weekday) + (jan1-1);\n\t\t\t\tweek := i DIV 7;\n\t\t\t\tIF (jan1 > 4) THEN \n                    DEC(week);\n                END;\n\t\t\tEND;\n\t\tEND;\n\tELSE\n\t\tyear := -1; week := -1; weekday := -1;\n\tEND;\nEND WeekDate;\n\n(* Equal -- compare to date records to see if they are equal values *)\nPROCEDURE Equal*(t1, t2: DateTime) : BOOLEAN;\nBEGIN\n\tRETURN ((t1.second = t2.second) & (t1.minute = t2.minute) & (t1.hour = t2.hour) & (t1.day = t2.day) & (t1.month = t2.month) & (t1.year = t2.year))\nEND Equal;\n\n(* compare -- used in Compare only for comparing specific values,\n    returning an appropriate -1, 0, 1 *)\nPROCEDURE compare(t1, t2 : INTEGER) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tIF (t1 < t2) THEN \n        result := -1;\n\tELSIF (t1 > t2) THEN \n        result := 1;\n\tELSE \n        result := 0;\n\tEND;\n\tRETURN result\nEND compare;\n\n(* Compare -- returns -1 if (t1 < t2), 0 if (t1 = t2) or 1 if (t1 >  t2) *)\nPROCEDURE Compare*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.year, t2.year);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.month, t2.month);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.day, t2.day);\n\t\t\tIF (result = 0) THEN\n\t\t\t\tresult := compare(t1.hour, t2.hour);\n\t\t\t\tIF (result = 0) THEN\n\t\t\t\t\tresult := compare(t1.minute, t2.minute);\n\t\t\t\t\tIF (result = 0) THEN\n\t\t\t\t\t\tresult := compare(t1.second, t2.second);\n\t\t\t\t\tEND;\n\t\t\t\tEND;\n\t\t\tEND;\n\t\tEND;\n\tEND;\n\tRETURN result\nEND Compare;\n\n(* CompareDate -- compare day, month and year values only *)\nPROCEDURE CompareDate*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.year, t2.year);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.month, t2.month);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.day, t2.day);\n\t\tEND;\n\tEND;\n\tRETURN result\nEND CompareDate;\n\n(* CompareTime -- compare second, minute and hour values only *)\nPROCEDURE CompareTime*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.hour, t2.hour);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.minute, t2.minute);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.second, t2.second);\n\t\tEND;\n\tEND;\n\tRETURN result\nEND CompareTime;\n\n\n\n(* TimeDifferences -- returns the absolute time difference between \nt1 and t2.\n\nNote that leap seconds are not counted, \nsee http://www.eecis.udel.edu/~mills/leap.html *)\nPROCEDURE TimeDifference*(t1, t2: DateTime; VAR days, hours, minutes, seconds : INTEGER);\nCONST SecondsPerMinute = 60; SecondsPerHour = 3600; SecondsPerDay = 86400;\nVAR start, end: DateTime; year, month, second : INTEGER;\nBEGIN\n\tIF (Compare(t1, t2) = -1) THEN \n        start := t1; \n        end := t2; \n    ELSE \n        start := t2; \n        end := t1; \n    END;\n\tIF (start.year = end.year) & (start.month = end.month) & (start.day = end.day) THEN\n\t\tsecond := end.second - start.second + ((end.minute - start.minute) * SecondsPerMinute) + ((end.hour - start.hour) * SecondsPerHour);\n\t\tdays := 0;\n        hours := 0;\n        minutes := 0;\n\tELSE\n\t\t(* use start date/time as reference point *)\n\t\t(* seconds until end of the start.day *)\n\t\tsecond := (SecondsPerDay - start.second) - (start.minute * SecondsPerMinute) - (start.hour * SecondsPerHour);\n\t\tIF (start.year = end.year) & (start.month = end.month) THEN\n\t\t\t(* days between start.day and end.day *)\n\t\t\tdays := (end.day - start.day) - 1;\n\t\tELSE\n\t\t\t(* days until start.month ends excluding start.day *)\n\t\t\tdays := NumOfDays(start.year, start.month) - start.day;\n\t\t\tIF (start.year = end.year) THEN\n\t\t\t\t(* months between start.month and end.month *)\n\t\t\t\tFOR month := start.month + 1 TO end.month - 1 DO\n\t\t\t\t\tdays := days + NumOfDays(start.year, month);\n\t\t\t\tEND;\n\t\t\tELSE\n\t\t\t\t(* days until start.year ends (excluding start.month) *)\n\t\t\t\tFOR month := start.month + 1 TO 12 DO\n\t\t\t\t\tdays := days + NumOfDays(start.year, month);\n\t\t\t\tEND;\n\t\t\t\tFOR year := start.year + 1 TO end.year - 1 DO (* days between start.years and end.year *)\n\t\t\t\t\tIF LeapYear(year) THEN days := days + 366; ELSE days := days + 365; END;\n\t\t\t\tEND;\n\t\t\t\tFOR month := 1 TO end.month - 1 DO (* days until we reach end.month in end.year *)\n\t\t\t\t\tdays := days + NumOfDays(end.year, month);\n\t\t\t\tEND;\n\t\t\tEND;\n\t\t\t(* days in end.month until reaching end.day excluding end.day *)\n\t\t\tdays := (days + end.day) - 1;\n\t\tEND;\n\t\t(* seconds in end.day *)\n\t\tsecond := second + end.second + (end.minute * SecondsPerMinute) + (end.hour * SecondsPerHour);\n\tEND;\n\tdays := days + (second DIV SecondsPerDay); second := (second MOD SecondsPerDay);\n\thours := (second DIV SecondsPerHour); second := (second MOD SecondsPerHour);\n\tminutes := (second DIV SecondsPerMinute); second := (second MOD SecondsPerMinute);\n\tseconds := second;\nEND TimeDifference;\n\n(* AddYear -- Add/Subtract a number of years to/from date *)\nPROCEDURE AddYears*(VAR dt: DateTime; years : INTEGER);\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.year := dt.year + years;\n\tASSERT(IsValid(dt));\nEND AddYears;\n\n(* AddMonths -- Add/Subtract a number of months to/from date.\nThis will adjust date.year if necessary *)\nPROCEDURE AddMonths*(VAR dt: DateTime; months : INTEGER);\nVAR years : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tyears := months DIV 12;\n\tdt.month := dt.month + (months MOD 12);\n\tIF (dt.month > 12) THEN\n\t\tdt.month := dt.month - 12;\n\t\tINC(years);\n\tELSIF (dt.month < 1) THEN\n\t\tdt.month := dt.month + 12;\n\t\tDEC(years);\n\tEND;\n\tIF (years # 0) THEN AddYears(dt, years); END;\n\tASSERT(IsValid(dt));\nEND AddMonths;\n\n(* AddDays --  Add/Subtract a number of days to/from date.\nThis will adjust date.month and date.year if necessary *)\nPROCEDURE AddDays*(VAR dt: DateTime; days : INTEGER);\nVAR nofDaysLeft : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tIF (days > 0) THEN\n\t\tWHILE (days > 0) DO\n\t\t\tnofDaysLeft := NumOfDays(dt.year, dt.month) - dt.day;\n\t\t\tIF (days > nofDaysLeft) THEN\n\t\t\t\tdt.day := 1;\n\t\t\t\tAddMonths(dt, 1);\n\t\t\t\tdays := days - nofDaysLeft - 1; (* -1 because we consume the first day of the next month *)\n\t\t\tELSE\n\t\t\t\tdt.day := dt.day + days;\n\t\t\t\tdays := 0;\n\t\t\tEND;\n\t\tEND;\n\tELSIF (days < 0) THEN\n\t\tdays := -days;\n\t\tWHILE (days > 0) DO\n\t\t\tnofDaysLeft := dt.day - 1;\n\t\t\tIF (days > nofDaysLeft) THEN\n\t\t\t\tdt.day := 1; (* otherwise, dt could become an invalid date if the previous month has less days than dt.day *)\n\t\t\t\tAddMonths(dt, -1);\n\t\t\t\tdt.day := NumOfDays(dt.year, dt.month);\n\t\t\t\tdays := days - nofDaysLeft - 1; (* -1 because we consume the last day of the previous month *)\n\t\t\tELSE\n\t\t\t\tdt.day := dt.day - days;\n\t\t\t\tdays := 0;\n\t\t\tEND;\n\t\tEND;\n\tEND;\n\tASSERT(IsValid(dt));\nEND AddDays;\n\n(* AddHours -- Add/Subtract a number of hours to/from date.\nThis will adjust date.day, date.month and date.year if necessary *)\nPROCEDURE AddHours*(VAR dt: DateTime; hours : INTEGER);\nVAR days : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.hour := dt.hour + hours;\n\tdays := dt.hour DIV 24;\n\tdt.hour := dt.hour MOD 24;\n\tIF (dt.hour < 0) THEN\n\t\tdt.hour := dt.hour + 24;\n\t\tDEC(days);\n\tEND;\n\tIF (days # 0) THEN AddDays(dt, days); END;\n\tASSERT(IsValid(dt));\nEND AddHours;\n\n(* AddMinutes -- Add/Subtract a number of minutes to/from date.\nThis will adjust date.hour, date.day, date.month and date.year \nif necessary *)\nPROCEDURE AddMinutes*(VAR dt: DateTime; minutes : INTEGER);\nVAR hours : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.minute := dt.minute + minutes;\n\thours := dt.minute DIV 60;\n\tdt.minute := dt.minute MOD 60;\n\tIF (dt.minute < 0) THEN\n\t\tdt.minute := dt.minute + 60;\n\t\tDEC(hours);\n\tEND;\n\tIF (hours # 0) THEN AddHours(dt, hours); END;\n\tASSERT(IsValid(dt));\nEND AddMinutes;\n\n(* AddSeconds -- Add/Subtract a number of seconds to/from date.\nThis will adjust date.minute, date.hour, date.day, date.month and\ndate.year if necessary *)\nPROCEDURE AddSeconds*(VAR dt: DateTime; seconds : INTEGER);\nVAR minutes : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.second := dt.second + seconds;\n\tminutes := dt.second DIV 60;\n\tdt.second := dt.second MOD 60;\n\tIF (dt.second < 0) THEN\n\t\tdt.second := dt.second + 60;\n\t\tDEC(minutes);\n\tEND;\n\tIF (minutes # 0) THEN AddMinutes(dt, minutes); END;\n\tASSERT(IsValid(dt));\nEND AddSeconds;\n\n\n(* IsDateString -- return TRUE if the ARRAY OF CHAR is 10 characters\nlong and is either in the form of YYYY-MM-DD or MM/DD/YYYY where\nY, M and D are digits. \nNOTE: is DOES NOT check the ranges of the digits. *)\nPROCEDURE IsDateString*(inline : ARRAY OF CHAR) : BOOLEAN;\nVAR \n    test : BOOLEAN; i, pos : INTEGER;\n    src : ARRAY MAXSTR OF CHAR;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    test := FALSE;\n    IF Strings.Length(src) = 10 THEN\n        pos := Strings.Pos(\"-\", src, 0);\n        IF pos > 0 THEN\n            IF (src[4] = \"-\") & (src[7] = \"-\") THEN\n                test := TRUE;\n                FOR i := 0 TO 9 DO\n                    IF (i # 4) & (i # 7) THEN\n                       IF Chars.IsDigit(src[i]) = FALSE THEN\n                           test := FALSE;\n                       END;\n                    END;\n                END;\n            ELSE\n                test := FALSE;\n            END;\n        END;\n        pos := Strings.Pos(\"/\", src, 0);\n        IF pos > 0 THEN\n            IF (src[2] = \"/\") & (src[5] = \"/\") THEN\n                test := TRUE;\n                FOR i := 0 TO 9 DO\n                    IF (i # 2) & (i # 5) THEN\n                        IF Chars.IsDigit(src[i]) = FALSE THEN\n                            test := FALSE;\n                        END;\n                    END;\n                END;\n            ELSE\n                test := FALSE;\n            END;\n        END;\n    END;\n    RETURN test\nEND IsDateString;\n\n(* IsTimeString -- return TRUE if the ARRAY OF CHAR has 4 to 8 \ncharacters in the form of H:MM, HH:MM, HH:MM:SS where H, M and S\nare digits. *)\nPROCEDURE IsTimeString*(inline : ARRAY OF CHAR) : BOOLEAN;\nVAR \n    test : BOOLEAN; \n    l : INTEGER;\n    src : ARRAY MAXSTR OF CHAR;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    (* remove any trailing am/pm suffixes *)\n    IF Chars.EndsWith(\"m\", src) THEN\n        IF Chars.EndsWith(\"am\", src) THEN\n            Chars.TrimSuffix(\"am\", src);\n        ELSE\n            Chars.TrimSuffix(\"pm\", src);\n        END;\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"M\", src) THEN\n        Chars.TrimSuffix(\"AM\", src);\n        Chars.TrimSuffix(\"PM\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"p\", src) THEN\n        Chars.TrimSuffix(\"p\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"P\", src) THEN\n        Chars.TrimSuffix(\"P\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"a\", src) THEN\n        Chars.TrimSuffix(\"a\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"A\", src) THEN\n        Chars.TrimSuffix(\"A\", src);\n        Chars.TrimSpace(src);\n    END;\n    Strings.Extract(src, 0, 8, src);\n    test := FALSE;\n    l := Strings.Length(src);\n    IF (l = 4) THEN\n        IF Chars.IsDigit(src[0]) & (src[1] = \":\") & \n            Chars.IsDigit(src[2]) & Chars.IsDigit(src[3]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSIF (l = 5) THEN\n        IF Chars.IsDigit(src[0]) & Chars.IsDigit(src[1]) &\n            (src[2] = \":\") & \n            Chars.IsDigit(src[3]) & Chars.IsDigit(src[4]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSIF (l = 8) THEN\n        IF Chars.IsDigit(src[0]) & Chars.IsDigit(src[1]) &\n            (src[2] = \":\") & \n            Chars.IsDigit(src[3]) & Chars.IsDigit(src[4]) & \n            (src[5] = \":\") & \n            Chars.IsDigit(src[6]) & Chars.IsDigit(src[7]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSE\n        test := FALSE;\n    END;\n    RETURN test\nEND IsTimeString;\n\n(* ParseDate -- parses a date string in YYYY-MM-DD or\nMM/DD/YYYY format. *)\nPROCEDURE ParseDate*(inline : ARRAY OF CHAR; VAR year, month, day : INTEGER) : BOOLEAN;\nVAR src, tmp : ARRAY MAXSTR OF CHAR; ok, b : BOOLEAN;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.Clear(tmp);\n    ok := FALSE;\n\tIF IsDateString(src) THEN\n        (* FIXME: Need to allow for more than 4 digit years! *)\n        IF (src[2] = \"/\") & (src[5] = \"/\") THEN\n            ok := TRUE;\n            Strings.Extract(src, 0, 2, tmp);\n            Convert.StringToInt(tmp, month, b);\n            ok := ok & b;\n            Strings.Extract(src, 4, 2, tmp);\n            Convert.StringToInt(tmp, day, b);\n            ok := ok & b;\n            Strings.Extract(src, 6, 4, tmp);\n            Convert.StringToInt(tmp, year, b);\n            ok := ok & b;\n        ELSIF (src[4] = \"-\") & (src[7] = \"-\") THEN\n            ok := TRUE;\n            Strings.Extract(src, 0, 4, tmp);\n            Convert.StringToInt(tmp, year, b);\n            ok := ok & b;\n            Strings.Extract(src, 5, 2, tmp);\n            Convert.StringToInt(tmp, month, b);\n            ok := ok & b;\n            Strings.Extract(src, 8, 2, tmp);\n            Convert.StringToInt(tmp, day, b);\n            ok := ok & b;\n        ELSE\n            ok := FALSE;\n        END;\n    END;\n    RETURN ok\nEND ParseDate;\n\n(* ParseTime -- procedure for parsing time strings into hour,\nminute, second. Returns TRUE on successful parse, FALSE otherwise *)\nPROCEDURE ParseTime*(inline : ARRAY OF CHAR; VAR hour, minute, second : INTEGER) : BOOLEAN;\nVAR src, tmp : ARRAY MAXSTR OF CHAR; ok : BOOLEAN; cur, pos, l : INTEGER;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.Clear(tmp);\n\tIF IsTimeString(src) THEN\n        ok := TRUE;\n        cur := 0; pos := 0;\n        pos := Strings.Pos(\":\", src, cur);\n        IF pos > 0 THEN\n        (* Get Hour *)\n            Strings.Extract(src, cur, pos - cur, tmp);\n            Convert.StringToInt(tmp, hour, ok);\n            IF ok THEN\n                (* Get Minute *)\n                cur := pos + 1;\n                Strings.Extract(src, cur, 2, tmp);\n                Convert.StringToInt(tmp, minute, ok);\n                IF ok THEN\n                    (* Get second, optional, default to zero *)\n                    pos := Strings.Pos(\":\", src, cur);\n                    IF pos > 0 THEN\n                        cur := pos + 1;\n                        Strings.Extract(src, cur, 2, tmp);\n                        Convert.StringToInt(tmp, second, ok);\n                        cur := cur + 2;\n                    ELSE\n                        second := 0;\n                    END;\n                    (* Get AM/PM, optional, adjust hour if PM *)\n                    l := Strings.Length(src);\n                    WHILE (cur < l) & Chars.IsSpace(src[cur]) DO\n                        cur := cur + 1;\n                    END;\n                    Strings.Extract(src, cur, 2, tmp);\n                    Chars.TrimSpace(tmp);\n                    IF Chars.Equal(tmp, \"PM\") OR Chars.Equal(tmp, \"pm\") THEN\n                        hour := hour + 12;\n                    END;\n                ELSE\n                    ok := FALSE;\n                END;\n            END;\n        ELSE\n            ok := FALSE;\n        END;\n    ELSE\n        ok := FALSE;\n    END;\n    IF ok THEN\n        ok := ((hour >= 0) & (hour <= 23)) &\n            ((minute >= 0) & (minute <= 59)) &\n                ((second >= 0) & (second <= 59));\n    END;\n    RETURN ok\nEND ParseTime;\n\n\n(* Parse accepts a date array of chars in either dates, times\nor dates and times separate by spaces. Date formats supported\ninclude YYYY-MM-DD, MM/DD/YYYY. Time formats include\nH:MM, HH:MM, H:MM:SS, HH:MM:SS with 'a', 'am', 'p', 'pm' \nsuffixes.  Dates and times can also be accepted as JSON \nexpressions with the individual time compontents are specified \nas attributes, e.g. `{\"year\": 1998, \"month\": 12, \"day\": 10,\n\"hour\": 11, \"minute\": 4, \"second\": 3}.\nParse returns TRUE on successful parse, FALSE otherwise.\n\nBUG: Assumes a 4 digit year.\n*) \nPROCEDURE Parse*(inline : ARRAY OF CHAR; VAR dt: DateTime) : BOOLEAN;\nVAR src, ds, ts, tmp : ARRAY SHORTSTR OF CHAR; ok, okDate, okTime : BOOLEAN; \n    pos, year, month, day, hour, minute, second : INTEGER;\nBEGIN\n    dt.year := 0;\n    dt.month := 0;\n    dt.day := 0;\n    dt.hour := 0;\n    dt.minute := 0;\n    dt.second := 0;\n    Chars.Clear(tmp);\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    (* Split into Date and Time components *)\n    pos := Strings.Pos(\" \", src, 0);\n    IF pos >= 0 THEN\n        Strings.Extract(src, 0, pos, ds);\n        pos := pos + 1;\n        Strings.Extract(src, pos, Strings.Length(src) - pos, ts);\n    ELSE\n        Chars.Set(src, ds);\n        Chars.Set(src, ts);\n    END;\n    ok := FALSE;\n    IF IsDateString(ds) THEN\n        ok := TRUE;\n        okDate := ParseDate(ds, year, month, day);\n        SetDate(year, month, day, dt);\n        ok := ok & okDate;\n    END;\n    IF IsTimeString(ts) THEN\n        ok := ok OR okDate;\n        okTime := ParseTime(ts, hour, minute, second);\n        SetTime(hour, minute, second, dt);\n        ok := ok & okTime;\n    END;\n    RETURN ok\nEND Parse;\n\nBEGIN\n    Chars.Set(\"January\", Months[0]);\n    Chars.Set(\"February\", Months[1]);\n    Chars.Set(\"March\", Months[2]);\n    Chars.Set(\"April\", Months[3]);\n    Chars.Set(\"May\", Months[4]);\n    Chars.Set(\"June\", Months[5]);\n    Chars.Set(\"July\", Months[6]);\n    Chars.Set(\"August\", Months[7]);\n    Chars.Set(\"September\", Months[8]);\n    Chars.Set(\"October\", Months[9]);\n    Chars.Set(\"November\", Months[10]);\n    Chars.Set(\"December\", Months[11]);\n\n    Chars.Set(\"Sunday\", Days[0]);\n    Chars.Set(\"Monday\", Days[1]);\n    Chars.Set(\"Tuesday\", Days[2]);\n    Chars.Set(\"Wednesday\", Days[3]);\n    Chars.Set(\"Thursday\", Days[4]);\n    Chars.Set(\"Friday\", Days[5]);\n    Chars.Set(\"Saturday\", Days[6]);\n\n    DaysInMonth[0] := 31; (* January *)\n    DaysInMonth[1] := 28; (* February *)\n    DaysInMonth[2] := 31; (* March *)\n    DaysInMonth[3] := 30; (* April *)\n    DaysInMonth[4] := 31; (* May *)\n    DaysInMonth[5] := 30; (* June *)\n    DaysInMonth[6] := 31; (* July *)\n    DaysInMonth[7] := 31; (* August *)\n    DaysInMonth[8] := 30; (* September *)\n    DaysInMonth[9] := 31; (* October *)\n    DaysInMonth[10] := 30; (* November *)\n    DaysInMonth[11] := 31; (* December *)\n\nEND Dates.\n"
      }
    ],
    "type": "root"
  },
  "data": {
    "title": "Dates"
  }
}