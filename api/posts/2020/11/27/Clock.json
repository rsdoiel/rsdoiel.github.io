{
  "content": "\nClock\n=====\n\nThis is a C time library wrapper for getting system time\nto support Dates.Mod. The procedures are read only as\nsetting time is non-standard on many Unix-like systems[^1].\nThe two procedures follow the A2 style procedure signatures\nadjusted for Oberon-07.\n\n\n[^1]: Eric Raymond discusses time functions, http://www.catb.org/esr/time-programming/\n\n\n\nSource code for **Clock.Mod**\n-----------------------------\n\n~~~\nMODULE Clock;\n\nPROCEDURE GetRtcTime*(VAR second, minute, hour, day, month, year : INTEGER);\nBEGIN\nEND GetRtcTime;\n\nPROCEDURE Get*(VAR time, date : INTEGER);\nBEGIN\nEND Get;\n\nEND Clock.\n\n~~~\n\n\nThe C Source generated by OBNC then modified for this module.\n\n~~~\n/*GENERATED BY OBNC 0.16.1*/\n\n#include \".obnc/Clock.h\"\n#include <obnc/OBNC.h>\n#include <time.h>\n\n#define OBERON_SOURCE_FILENAME \"Clock.Mod\"\n\nvoid Clock__GetRtcTime_(OBNC_INTEGER *second_, OBNC_INTEGER *minute_, OBNC_INTEGER *hour_, OBNC_INTEGER *day_, OBNC_INTEGER *month_, OBNC_INTEGER *year_)\n{\n    time_t now;\n    struct tm *time_info;\n    now = time(NULL);\n    time_info = localtime(&now);\n    *second_ = time_info->tm_sec;\n    *minute_ = time_info->tm_min;\n    *hour_ = time_info->tm_hour;\n    *day_ = time_info->tm_mday;\n    *month_ = time_info->tm_mon;\n    *year_ = (time_info->tm_year) + 1900;\n}\n\n\nvoid Clock__Get_(OBNC_INTEGER *time_, OBNC_INTEGER *date_)\n{\n\tOBNC_INTEGER second_, minute_, hour_, day_, month_, year_;\n\n\tClock__GetRtcTime_(&second_, &minute_, &hour_, &day_, &month_, &year_);\n\t(*time_) = ((hour_ * 4096) + (minute_ * 64)) + second_;\n\t(*date_) = ((year_ * 512) + (month_ * 32)) + day_;\n}\n\n\nvoid Clock__Init(void)\n{\n}\n~~~\n",
  "data": {
    "title": "Clock"
  }
}