{
  "content": "\n\nChars\n=====\n\nThis module provides common character oriented tests.\n\nInRange\n: Check to see if a character, c, is in an inclusive range from a lower to upper character.\n\nIsUpper\n: Check to see if a character is upper case\n\nIsLower\n: Check to see if a character is lower case\n\nIsAlpha\n: Check to see if a character is alphabetic, i.e. in the range of \"a\" to \"z\"\nor \"A\" to \"Z\".\n\nIsDigit\n: Check to see if a character is a digit, i.e. in range of \"0\" to \"9\"\n\nIsAlphaNum\n: Check to see if a character is alpha or a digit\n\nIsSpace\n: Check to see if a character is a space, tab, carriage return or line feed\n\nAppendChar\n: Append a single char to the end of an ARRAY OF CHAR adjusting the terminating null character and return TRUE on success or FALSE otherwise.\n\nAppendChars\n: Append an ARRAY OF CHAR to another the destination ARRAY OF CHAR.\n\nEqual\n: Compares two ARRAY OF CHAR and returns TRUE if they match, FALSE otherwise\n\nClear\n: Sets all cells in an ARRAY OF CHAR to 0X.\n\nTrimSpace\n: Trim the leading and trailing space characters from an ARRAY OF CHAR\n\nTrimLeftSpace\n: Trim the leading space characters from an ARRAY OF CHAR\n\nTrimRightSpace\n: Trim the trailing space characters from an ARRAY OF CHAR\n\nStartsWith\n: Checks to see if a prefix ARRAY OF CHAR matches a target ARRAY OF CHAR return TRUE if found, FALSE otherwise\n\nEndsWith\n: Checks to see if a suffix ARRAY OF CHAR matches a target ARRAY OF CHAR return TRUE if found, FALSE otherwise\n\nTrimPrefix\n: Trim a prefix ARRAY OF CHAR from a target ARRAY OF CHAR\n\nTrimSuffix\n: Trim a suffix ARRAY OF CHAR from a target ARRAY OF CHAR\n\n\n\n\nSource code for **Chars.Mod**\n-----------------------------\n\n~~~\nMODULE Chars;\n\nIMPORT Strings;\n\nCONST\n    MAXSTR* = 1024; (* or whatever *)\n    (* byte constants *)\n    LF* = 10;\n    CR* = 13;\n    (* Character constants *)\n    ENDSTR* = 0X;\n    NEWLINE* = 10X;\n    TAB* = 9X;\n    SPACE* = \" \";\n    DASH* = \"-\";\n    CARET* = \"^\";\n    TILDE* = \"~\";\n    QUOTE* = CHR(34);\n\n(* InRange -- given a character to check and an inclusive range of\ncharacters in the ASCII character set. Compare the ordinal values\nfor inclusively. Return TRUE if in range FALSE otherwise. *)\nPROCEDURE InRange* (c, lower, upper : CHAR) : BOOLEAN;\nVAR inrange : BOOLEAN;\nBEGIN\n  IF (ORD(c) >= ORD(lower)) & (ORD(c) <= ORD(upper)) THEN\n    inrange := TRUE;\n  ELSE\n    inrange := FALSE;\n  END;\n  RETURN inrange\nEND InRange;\n\n(* IsUpper return true if the character is an upper case letter *)\nPROCEDURE IsUpper*(c : CHAR) : BOOLEAN;\nVAR isupper : BOOLEAN;\nBEGIN\n    IF InRange(c, \"A\", \"Z\") THEN\n        isupper := TRUE;\n    ELSE\n        isupper := FALSE;\n    END\n    RETURN isupper\nEND IsUpper;\n\n\n(* IsLower return true if the character is a lower case letter *)\nPROCEDURE IsLower*(c : CHAR) : BOOLEAN;\nVAR islower : BOOLEAN;\nBEGIN\n    IF InRange(c, \"a\", \"a\") THEN\n        islower := TRUE;\n    ELSE\n        islower := FALSE;\n    END\n    RETURN islower\nEND IsLower;\n\n(* IsDigit return true if the character in the range of \"0\" to \"9\" *)\nPROCEDURE IsDigit*(c : CHAR) : BOOLEAN;\nVAR isdigit : BOOLEAN;\nBEGIN\n    IF InRange(c, \"0\", \"9\") THEN\n        isdigit := TRUE;\n    ELSE\n        isdigit := FALSE;\n    END;\n    RETURN isdigit\nEND IsDigit;\n\n(* IsAlpha return true is character is either upper or lower case letter *)\nPROCEDURE IsAlpha*(c : CHAR) : BOOLEAN;\nVAR isalpha : BOOLEAN;\nBEGIN\n    IF IsUpper(c) OR IsLower(c) THEN\n        isalpha := TRUE;\n    ELSE\n        isalpha := FALSE;\n    END;\n    RETURN isalpha\nEND IsAlpha;\n\n(* IsAlphaNum return true is IsAlpha or IsDigit *)\nPROCEDURE IsAlphaNum* (c : CHAR) : BOOLEAN;\nVAR isalphanum : BOOLEAN;\nBEGIN\n    IF IsAlpha(c) OR IsDigit(c) THEN\n        isalphanum := TRUE;\n    ELSE\n        isalphanum := FALSE;\n    END;\n    RETURN isalphanum\nEND IsAlphaNum;\n\n(* IsSpace returns TRUE if the char is a space, tab, carriage return or line feed *)\nPROCEDURE IsSpace*(c : CHAR) : BOOLEAN;\nVAR isSpace : BOOLEAN;\nBEGIN\n\tisSpace := FALSE;\n\tIF (c = SPACE) OR (c = TAB) OR (ORD(c) = CR) OR (ORD(c) = LF) THEN\n    \tisSpace := TRUE;\n\tEND;\n\tRETURN isSpace\nEND IsSpace;\n\n(* AppendChar - this copies the char and appends it to\n   the destination. Returns FALSE if append fails. *)\nPROCEDURE AppendChar*(c : CHAR; VAR dest : ARRAY OF CHAR) : BOOLEAN;\nVAR res : BOOLEAN; l : INTEGER;\nBEGIN\n  l := Strings.Length(dest);\n  (* NOTE: we need to account for a trailing 0X to end\n     the string. *)\n  IF l < (LEN(dest) - 1) THEN\n    dest[l] := c;\n    dest[l + 1] := 0X;\n    res := TRUE;\n  ELSE\n    res := FALSE;\n  END;\n  RETURN res\nEND AppendChar;\n\n(* AppendChars - copy the contents of src ARRAY OF CHAR to end of\n   dest ARRAY OF CHAR *)\nPROCEDURE AppendChars*(src : ARRAY OF CHAR; VAR dest : ARRAY OF CHAR);\nVAR i, j : INTEGER;\nBEGIN\n  i := 0;\n  WHILE (i < LEN(dest)) & (dest[i] # 0X) DO\n    i := i + 1;\n  END;\n  j := 0;\n  WHILE (i < LEN(dest)) & (j < Strings.Length(src)) DO\n    dest[i] := src[j];\n    i := i + 1;\n    j := j + 1;\n  END;\n  WHILE i < LEN(dest) DO\n    dest[i] := 0X;\n    i := i + 1;\n  END;\nEND AppendChars;\n\n(* Equal - compares two ARRAY OF CHAR and returns TRUE\nif the characters match up to the end of string, FALSE otherwise. *)\nPROCEDURE Equal*(a : ARRAY OF CHAR; b : ARRAY OF CHAR) : BOOLEAN;\nVAR isSame : BOOLEAN; i : INTEGER;\nBEGIN\n  isSame := (Strings.Length(a) = Strings.Length(b));\n  i := 0;\n  WHILE isSame & (i < Strings.Length(a)) DO\n    IF a[i] # b[i] THEN\n      isSame := FALSE;\n    END;\n    i := i + 1;\n  END;\n  RETURN isSame\nEND Equal;\n\n\n(* StartsWith - check to see of a prefix starts an ARRAY OF CHAR *)\nPROCEDURE StartsWith*(prefix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR) : BOOLEAN;\nVAR startsWith : BOOLEAN; i: INTEGER;\nBEGIN\n    startsWith := FALSE;\n    IF Strings.Length(prefix) <= Strings.Length(src) THEN\n        startsWith := TRUE;\n        i := 0;\n        WHILE (i < Strings.Length(prefix)) & startsWith DO\n            IF prefix[i] # src[i] THEN\n                startsWith := FALSE;\n            END;\n            i := i + 1;\n        END;\n    END;    \n    RETURN startsWith\nEND StartsWith;\n\n(* EndsWith - check to see of a prefix starts an ARRAY OF CHAR *)\nPROCEDURE EndsWith*(suffix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR) : BOOLEAN;\nVAR endsWith : BOOLEAN; i, j : INTEGER;\nBEGIN\n    endsWith := FALSE;\n    IF Strings.Length(suffix) <= Strings.Length(src) THEN\n        endsWith := TRUE;\n        i := 0;\n        j := Strings.Length(src) - Strings.Length(suffix);\n        WHILE (i < Strings.Length(suffix)) & endsWith DO\n            IF suffix[i] # src[j] THEN\n                endsWith := FALSE;\n            END;\n            i := i + 1;\n            j := j + 1;\n        END;\n    END;\n    RETURN endsWith\nEND EndsWith;\n\n\n(* Clear - resets all cells of an ARRAY OF CHAR to 0X *)\nPROCEDURE Clear*(VAR a : ARRAY OF CHAR);\nVAR i : INTEGER;\nBEGIN\n  FOR i := 0 TO (LEN(a) - 1) DO\n    a[i] := 0X;\n  END;\nEND Clear;\n\n(* Shift returns the first character of an ARRAY OF CHAR and shifts the\nremaining elements left appending an extra 0X if necessary *)\nPROCEDURE Shift*(VAR src : ARRAY OF CHAR) : CHAR;\nVAR i, last : INTEGER; c : CHAR;\nBEGIN\n    i := 0;\n    c := src[i];\n    Strings.Delete(src, 0, 1);\n    last := Strings.Length(src) - 1;\n    FOR i := last TO (LEN(src) - 1) DO\n        src[i] := 0X;\n    END;\n    RETURN c\nEND Shift;\n\n(* Pop returns the last non-OX element of an ARRAY OF CHAR replacing\n   it with an OX *)\nPROCEDURE Pop*(VAR src : ARRAY OF CHAR) : CHAR;\nVAR i, last : INTEGER; c : CHAR;\nBEGIN\n\t(* Move to the last non-0X cell *)\n\ti := 0;\n\tlast := LEN(src);\n\tWHILE (i < last) & (src[i] # 0X) DO\n\t   i := i + 1;\n\tEND;\n\tIF i > 0 THEN\n\t\ti := i - 1;\n\tELSE\n\t\ti := 0;\n\tEND;\n\tc := src[i];\n\tWHILE (i < last) DO\n\t\tsrc[i] := 0X;\n\t\ti := i + 1;\n\tEND;\n\tRETURN c\nEND Pop;\n\n(* TrimLeftSpace - remove leading spaces from an ARRAY OF CHAR *)\nPROCEDURE TrimLeftSpace*(VAR src : ARRAY OF CHAR);\nVAR i : INTEGER;\nBEGIN\n    (* find the first non-space or end of the string *)\n    i := 0;\n    WHILE (i < LEN(src)) & IsSpace(src[i]) DO\n        i := i + 1;\n    END;\n    (* Trims the beginning of the string *)\n    IF i > 0 THEN\n        Strings.Delete(src, 0, i);\n    END;\nEND TrimLeftSpace;\n\n(* TrimRightSpace - remove the trailing spaces from an ARRAY OF CHAR *)\nPROCEDURE TrimRightSpace*(VAR src : ARRAY OF CHAR);\nVAR i, l : INTEGER; \nBEGIN\n    (* Find the first 0X, end of string *)\n\tl := Strings.Length(src);\n\ti := l - 1;\n\t(* Find the start of the trailing space sequence *)\n\tWHILE (i > 0) & IsSpace(src[i]) DO\n\t\ti := i - 1;\n\tEND;\n\t(* Delete the trailing spaces *)\n\tStrings.Delete(src, i + 1, l - i);\nEND TrimRightSpace;\n\n(* TrimSpace - remove leading and trailing space CHARS from an ARRAY OF CHAR *)\nPROCEDURE TrimSpace*(VAR src : ARRAY OF CHAR);\nBEGIN\n\tTrimLeftSpace(src);\n\tTrimRightSpace(src);    \nEND TrimSpace;    \n    \n\n(* TrimPrefix - remove a prefix ARRAY OF CHAR from a target ARRAY OF CHAR *)\nPROCEDURE TrimPrefix*(prefix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR);\nVAR l : INTEGER;\nBEGIN\n    IF StartsWith(prefix, src) THEN\n         l := Strings.Length(prefix);\n         Strings.Delete(src, 0, l);\n    END;\nEND TrimPrefix;\n\n(* TrimSuffix - remove a suffix ARRAY OF CHAR from a target ARRAY OF CHAR *)\nPROCEDURE TrimSuffix*(suffix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR);\nVAR i, l : INTEGER;\nBEGIN\n\tIF EndsWith(suffix, src) THEN\n\t\tl := Strings.Length(src) - 1;\n\t\tFOR i := ((l - Strings.Length(suffix)) + 1) TO l DO\n\t\t\tsrc[i] := 0X;\n\t\tEND;\n\tEND;\nEND TrimSuffix;\n\n\nEND Chars.\n\n~~~\n\n\n",
  "content_ast": {
    "children": [
      {
        "children": [
          {
            "type": "text",
            "value": "Chars"
          }
        ],
        "depth": 1,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "This module provides common character oriented tests."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "InRange\n: Check to see if a character, c, is in an inclusive range from a lower to upper character."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsUpper\n: Check to see if a character is upper case"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsLower\n: Check to see if a character is lower case"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsAlpha\n: Check to see if a character is alphabetic, i.e. in the range of \"a\" to \"z\"\nor \"A\" to \"Z\"."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsDigit\n: Check to see if a character is a digit, i.e. in range of \"0\" to \"9\""
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsAlphaNum\n: Check to see if a character is alpha or a digit"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "IsSpace\n: Check to see if a character is a space, tab, carriage return or line feed"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "AppendChar\n: Append a single char to the end of an ARRAY OF CHAR adjusting the terminating null character and return TRUE on success or FALSE otherwise."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "AppendChars\n: Append an ARRAY OF CHAR to another the destination ARRAY OF CHAR."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Equal\n: Compares two ARRAY OF CHAR and returns TRUE if they match, FALSE otherwise"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Clear\n: Sets all cells in an ARRAY OF CHAR to 0X."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "TrimSpace\n: Trim the leading and trailing space characters from an ARRAY OF CHAR"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "TrimLeftSpace\n: Trim the leading space characters from an ARRAY OF CHAR"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "TrimRightSpace\n: Trim the trailing space characters from an ARRAY OF CHAR"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "StartsWith\n: Checks to see if a prefix ARRAY OF CHAR matches a target ARRAY OF CHAR return TRUE if found, FALSE otherwise"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "EndsWith\n: Checks to see if a suffix ARRAY OF CHAR matches a target ARRAY OF CHAR return TRUE if found, FALSE otherwise"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "TrimPrefix\n: Trim a prefix ARRAY OF CHAR from a target ARRAY OF CHAR"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "TrimSuffix\n: Trim a suffix ARRAY OF CHAR from a target ARRAY OF CHAR"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Source code for "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Chars.Mod"
              }
            ],
            "type": "strong"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "type": "code",
        "value": "MODULE Chars;\n\nIMPORT Strings;\n\nCONST\n    MAXSTR* = 1024; (* or whatever *)\n    (* byte constants *)\n    LF* = 10;\n    CR* = 13;\n    (* Character constants *)\n    ENDSTR* = 0X;\n    NEWLINE* = 10X;\n    TAB* = 9X;\n    SPACE* = \" \";\n    DASH* = \"-\";\n    CARET* = \"^\";\n    TILDE* = \"~\";\n    QUOTE* = CHR(34);\n\n(* InRange -- given a character to check and an inclusive range of\ncharacters in the ASCII character set. Compare the ordinal values\nfor inclusively. Return TRUE if in range FALSE otherwise. *)\nPROCEDURE InRange* (c, lower, upper : CHAR) : BOOLEAN;\nVAR inrange : BOOLEAN;\nBEGIN\n  IF (ORD(c) >= ORD(lower)) & (ORD(c) <= ORD(upper)) THEN\n    inrange := TRUE;\n  ELSE\n    inrange := FALSE;\n  END;\n  RETURN inrange\nEND InRange;\n\n(* IsUpper return true if the character is an upper case letter *)\nPROCEDURE IsUpper*(c : CHAR) : BOOLEAN;\nVAR isupper : BOOLEAN;\nBEGIN\n    IF InRange(c, \"A\", \"Z\") THEN\n        isupper := TRUE;\n    ELSE\n        isupper := FALSE;\n    END\n    RETURN isupper\nEND IsUpper;\n\n\n(* IsLower return true if the character is a lower case letter *)\nPROCEDURE IsLower*(c : CHAR) : BOOLEAN;\nVAR islower : BOOLEAN;\nBEGIN\n    IF InRange(c, \"a\", \"a\") THEN\n        islower := TRUE;\n    ELSE\n        islower := FALSE;\n    END\n    RETURN islower\nEND IsLower;\n\n(* IsDigit return true if the character in the range of \"0\" to \"9\" *)\nPROCEDURE IsDigit*(c : CHAR) : BOOLEAN;\nVAR isdigit : BOOLEAN;\nBEGIN\n    IF InRange(c, \"0\", \"9\") THEN\n        isdigit := TRUE;\n    ELSE\n        isdigit := FALSE;\n    END;\n    RETURN isdigit\nEND IsDigit;\n\n(* IsAlpha return true is character is either upper or lower case letter *)\nPROCEDURE IsAlpha*(c : CHAR) : BOOLEAN;\nVAR isalpha : BOOLEAN;\nBEGIN\n    IF IsUpper(c) OR IsLower(c) THEN\n        isalpha := TRUE;\n    ELSE\n        isalpha := FALSE;\n    END;\n    RETURN isalpha\nEND IsAlpha;\n\n(* IsAlphaNum return true is IsAlpha or IsDigit *)\nPROCEDURE IsAlphaNum* (c : CHAR) : BOOLEAN;\nVAR isalphanum : BOOLEAN;\nBEGIN\n    IF IsAlpha(c) OR IsDigit(c) THEN\n        isalphanum := TRUE;\n    ELSE\n        isalphanum := FALSE;\n    END;\n    RETURN isalphanum\nEND IsAlphaNum;\n\n(* IsSpace returns TRUE if the char is a space, tab, carriage return or line feed *)\nPROCEDURE IsSpace*(c : CHAR) : BOOLEAN;\nVAR isSpace : BOOLEAN;\nBEGIN\n\tisSpace := FALSE;\n\tIF (c = SPACE) OR (c = TAB) OR (ORD(c) = CR) OR (ORD(c) = LF) THEN\n    \tisSpace := TRUE;\n\tEND;\n\tRETURN isSpace\nEND IsSpace;\n\n(* AppendChar - this copies the char and appends it to\n   the destination. Returns FALSE if append fails. *)\nPROCEDURE AppendChar*(c : CHAR; VAR dest : ARRAY OF CHAR) : BOOLEAN;\nVAR res : BOOLEAN; l : INTEGER;\nBEGIN\n  l := Strings.Length(dest);\n  (* NOTE: we need to account for a trailing 0X to end\n     the string. *)\n  IF l < (LEN(dest) - 1) THEN\n    dest[l] := c;\n    dest[l + 1] := 0X;\n    res := TRUE;\n  ELSE\n    res := FALSE;\n  END;\n  RETURN res\nEND AppendChar;\n\n(* AppendChars - copy the contents of src ARRAY OF CHAR to end of\n   dest ARRAY OF CHAR *)\nPROCEDURE AppendChars*(src : ARRAY OF CHAR; VAR dest : ARRAY OF CHAR);\nVAR i, j : INTEGER;\nBEGIN\n  i := 0;\n  WHILE (i < LEN(dest)) & (dest[i] # 0X) DO\n    i := i + 1;\n  END;\n  j := 0;\n  WHILE (i < LEN(dest)) & (j < Strings.Length(src)) DO\n    dest[i] := src[j];\n    i := i + 1;\n    j := j + 1;\n  END;\n  WHILE i < LEN(dest) DO\n    dest[i] := 0X;\n    i := i + 1;\n  END;\nEND AppendChars;\n\n(* Equal - compares two ARRAY OF CHAR and returns TRUE\nif the characters match up to the end of string, FALSE otherwise. *)\nPROCEDURE Equal*(a : ARRAY OF CHAR; b : ARRAY OF CHAR) : BOOLEAN;\nVAR isSame : BOOLEAN; i : INTEGER;\nBEGIN\n  isSame := (Strings.Length(a) = Strings.Length(b));\n  i := 0;\n  WHILE isSame & (i < Strings.Length(a)) DO\n    IF a[i] # b[i] THEN\n      isSame := FALSE;\n    END;\n    i := i + 1;\n  END;\n  RETURN isSame\nEND Equal;\n\n\n(* StartsWith - check to see of a prefix starts an ARRAY OF CHAR *)\nPROCEDURE StartsWith*(prefix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR) : BOOLEAN;\nVAR startsWith : BOOLEAN; i: INTEGER;\nBEGIN\n    startsWith := FALSE;\n    IF Strings.Length(prefix) <= Strings.Length(src) THEN\n        startsWith := TRUE;\n        i := 0;\n        WHILE (i < Strings.Length(prefix)) & startsWith DO\n            IF prefix[i] # src[i] THEN\n                startsWith := FALSE;\n            END;\n            i := i + 1;\n        END;\n    END;    \n    RETURN startsWith\nEND StartsWith;\n\n(* EndsWith - check to see of a prefix starts an ARRAY OF CHAR *)\nPROCEDURE EndsWith*(suffix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR) : BOOLEAN;\nVAR endsWith : BOOLEAN; i, j : INTEGER;\nBEGIN\n    endsWith := FALSE;\n    IF Strings.Length(suffix) <= Strings.Length(src) THEN\n        endsWith := TRUE;\n        i := 0;\n        j := Strings.Length(src) - Strings.Length(suffix);\n        WHILE (i < Strings.Length(suffix)) & endsWith DO\n            IF suffix[i] # src[j] THEN\n                endsWith := FALSE;\n            END;\n            i := i + 1;\n            j := j + 1;\n        END;\n    END;\n    RETURN endsWith\nEND EndsWith;\n\n\n(* Clear - resets all cells of an ARRAY OF CHAR to 0X *)\nPROCEDURE Clear*(VAR a : ARRAY OF CHAR);\nVAR i : INTEGER;\nBEGIN\n  FOR i := 0 TO (LEN(a) - 1) DO\n    a[i] := 0X;\n  END;\nEND Clear;\n\n(* Shift returns the first character of an ARRAY OF CHAR and shifts the\nremaining elements left appending an extra 0X if necessary *)\nPROCEDURE Shift*(VAR src : ARRAY OF CHAR) : CHAR;\nVAR i, last : INTEGER; c : CHAR;\nBEGIN\n    i := 0;\n    c := src[i];\n    Strings.Delete(src, 0, 1);\n    last := Strings.Length(src) - 1;\n    FOR i := last TO (LEN(src) - 1) DO\n        src[i] := 0X;\n    END;\n    RETURN c\nEND Shift;\n\n(* Pop returns the last non-OX element of an ARRAY OF CHAR replacing\n   it with an OX *)\nPROCEDURE Pop*(VAR src : ARRAY OF CHAR) : CHAR;\nVAR i, last : INTEGER; c : CHAR;\nBEGIN\n\t(* Move to the last non-0X cell *)\n\ti := 0;\n\tlast := LEN(src);\n\tWHILE (i < last) & (src[i] # 0X) DO\n\t   i := i + 1;\n\tEND;\n\tIF i > 0 THEN\n\t\ti := i - 1;\n\tELSE\n\t\ti := 0;\n\tEND;\n\tc := src[i];\n\tWHILE (i < last) DO\n\t\tsrc[i] := 0X;\n\t\ti := i + 1;\n\tEND;\n\tRETURN c\nEND Pop;\n\n(* TrimLeftSpace - remove leading spaces from an ARRAY OF CHAR *)\nPROCEDURE TrimLeftSpace*(VAR src : ARRAY OF CHAR);\nVAR i : INTEGER;\nBEGIN\n    (* find the first non-space or end of the string *)\n    i := 0;\n    WHILE (i < LEN(src)) & IsSpace(src[i]) DO\n        i := i + 1;\n    END;\n    (* Trims the beginning of the string *)\n    IF i > 0 THEN\n        Strings.Delete(src, 0, i);\n    END;\nEND TrimLeftSpace;\n\n(* TrimRightSpace - remove the trailing spaces from an ARRAY OF CHAR *)\nPROCEDURE TrimRightSpace*(VAR src : ARRAY OF CHAR);\nVAR i, l : INTEGER; \nBEGIN\n    (* Find the first 0X, end of string *)\n\tl := Strings.Length(src);\n\ti := l - 1;\n\t(* Find the start of the trailing space sequence *)\n\tWHILE (i > 0) & IsSpace(src[i]) DO\n\t\ti := i - 1;\n\tEND;\n\t(* Delete the trailing spaces *)\n\tStrings.Delete(src, i + 1, l - i);\nEND TrimRightSpace;\n\n(* TrimSpace - remove leading and trailing space CHARS from an ARRAY OF CHAR *)\nPROCEDURE TrimSpace*(VAR src : ARRAY OF CHAR);\nBEGIN\n\tTrimLeftSpace(src);\n\tTrimRightSpace(src);    \nEND TrimSpace;    \n    \n\n(* TrimPrefix - remove a prefix ARRAY OF CHAR from a target ARRAY OF CHAR *)\nPROCEDURE TrimPrefix*(prefix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR);\nVAR l : INTEGER;\nBEGIN\n    IF StartsWith(prefix, src) THEN\n         l := Strings.Length(prefix);\n         Strings.Delete(src, 0, l);\n    END;\nEND TrimPrefix;\n\n(* TrimSuffix - remove a suffix ARRAY OF CHAR from a target ARRAY OF CHAR *)\nPROCEDURE TrimSuffix*(suffix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR);\nVAR i, l : INTEGER;\nBEGIN\n\tIF EndsWith(suffix, src) THEN\n\t\tl := Strings.Length(src) - 1;\n\t\tFOR i := ((l - Strings.Length(suffix)) + 1) TO l DO\n\t\t\tsrc[i] := 0X;\n\t\tEND;\n\tEND;\nEND TrimSuffix;\n\n\nEND Chars.\n"
      }
    ],
    "type": "root"
  },
  "data": {
    "title": "Chars"
  }
}