{
  "content": "\n\nPandoc & Metadata \n=================\n\nPandoc supports three ways of providing metadata to its template\nengine. \n\n1. Front matter\n2. Command line optional metadata\n3. A JSON metadata file.\n\nFront matter\n------------\n\nFront matter is a community term that comes from physical world\nof paper books and articles.  It is the information that comes \nbefore the primary content.  This information might be things \nlike title, author, publisher and publication date. These days \nit'll also include things like identifiers like ISSN, ISBN possibly \nnewer identifiers like DOI or ORCID. In the library and programming\ncommunity we refer to this type of structured information as\nmetadata.  Data about the publication or article.\n\nMany publication systems like TeX/LaTeX support provided means of \nincorporating metadata into the document.  When simple markup formats \nlike Markdown, Textile and Asciidoc became popular the practice was \ncontinued by including the metadata in some sort of structured encoding\nat the beginning of the document. The community adopted the term from\nthe print world, \"front matter\". \n\nPandoc provides for several ways of working with metadata and supports\none format of front matter encoding called [YAML](https://yaml.org/). \nOther markup processors support other encoding of front matter. Two\npopular alternatives of encoding are [TOML](https://toml.io/en/) and \n[JSON](https://json.org).  If you use one of the alternative encoding\nfor your front matter then you'll need to split the front matter\nout of your document before processing with Pandoc[^1].  \n\n[^1]: The [MkPage Project](https://caltechlibrary.github.io/mkpage/) provides a tool called [frontmatter](https://caltechlibrary.github.io/mkpage/docs/frontmatter/) that can be easy or your can easily roll your own in Python or other favorite language.\n\n\nIf you provide YAML formatted front matter Pandoc will pass this\nmetadata on and make it available to it's template engine and the\ntemplates you create to render content with Pandoc. See the Pandoc\nUser Guide section [YAML metadata blocks](https://pandoc.org/MANUAL.html#extension-yaml_metadata_block) for more details. If you've used another\nencoding of front matter then the metadata file approach is probably\nthe ticket.\n\nMetadata passed by command line\n-------------------------------\n\nIf you only have a metadata elements you would like to\nmake available to the template (e.g. title, pub date) you\ncan easily add them using the `--metadata` command line option.\nThis is documented in the Pandoc User Guide under the heading\n[Reader Options](https://pandoc.org/MANUAL.html). Here's a simple\nexample where we have a title, \"U. S. Constitution\" and a\npublication date of \"September 28, 1787\".\n\n~~~{.shell}\n    pandoc --metadata \\\n        title=\"U. S. Constitution\" \\\n        pubdate=\"September 28, 1787\" \\\n        --from markdown --to html --template doc1.tmpl \\\n        constitution.txt\n~~~\n\nThe template now has two additional values available as metadata\nin addition to `body`, namely `pubdate` and `title`. Here's an\nexample template [doc1.tmpl](doc1.tmpl).\n\n~~~\n\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>${title}</title>\n   </head>\n   <body>\n      <h1>${title}</h1>\n      <h2>${pubdate}</h2>\n      <p>\n      ${body}\n      <p>\n   </body>\n   </html>\n\n~~~\n\nMore complex metadata is better suited to creating a JSON document\nwith the structure you need to render your template.\n\n\nMetadata file\n-------------\n\nMetadata files can be included with the option `--metadata-file`. This\nlike the `--metadata` option are discussed in the Pandoc User Guide under\nthe [Read Options(https://pandoc.org/MANUAL.html) heading.  The JSON \ndocument should contain an Object where each attribute corresponds to\nthe variable you wish to referenced in template.  Pandoc's template\nengine support both single values but also objects and arrays. In this\nway you can structure the elements you wish to include even elements\nwhich are iterative (e.g. a list of links or topics). Below is a\nJSON data structure that includes the page title as well as links\nfor the navigation.  The nav attribute holds a list of objects \nwith attributes of href and label containing data that will be used\nto render a list of anchor elements in the template.\n\n\n~~~{.json}\n\n    {\n        \"title\": \"U. S. Constitution\",\n        \"pubdate\": \"September 28, 1787\",\n        \"nav\": [\n            {\"label\": \"Pandoc Metadata\", \"href\": \"Pandoc-Metadata.html\" },\n            {\"label\": \"Magnacarta\", \"href\": \"magnacarta.html\" },\n            {\"label\": \"Declaration of Independence\", \"href\": \"independence.html\" },\n            {\"label\": \"U. S. Constitution\", \"href\": \"constitution.html\"}\n        ]\n    }\n\n~~~\n\nHere's a revised template to include the navigation,\nsee [doc2.tmpl](doc2.tmpl).\n\n~~~\n\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>${title}</title>\n   </head>\n   <body>\n      <nav>\n      ${for(nav)}<a href=\"${nav.href}\">${nav.label}</a>${sep}, ${endfor}\n      </nav>\n      <h1>${title}</h1>\n      ${if(pubdate)}<h2>${pubdate}</h2>${endif}\n      <p>\n      ${body}\n      <p>\n   </body>\n   </html>\n\n~~~\n\n\nCombining Techniques\n--------------------\n\nIt is worth noting that these approaches can be mixed and matched.\nIn the following example I use the same [metadata.json](metadata.json)\nfile which has title and pubdate attributes but override them\nusing the command line `--metadata` option. In this way I can use that \nfile along with [doc2.tmpl](doc2.tmpl) and render each \nTo render the constitution page from a Markdown version of the \nU. S. Constitution you could use the following Pandoc command:\n\n~~~{.shell}\n\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"Magna Carta\" \\\n\t\t--metadata pubdate=\"1215\" \\\n\t\t-o magnacarta.html \\\n\t\tmagnacarta.txt\n\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"The Declaration of Indepenence\" \\\n\t\t--metadata pubdate=\"July 4, 1776\" \\\n        -o independence.html \\\n        independence.txt\n\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"U. S. Constitution\" \\\n\t\t--metadata pubdate=\"September 28, 1787\" \\\n        -o constitution.html \\\n        constitution.txt\n\n~~~\n\nSee [Magna Carta](magnacarta.html), [The Declaration of Independence](independence.html), [U. S. Constitution](constitution.html)\n\n\n",
  "content_ast": {
    "children": [
      {
        "children": [
          {
            "type": "text",
            "value": "Pandoc & Metadata"
          }
        ],
        "depth": 1,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Pandoc supports three ways of providing metadata to its template\nengine."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Front matter"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Command line optional metadata"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "A JSON metadata file."
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": true,
        "spread": false,
        "start": 1,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Front matter"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Front matter is a community term that comes from physical world\nof paper books and articles.  It is the information that comes\nbefore the primary content.  This information might be things\nlike title, author, publisher and publication date. These days\nit'll also include things like identifiers like ISSN, ISBN possibly\nnewer identifiers like DOI or ORCID. In the library and programming\ncommunity we refer to this type of structured information as\nmetadata.  Data about the publication or article."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Many publication systems like TeX/LaTeX support provided means of\nincorporating metadata into the document.  When simple markup formats\nlike Markdown, Textile and Asciidoc became popular the practice was\ncontinued by including the metadata in some sort of structured encoding\nat the beginning of the document. The community adopted the term from\nthe print world, \"front matter\"."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Pandoc provides for several ways of working with metadata and supports\none format of front matter encoding called "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "YAML"
              }
            ],
            "type": "link",
            "url": "https://yaml.org/"
          },
          {
            "type": "text",
            "value": ".\nOther markup processors support other encoding of front matter. Two\npopular alternatives of encoding are "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "TOML"
              }
            ],
            "type": "link",
            "url": "https://toml.io/en/"
          },
          {
            "type": "text",
            "value": " and\n"
          },
          {
            "children": [
              {
                "type": "text",
                "value": "JSON"
              }
            ],
            "type": "link",
            "url": "https://json.org"
          },
          {
            "type": "text",
            "value": ".  If you use one of the alternative encoding\nfor your front matter then you'll need to split the front matter\nout of your document before processing with Pandoc[^1]."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^1]: The "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "MkPage Project"
              }
            ],
            "type": "link",
            "url": "https://caltechlibrary.github.io/mkpage/"
          },
          {
            "type": "text",
            "value": " provides a tool called "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "frontmatter"
              }
            ],
            "type": "link",
            "url": "https://caltechlibrary.github.io/mkpage/docs/frontmatter/"
          },
          {
            "type": "text",
            "value": " that can be easy or your can easily roll your own in Python or other favorite language."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "If you provide YAML formatted front matter Pandoc will pass this\nmetadata on and make it available to it's template engine and the\ntemplates you create to render content with Pandoc. See the Pandoc\nUser Guide section "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "YAML metadata blocks"
              }
            ],
            "type": "link",
            "url": "https://pandoc.org/MANUAL.html#extension-yaml_metadata_block"
          },
          {
            "type": "text",
            "value": " for more details. If you've used another\nencoding of front matter then the metadata file approach is probably\nthe ticket."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Metadata passed by command line"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "If you only have a metadata elements you would like to\nmake available to the template (e.g. title, pub date) you\ncan easily add them using the "
          },
          {
            "type": "inlineCode",
            "value": "--metadata"
          },
          {
            "type": "text",
            "value": " command line option.\nThis is documented in the Pandoc User Guide under the heading\n"
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Reader Options"
              }
            ],
            "type": "link",
            "url": "https://pandoc.org/MANUAL.html"
          },
          {
            "type": "text",
            "value": ". Here's a simple\nexample where we have a title, \"U. S. Constitution\" and a\npublication date of \"September 28, 1787\"."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.shell}",
        "type": "code",
        "value": "    pandoc --metadata \\\n        title=\"U. S. Constitution\" \\\n        pubdate=\"September 28, 1787\" \\\n        --from markdown --to html --template doc1.tmpl \\\n        constitution.txt"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The template now has two additional values available as metadata\nin addition to "
          },
          {
            "type": "inlineCode",
            "value": "body"
          },
          {
            "type": "text",
            "value": ", namely "
          },
          {
            "type": "inlineCode",
            "value": "pubdate"
          },
          {
            "type": "text",
            "value": " and "
          },
          {
            "type": "inlineCode",
            "value": "title"
          },
          {
            "type": "text",
            "value": ". Here's an\nexample template "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "doc1.tmpl"
              }
            ],
            "type": "link",
            "url": "doc1.tmpl"
          },
          {
            "type": "text",
            "value": "."
          }
        ],
        "type": "paragraph"
      },
      {
        "type": "code",
        "value": "\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>${title}</title>\n   </head>\n   <body>\n      <h1>${title}</h1>\n      <h2>${pubdate}</h2>\n      <p>\n      ${body}\n      <p>\n   </body>\n   </html>\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "More complex metadata is better suited to creating a JSON document\nwith the structure you need to render your template."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Metadata file"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Metadata files can be included with the option "
          },
          {
            "type": "inlineCode",
            "value": "--metadata-file"
          },
          {
            "type": "text",
            "value": ". This\nlike the "
          },
          {
            "type": "inlineCode",
            "value": "--metadata"
          },
          {
            "type": "text",
            "value": " option are discussed in the Pandoc User Guide under\nthe [Read Options(https://pandoc.org/MANUAL.html) heading.  The JSON\ndocument should contain an Object where each attribute corresponds to\nthe variable you wish to referenced in template.  Pandoc's template\nengine support both single values but also objects and arrays. In this\nway you can structure the elements you wish to include even elements\nwhich are iterative (e.g. a list of links or topics). Below is a\nJSON data structure that includes the page title as well as links\nfor the navigation.  The nav attribute holds a list of objects\nwith attributes of href and label containing data that will be used\nto render a list of anchor elements in the template."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.json}",
        "type": "code",
        "value": "\n    {\n        \"title\": \"U. S. Constitution\",\n        \"pubdate\": \"September 28, 1787\",\n        \"nav\": [\n            {\"label\": \"Pandoc Metadata\", \"href\": \"Pandoc-Metadata.html\" },\n            {\"label\": \"Magnacarta\", \"href\": \"magnacarta.html\" },\n            {\"label\": \"Declaration of Independence\", \"href\": \"independence.html\" },\n            {\"label\": \"U. S. Constitution\", \"href\": \"constitution.html\"}\n        ]\n    }\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Here's a revised template to include the navigation,\nsee "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "doc2.tmpl"
              }
            ],
            "type": "link",
            "url": "doc2.tmpl"
          },
          {
            "type": "text",
            "value": "."
          }
        ],
        "type": "paragraph"
      },
      {
        "type": "code",
        "value": "\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>${title}</title>\n   </head>\n   <body>\n      <nav>\n      ${for(nav)}<a href=\"${nav.href}\">${nav.label}</a>${sep}, ${endfor}\n      </nav>\n      <h1>${title}</h1>\n      ${if(pubdate)}<h2>${pubdate}</h2>${endif}\n      <p>\n      ${body}\n      <p>\n   </body>\n   </html>\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Combining Techniques"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "It is worth noting that these approaches can be mixed and matched.\nIn the following example I use the same "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "metadata.json"
              }
            ],
            "type": "link",
            "url": "metadata.json"
          },
          {
            "type": "text",
            "value": "\nfile which has title and pubdate attributes but override them\nusing the command line "
          },
          {
            "type": "inlineCode",
            "value": "--metadata"
          },
          {
            "type": "text",
            "value": " option. In this way I can use that\nfile along with "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "doc2.tmpl"
              }
            ],
            "type": "link",
            "url": "doc2.tmpl"
          },
          {
            "type": "text",
            "value": " and render each\nTo render the constitution page from a Markdown version of the\nU. S. Constitution you could use the following Pandoc command:"
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.shell}",
        "type": "code",
        "value": "\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"Magna Carta\" \\\n\t\t--metadata pubdate=\"1215\" \\\n\t\t-o magnacarta.html \\\n\t\tmagnacarta.txt\n\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"The Declaration of Indepenence\" \\\n\t\t--metadata pubdate=\"July 4, 1776\" \\\n        -o independence.html \\\n        independence.txt\n\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"U. S. Constitution\" \\\n\t\t--metadata pubdate=\"September 28, 1787\" \\\n        -o constitution.html \\\n        constitution.txt\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "See "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Magna Carta"
              }
            ],
            "type": "link",
            "url": "magnacarta.html"
          },
          {
            "type": "text",
            "value": ", "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "The Declaration of Independence"
              }
            ],
            "type": "link",
            "url": "independence.html"
          },
          {
            "type": "text",
            "value": ", "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "U. S. Constitution"
              }
            ],
            "type": "link",
            "url": "constitution.html"
          }
        ],
        "type": "paragraph"
      }
    ],
    "type": "root"
  },
  "data": {
    "author": "rsdoiel@gmail.com (R. S. Doiel)",
    "copyright": "copyright (c) 2020, R. S. Doiel",
    "keywords": [
      "Pandoc",
      "Metadata",
      "Templates"
    ],
    "license": "https://creativecommons.org/licenses/by-sa/4.0/",
    "number": 2,
    "series": "Pandoc Techniques",
    "title": "Pandoc & Metadata"
  }
}