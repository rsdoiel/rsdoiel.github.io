{
  "content": "\n\n# Combining Oberon-07 and C with OBNC\n\nBy R. S. Doiel, 2020-05-01\n\nThis is the fifth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html)\nseries. Mostly Oberon documents my exploration of the Oberon\nLanguage, Oberon System and the various rabbit holes I will\ninevitably fall into.\n\nIn my day job I write allot of code in Go and\norchestration code in Python.  It's nice having\nthe convenience of combining code written one\nlanguage with an another.  You can do the same\nwith [OBNC](https://miasap.se/obnc/).  The OBNC\ncompiler supports inclusion of C code in a\nstraight forward manner. In fact Karl's compiler\nwill generate the C file for you!\n\nIn learning how to combine C code and Oberon-07\nI started by reviewing Karl's [manual page](https://miasap.se/obnc/man/obnc.txt).\nThe bottom part of that manual page describes\nthe steps I will repeat below. The description\nsounds more complicated but when you walk through\nthe steps it turns out to be pretty easy.\n\n## Basic Process\n\nCreating a C extension for use with OBNC is very\nstraight forward.\n\n1. Create a Oberon module with empty exported procedures\n2. Create a Oberon test module that uses your module\n3. Compile your test module with OBNC\n4. Copy the generated module `.c` file to the same directory as your Oberon module source\n5. Edit the skeleton `.c`,  re-compile and test\n\nFive steps may sound complicated but in practice is\nstraight forward.\n\n## Fmt, an example\n\nIn my demonstration of Karl's instructions I will be\ncreating a module named `Fmt` that includes two\nprocedures `Int()` and `Real()` that let you use\na C-style format string to format an INTEGER\nor REAL as an ARRAY OF CHAR. We retain the idiomatic\nway Oberon works with types but allow a little more\nflexibility in how the numbers are converted and\nrendered as strings.\n\n### Step 1\n\nCreate [Fmt.Mod](Fmt.Mod) defining two exported procedures\n`Int*()` and `Real*()`. The procedures body should be\nempty. Karl's practice is to use exported comments to\nexplain the procedures.\n\n\n~~~ {.oberon}\n\n    MODULE Fmt;\n\n    \tPROCEDURE Int*(value : INTEGER; fmt: ARRAY OF CHAR;\n                       VAR dest : ARRAY OF CHAR);\n    \tEND Int;\n\n    \tPROCEDURE Real*(value : REAL; fmt: ARRAY OF CHAR;\n                        VAR dest : ARRAY OF CHAR);\n    \tEND Real;\n\n    BEGIN\n    END Fmt.\n\n~~~\n\n\n### Step 2\n\nCreate a test module, [FmtTest.Mod](FmtTest.Mod), for\n[Fmt.Mod](Fmt.Mod).\n\n\n~~~ {.oberon}\n\n    MODULE FmtTest;\n      IMPORT Out, Fmt;\n\n    PROCEDURE TestInt(): BOOLEAN;\n      VAR\n        fmtString : ARRAY 24 OF CHAR;\n        dest : ARRAY 128 OF CHAR;\n        i : INTEGER;\n    BEGIN\n        i := 42;\n        fmtString := \"%d\";\n        Fmt.Int(i, fmtString, dest);\n        Out.String(dest);Out.Ln;\n        RETURN TRUE\n    END TestInt;\n\n    PROCEDURE TestReal(): BOOLEAN;\n      VAR\n        fmtString : ARRAY 24 OF CHAR;\n        dest : ARRAY 128 OF CHAR;\n        r : REAL;\n    BEGIN\n        r := 3.145;\n        fmtString := \"%d\";\n        Fmt.Real(r, fmtString, dest);\n        Out.String(dest);Out.Ln;\n        RETURN TRUE\n    END TestReal;\n\n    BEGIN\n      ASSERT(TestInt());\n      ASSERT(TestReal());\n      Out.String(\"Success!\");Out.Ln;\n    END FmtTest.\n\n~~~\n\n\n### Step 3\n\nGenerate a new [Fmt.c](Fmt.c) by using the\nOBNC compiler.\n\n\n~~~ {.shell}\n\n    obnc FmtTest.Mod\n    mv .obnc/Fmt.c ./\n\n~~~\n\n\nthe file `.obnc/Fmt.c` is your C template file. Copy it\nto the directory where Fmt.Mod is.\n\n### Step 4\n\nUpdate the skeleton `Fmt.c` with the necessary C code.\nHere's what OBNC generated version.\n\n\n~~~ {.c}\n\n    /*GENERATED BY OBNC 0.16.1*/\n\n    #include \"Fmt.h\"\n    #include <obnc/OBNC.h>\n\n    #define OBERON_SOURCE_FILENAME \"Fmt.Mod\"\n\n    void Fmt__Int_(OBNC_INTEGER value_, const char fmt_[], \n                   OBNC_INTEGER fmt_len, char dest_[], \n                   OBNC_INTEGER dest_len)\n    {\n    }\n\n\n    void Fmt__Real_(OBNC_REAL value_, const char fmt_[],\n                    OBNC_INTEGER fmt_len, char dest_[],\n                    OBNC_INTEGER dest_len)\n    {\n    }\n\n\n    void Fmt__Init(void)\n    {\n    }\n\n~~~\n\n\nHere's the skeleton revised with do what we need to be done.\n\n\n~~~ {.c}\n\n    #include \".obnc/Fmt.h\"\n    #include <obnc/OBNC.h>\n    #include <stdio.h>\n\n    #define OBERON_SOURCE_FILENAME \"Fmt.Mod\"\n\n    void Fmt__Int_(OBNC_INTEGER value_, \n                   const char fmt_[], OBNC_INTEGER fmt_len,\n                   char dest_[], OBNC_INTEGER dest_len)\n    {\n        sprintf(dest_, fmt_, value_);\n    }\n\n\n    void Fmt__Real_(OBNC_REAL value_, const char fmt_[],\n                    OBNC_INTEGER fmt_len, char dest_[],\n                    OBNC_INTEGER dest_len)\n    {\n        sprintf(dest_, fmt_, value_);\n    }\n\n\n    void Fmt__Init(void)\n    {\n    }\n\n~~~\n\n\nNOTE: You need to change the path for the `Fmt.h` file reference.\nI also add the `stdio.h` include so I have access to the C\nfunction I wish to use. Also notice how OBNC the signature\nfor the functions use the `_` character to identify mapped values\nas well as the char arrays being provided with a length parameter.\nIf you are doing more extensive string work you'll want to take\nadvantage of these additional parameters so insure that the\nas strings are terminated properly for Oberon's reuse.\n\n\n### Step 5\n\nRecompile and test.\n\n\n~~~ {.shell}\n\n    obnc FmtTest.Mod\n    ./FmtTest\n\n~~~\n\n\n### Next and Previous\n\n+ Next [Compiling OBNC on macOS](../06/Compiling-OBNC-on-macOS.html)\n+ Previously [Oberon Loops and Conditions](../../04/19/Mostly-Oberon-Loops-and-Conditions.html)\n\n\n",
  "content_ast": {
    "children": [
      {
        "children": [
          {
            "type": "text",
            "value": "Combining Oberon-07 and C with OBNC"
          }
        ],
        "depth": 1,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "By R. S. Doiel, 2020-05-01"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "This is the fifth post in the "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Mostly Oberon"
              }
            ],
            "type": "link",
            "url": "../../04/11/Mostly-Oberon.html"
          },
          {
            "type": "text",
            "value": "\nseries. Mostly Oberon documents my exploration of the Oberon\nLanguage, Oberon System and the various rabbit holes I will\ninevitably fall into."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "In my day job I write allot of code in Go and\norchestration code in Python.  It's nice having\nthe convenience of combining code written one\nlanguage with an another.  You can do the same\nwith "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "OBNC"
              }
            ],
            "type": "link",
            "url": "https://miasap.se/obnc/"
          },
          {
            "type": "text",
            "value": ".  The OBNC\ncompiler supports inclusion of C code in a\nstraight forward manner. In fact Karl's compiler\nwill generate the C file for you!"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "In learning how to combine C code and Oberon-07\nI started by reviewing Karl's "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "manual page"
              }
            ],
            "type": "link",
            "url": "https://miasap.se/obnc/man/obnc.txt"
          },
          {
            "type": "text",
            "value": ".\nThe bottom part of that manual page describes\nthe steps I will repeat below. The description\nsounds more complicated but when you walk through\nthe steps it turns out to be pretty easy."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Basic Process"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Creating a C extension for use with OBNC is very\nstraight forward."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Create a Oberon module with empty exported procedures"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Create a Oberon test module that uses your module"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Compile your test module with OBNC"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Copy the generated module "
                  },
                  {
                    "type": "inlineCode",
                    "value": ".c"
                  },
                  {
                    "type": "text",
                    "value": " file to the same directory as your Oberon module source"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Edit the skeleton "
                  },
                  {
                    "type": "inlineCode",
                    "value": ".c"
                  },
                  {
                    "type": "text",
                    "value": ",  re-compile and test"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": true,
        "spread": false,
        "start": 1,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Five steps may sound complicated but in practice is\nstraight forward."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Fmt, an example"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "In my demonstration of Karl's instructions I will be\ncreating a module named "
          },
          {
            "type": "inlineCode",
            "value": "Fmt"
          },
          {
            "type": "text",
            "value": " that includes two\nprocedures "
          },
          {
            "type": "inlineCode",
            "value": "Int()"
          },
          {
            "type": "text",
            "value": " and "
          },
          {
            "type": "inlineCode",
            "value": "Real()"
          },
          {
            "type": "text",
            "value": " that let you use\na C-style format string to format an INTEGER\nor REAL as an ARRAY OF CHAR. We retain the idiomatic\nway Oberon works with types but allow a little more\nflexibility in how the numbers are converted and\nrendered as strings."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Step 1"
          }
        ],
        "depth": 3,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Create "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Fmt.Mod"
              }
            ],
            "type": "link",
            "url": "Fmt.Mod"
          },
          {
            "type": "text",
            "value": " defining two exported procedures\n"
          },
          {
            "type": "inlineCode",
            "value": "Int*()"
          },
          {
            "type": "text",
            "value": " and "
          },
          {
            "type": "inlineCode",
            "value": "Real*()"
          },
          {
            "type": "text",
            "value": ". The procedures body should be\nempty. Karl's practice is to use exported comments to\nexplain the procedures."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.oberon}",
        "type": "code",
        "value": "\n    MODULE Fmt;\n\n    \tPROCEDURE Int*(value : INTEGER; fmt: ARRAY OF CHAR;\n                       VAR dest : ARRAY OF CHAR);\n    \tEND Int;\n\n    \tPROCEDURE Real*(value : REAL; fmt: ARRAY OF CHAR;\n                        VAR dest : ARRAY OF CHAR);\n    \tEND Real;\n\n    BEGIN\n    END Fmt.\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Step 2"
          }
        ],
        "depth": 3,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Create a test module, "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "FmtTest.Mod"
              }
            ],
            "type": "link",
            "url": "FmtTest.Mod"
          },
          {
            "type": "text",
            "value": ", for\n"
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Fmt.Mod"
              }
            ],
            "type": "link",
            "url": "Fmt.Mod"
          },
          {
            "type": "text",
            "value": "."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.oberon}",
        "type": "code",
        "value": "\n    MODULE FmtTest;\n      IMPORT Out, Fmt;\n\n    PROCEDURE TestInt(): BOOLEAN;\n      VAR\n        fmtString : ARRAY 24 OF CHAR;\n        dest : ARRAY 128 OF CHAR;\n        i : INTEGER;\n    BEGIN\n        i := 42;\n        fmtString := \"%d\";\n        Fmt.Int(i, fmtString, dest);\n        Out.String(dest);Out.Ln;\n        RETURN TRUE\n    END TestInt;\n\n    PROCEDURE TestReal(): BOOLEAN;\n      VAR\n        fmtString : ARRAY 24 OF CHAR;\n        dest : ARRAY 128 OF CHAR;\n        r : REAL;\n    BEGIN\n        r := 3.145;\n        fmtString := \"%d\";\n        Fmt.Real(r, fmtString, dest);\n        Out.String(dest);Out.Ln;\n        RETURN TRUE\n    END TestReal;\n\n    BEGIN\n      ASSERT(TestInt());\n      ASSERT(TestReal());\n      Out.String(\"Success!\");Out.Ln;\n    END FmtTest.\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Step 3"
          }
        ],
        "depth": 3,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Generate a new "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Fmt.c"
              }
            ],
            "type": "link",
            "url": "Fmt.c"
          },
          {
            "type": "text",
            "value": " by using the\nOBNC compiler."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.shell}",
        "type": "code",
        "value": "\n    obnc FmtTest.Mod\n    mv .obnc/Fmt.c ./\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "the file "
          },
          {
            "type": "inlineCode",
            "value": ".obnc/Fmt.c"
          },
          {
            "type": "text",
            "value": " is your C template file. Copy it\nto the directory where Fmt.Mod is."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Step 4"
          }
        ],
        "depth": 3,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Update the skeleton "
          },
          {
            "type": "inlineCode",
            "value": "Fmt.c"
          },
          {
            "type": "text",
            "value": " with the necessary C code.\nHere's what OBNC generated version."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.c}",
        "type": "code",
        "value": "\n    /*GENERATED BY OBNC 0.16.1*/\n\n    #include \"Fmt.h\"\n    #include <obnc/OBNC.h>\n\n    #define OBERON_SOURCE_FILENAME \"Fmt.Mod\"\n\n    void Fmt__Int_(OBNC_INTEGER value_, const char fmt_[], \n                   OBNC_INTEGER fmt_len, char dest_[], \n                   OBNC_INTEGER dest_len)\n    {\n    }\n\n\n    void Fmt__Real_(OBNC_REAL value_, const char fmt_[],\n                    OBNC_INTEGER fmt_len, char dest_[],\n                    OBNC_INTEGER dest_len)\n    {\n    }\n\n\n    void Fmt__Init(void)\n    {\n    }\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Here's the skeleton revised with do what we need to be done."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.c}",
        "type": "code",
        "value": "\n    #include \".obnc/Fmt.h\"\n    #include <obnc/OBNC.h>\n    #include <stdio.h>\n\n    #define OBERON_SOURCE_FILENAME \"Fmt.Mod\"\n\n    void Fmt__Int_(OBNC_INTEGER value_, \n                   const char fmt_[], OBNC_INTEGER fmt_len,\n                   char dest_[], OBNC_INTEGER dest_len)\n    {\n        sprintf(dest_, fmt_, value_);\n    }\n\n\n    void Fmt__Real_(OBNC_REAL value_, const char fmt_[],\n                    OBNC_INTEGER fmt_len, char dest_[],\n                    OBNC_INTEGER dest_len)\n    {\n        sprintf(dest_, fmt_, value_);\n    }\n\n\n    void Fmt__Init(void)\n    {\n    }\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "NOTE: You need to change the path for the "
          },
          {
            "type": "inlineCode",
            "value": "Fmt.h"
          },
          {
            "type": "text",
            "value": " file reference.\nI also add the "
          },
          {
            "type": "inlineCode",
            "value": "stdio.h"
          },
          {
            "type": "text",
            "value": " include so I have access to the C\nfunction I wish to use. Also notice how OBNC the signature\nfor the functions use the "
          },
          {
            "type": "inlineCode",
            "value": "_"
          },
          {
            "type": "text",
            "value": " character to identify mapped values\nas well as the char arrays being provided with a length parameter.\nIf you are doing more extensive string work you'll want to take\nadvantage of these additional parameters so insure that the\nas strings are terminated properly for Oberon's reuse."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Step 5"
          }
        ],
        "depth": 3,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Recompile and test."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "{.shell}",
        "type": "code",
        "value": "\n    obnc FmtTest.Mod\n    ./FmtTest\n"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Next and Previous"
          }
        ],
        "depth": 3,
        "type": "heading"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Next "
                  },
                  {
                    "children": [
                      {
                        "type": "text",
                        "value": "Compiling OBNC on macOS"
                      }
                    ],
                    "type": "link",
                    "url": "../06/Compiling-OBNC-on-macOS.html"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Previously "
                  },
                  {
                    "children": [
                      {
                        "type": "text",
                        "value": "Oberon Loops and Conditions"
                      }
                    ],
                    "type": "link",
                    "url": "../../04/19/Mostly-Oberon-Loops-and-Conditions.html"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": true,
            "type": "listItem"
          }
        ],
        "ordered": false,
        "spread": false,
        "type": "list"
      }
    ],
    "type": "root"
  },
  "data": {
    "author": "rsdoiel@gmail.com (R. S. Doiel)",
    "copyright": "copyright (c) 2020, R. S. Doiel",
    "date": "2020-05-01",
    "keywords": [
      "Oberon",
      "programming"
    ],
    "license": "https://creativecommons.org/licenses/by-sa/4.0/",
    "number": 5,
    "series": "Mostly Oberon",
    "title": "Combining Oberon-07 and C with OBNC"
  }
}