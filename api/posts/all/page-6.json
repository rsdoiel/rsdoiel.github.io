{
  "page": 6,
  "total_pages": 6,
  "has_more": false,
  "next_page": null,
  "values": [
    {
      "content": "\n\nFrom Markdown and Bash to mkpage\n================================\n\nBy R. S. Doiel 2016-08-16\n\nWhen I started maintaining a website on GitHub a few years ago my needs\nwere so simple I hand coded the HTML.  Eventually I adopted \na markdown processor for maintaining the prose. My \"theme\" was a\nCSS file and some HTML fragments to wrap the markdown output. If I needed \ninteractivity I used JavaScript to access content via a web API. \nLife was simple, all I had to learn to get started was Git and how to\npopulate a branch called \"gh-pages\".\n\n\n## Deconstructing Content Management Systems\n\nRecently my website needs have grown. I started experimenting with static\nsite generators thinking an existing system would be the right fit. \nWhat I found were feature rich systems that varied primarily in \nimplementation language and template engine. Even though I wasn't\nrequired to run Apache, MySQL and PHP/Perl/Python/Ruby/Tomcat it felt \nlike the static site generators were racing to fill a complexity \nvacuum. In the end they were interesting to explore but far more\nthan I was willing to run. I believe modern content management systems can\nbe deconstruct into something simpler.\n\nSome of the core elements of modern content management systems are\n\n+ creation and curation of data sources (including metadata)\n+ transforming data sources if needed\n+ mapping a data source to appropriate template set\n+ rendering template sets to produce a final website\n\nModern static site generators leave creation and curation to your \ntext editor and revision control system (e.g. vi and git). \n\nMost static site generators use a simplified markup. A populate one is\ncalled [Markdown](https://en.wikipedia.org/wiki/Markdown). This \"markup\"\nis predictable enough that you can easily convert the results to HTML and\nother useful formats with tools like [pandoc](http://pandoc.org/). In most \nstatic site generators your content is curated in Markdown and when the \npages are built it is rendered to HTML for injection into your website's \ntemplate and theme.\n\nMapping the data sources to templates, combining the templates and rendering \nthe final website is where most systems introduce a large amount of complexity.\nThis is true of static site generators like [Jekill](https://jekyllrb.com) and \n[Hugo](https://gohugo.io).\n\n\n## An experimental deconstruction\n\nI wanted a simple command line tool that would make a single web page.\nIt would take a few data sources and formats and run them through a\ntemplate system. The template system needed to be simple but support\nthe case where data might not be available. It would be nice if it handled\nthe case of repetitious data like that used in tables or lists. Ideally\nI could render many pages from a single template assuming a simple website\nand layout.\n\n### A single page generator\n\n[mkpage](https://github.com/rsdoiel/mkpage) started as an experiment in\nbuilding a simple single page generator. It's responsibilities\ninclude mapping data sources to the template, transforming data if needed\nand rendering the results. After reviewing the websites I've setup in\nthe last year or two I realized I had three common types of data.\n\n1. Plain text or content that did not need further processing\n2. Markdown content (e.g. page content, navigation lists)\n3. Occasionally I include content from JSON feeds\n\nI also realized I only needed to handle three data sources.\n\n1. strings\n2. files\n3. web resources\n\nEach of these sources might provide plain text, markdown or JSON data formats.\n\nThat poses the question of how to express the data format and the data \nsource when mapping the content into a template. The web resources are\neasy in the sense that the web responses include content type information.\nFiles can be simple too as the file extension indicates their\nformat (e.g. \".md\" for Markdown, \".json\" for JSON documents). What remained\nwas how to identify a text string's format.  I opted for a prefix ending in \na colon (e.g. \"text:\" for plain text, \"markdown:\" for markdown \nand \"json:\" for JSON). This mapping allows for a simple key/value\nrelationship to be expressed easily on the command line.\n\n### mkpage in action\n\nDescribing how to build \"mypage.html\" from \"mypage.md\" and \"nav.md\" \n(containing links for navigating the website) is as easy as typing\n\n```shell\n    mkpage \"content=mypage.md\" \"navigation=nav.md\" page.tmpl > mypage.html\n```\n\nIn this example the template is called \"page.tmpl\" and we redirect the \noutput to \"mypage.html\".\n\n\nAdding a custom page title is easy too.\n\n```shell\n    mkpage \"title=text:My Page\" \\\n        \"content=mypage.md' \"navigation=nav.md\" \n        page.tmpl \\\n        > mypage.html\n```\n\nLikewise integrating some JSON data from weather.gov is relatively straight\nforward. The hardest part is discovering the [URL](http://forecast.weather.gov/MapClick.php?lat=34.0522&lon=118.2437&DFcstType=json) \nthat returns JSON!  Notice I have added a weather field and the URL. When data\nis received back from weather.gov it is JSON decoded and then passed to the\ntemplate for rendering using the \"range\" template function.\n\n```shell\n    mkpage \"title=My Page\" \\\n        \"content=mypage.md\" \\\n        \"navigation=nav.md\" \\\n        \"weather=http://forecast.weather.gov/MapClick.php?lat=34.0522&lon=118.2437&DFcstType=json\" \\\n        page.tmpl \\\n        > mypage.html\n```\n\nWhat is *mkpage* doing?\n\n1. Reading the data sources and formats from the command line\n2. Transforming the Markdown and JSON content appropriately\n3. Applying them to the template (e.g. page.tmpl)\n4. Render the results to stdout\n\nBuilding a website then is only a matter of maintaining navigation in\n*nav.md* and identifying the pages needing to be created. I can easily \nautomated that using the Unix find, grep, cut and sort. Also with find \nI can iteratively process each markdown file applying a \ntemplate and rendering the related HTML file.  This can be done for a site \nof a few pages (e.g. about, resume and cv) to more complex websites like \nblogs and repository activities.\n\nHere's an example template that would be suitable for the previous\ncommand line example. It's mostly just HTML and some curly bracket notation \nsprinkled in.\n\n```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n        {{with .title}}<title>{{- . -}}</title>{{end}}\n        <link rel=\"stylesheet\" href=\"css/site.css\">\n    </head>\n    <body>\n        <nav>\n        {{ .navigation }}\n        </nav>\n        <section>\n        {{ .content }}\n        </section>\n        <aside>\n        Weather Demo<br />\n        <ul>\n        {{range .weather.data.text}}\n            <li>{{ . }}</li>\n        {{end}}\n        </ul>\n        </aside>\n\n    </body>\n    </html>\n```\n\nYou can find out more about [mkpage](https://github.com/rsdoiel/mkpage)\n[rsdoiel.github.io/mkpage](https://rsdoiel.github.io/mkpage).\n\nTo learn more about Go's text templates see \n[golang.org/pkg/text/template](https://golang.org/pkg/text/template/). \n\nIf your site generator needs are more than *mkpage* I suggest [Hugo](https://gohugo.io). \nIt's what I would probably reach for if I was building a large complex organizational\nsite or news site.\n\nIf you're looking for an innovative and rich author centric content system\nI suggest Dave Winer's [Fargo](http://fargo.io) outliner and [1999.io](https://1999.io).\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2016, R. S. Doiel",
        "date": "2016-08-16",
        "keywords": [
          "Bash",
          "Markdown",
          "site generator",
          "mkpage",
          "pandoc"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "From Markdown and Bash to mkpage"
      },
      "url": "posts/2016/08/16/From-Markdown-and-Bash-to-mkpage.json"
    },
    {
      "content": "\n\n# Exploring Bash for Windows 10 Pro\n\nBy R. S. Doiel 2016-08-15\n\n    UPDATE (2016-10-27, RSD): Today trying to compile Go 1.7.3 under \n    Windows 10 Pro I've am getting compile errors when the \n    assembler is being built.  I can compile go1.4.3 but see errors \n    in some of the tests results.\n\n## Initial Setup and configuration\n\nI am running Windows 10 Pro (64bit) Anniversary edition under Virtual Box. The VM was upgraded from an earlier version of Windows 10 Pro (64bit). The VM was allocated 4G or ram, 200G disc and simulating 2 cores.  After the upgrade I took the following steps\n\n+ Search with Bing for \"Bash for Windows\" \n    + Bing returns http://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/\n+ Switch on developer mode for Windows\n+ Turned on Linux Subsystem Beta (searched for \"Turning on Features\")\n+ Reboot\n+ Search for \"Bash\" and clicked on \"Run Bash command\"\n+ Answered \"y\"\n+ Waited for download and extracted file system\n+ When prompted setup developer account with username/password\n    + Documentation can be found at https://aka.ms/wsldocs\n+ Exit root install shell\n+ Search for \"Bash\" locally\n+ Launched \"Bash on Ubuntu on Windows\"\n+ Authenticate with your username/password\n\n\n## Setting up Go under Bash for Windows 10\n\nWith Bash installed these are the steps I took to compile Go\nunder Bash on Ubuntu on Windows.\n\n```shell\n    sudo apt-get update && sudo apt-get upgrade -y\n    sudo apt-get autoremove\n    sudo apt-get install build-essential clang git-core unzip zip -y\n    export CGO_ENABLE=0\n    git clone https://github.com/golang/go go1.4\n    git clone https://github.com/golang/go go\n    cd go1.4\n    git checkout go1.4.3\n    cd src\n    ./all.bash\n    cd\n    export PATH=$PATH:$HOME/go1.4/bin\n    cd go\n    git checkout go1.7\n    cd src\n    ./all.bash\n    cd\n    export PATH=$HOME/go/bin:$HOME/bin:$PATH\n    export GOPATH=$HOME\n```\n\nNote some tests failing during compilation in both 1.4.3 and 1.7. They mostly failed\naround network sockets.  This is probably a result of the limitations in the Linux subsystem\nunder Windows.\n\nIf successful you should be able to run `go version` as well as install additional Go based software\nwith the usual `go get ...` syntax.\n\nIn your `.bashrc` or `.profile` add the following\n\n```shell\n    export PATH=$HOME/go/bin:$HOME/bin:$PATH\n    export GOPATH=$HOME\n```\n\n\n## Improved vim setup\n\nI like the vim-go packages for editing Go code in vim. They are easy to setup.\n\n```shell\n     mkdir -p ~/.vim/autoload ~/.vim/bundle \n     curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\n     git clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go\n```\n\nExample $HOME/.vimrc\n\n```vimrc\n    execute pathogen#infect()\n    syntax on\n    filetype plugin on\n    set ai\n    set nu\n    set smartindent\n    set tabstop=4\n    set shiftwidth=4\n    set expandtab\n    let &background = ( &background == \"dark\"? \"light\" : \"dark\" )\n    let g:vim_markdown_folding_disabled=1\n```\n\nColor schemes are browsable at [vimcolors.com](http://vimcolors.com). They can be installed in\n$HOME/.vim/colors.\n\n1. git clone and place the colorscheme\n2. place the *.vim file holding the color scheme into $HOME/.vim/colors\n3. start vim and at the : do colorscheme NAME where NAME is the scheme you want to try\n\nYou can find the default shipped color schemes in /usr/share/vim/vimNN/colors where vimNN is the version number\ne.g. /usr/share/vim/vim74/colors.\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2016, R. S. Doiel",
        "date": "2016-08-15",
        "keywords": [
          "Golang",
          "Windows",
          "Bash",
          "Linux Subsystem"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Exploring Bash for Windows 10 Pro"
      },
      "url": "posts/2016/08/15/Setting-up-Go-under-Bash-for-Windows-10.json"
    },
    {
      "content": "\n### Recent Posts\n\n- [Building Web Components using Large Language Models](/blog/2025/03/13/Building_Web_Component_using_an_LLM.md), 2025-03-13\n- [Setting up my Raspberry Pi 500, a Portable Workstation](/blog/2025/02/14/Review_Pi-500_as_portable_workstation.md), 2025-02-14\n- [Book review, \"Man and the Computer\"](/blog/2025/02/10/Man_and_the_Computer.md), 2025-02-10\n- [Working with Structured Data in Deno and TypeScript](/blog/2025/02/03/working_with_structured_data.md), 2025-02-03\n- [Moving beyond git template repositories with CodeMeta](/blog/2025/01/31/moving_beyond_git_templates.md), 2025-01-31\n- [Deno 2.1.7, Project Idioms](/blog/2025/01/29/project_idioms.md), 2025-01-29\n- [Deno 2.1.7, Points of Friction](/blog/2025/01/26/points_of_friction.md), 2025-01-26\n\n2024\n----\n\n - 12-13, [Installing Deno via Cargo and other options](/blog/2024/12/13/installing-via-cargo-etc.md)\n - 12-06, [When Deno+TypeScript, when Go?](/blog/2024/12/06/when_deno_when_go.md)\n - 11-21, [Transpiling & Bundling with Emit](/blog/2024/11/21/transpiling-and-bundling-with-emit.md)\n - 11-20, [Raspberry Pi 4 & 400 Power Supply Issues](/blog/2024/11/20/power-supply-issues.md)\n - 11-06, [Rust tools for Web Work](/blog/2024/11/06/rust-tools-for-web-work.md)\n - 10-31, [SQLite3 json_patch is a jewel](/blog/2024/10/31/sqlite3_json_patch.md)\n - 10-31, [Limit and offset for row pruning](/blog/2024/10/31/limit_and_offset_for_row_pruning.md)\n - 10-18, [Quick tour of Deno 2.0.2](/blog/2024/10/18/a-quick-tour-of-deno-2.md)\n - 07-08, [Web GUI and Deno](/blog/2024/07/08/webgui_and_deno.md)\n - 07-03, [Transpiling with Deno](/blog/2024/07/03/transpiling_with_deno.md)\n - 06-14, [Bootstrapping a Text Oriented Web](/blog/2024/06/14/tow_bootstraping.md)\n - 06-08, [RISC OS 5.30, GCC 4.7 and Hello World](/blog/2024/06/08/riscos_gcc_and_hello.md)\n - 06-04, [Exploring RISC OS 5.30 on a Raspberry Pi Zero W](/blog/2024/06/04/exploring_riscos.md)\n - 05-10, [A quick review of Raspberry Pi Connect](/blog/2024/05/10/quick-review-rpi-connect.md)\n - 05-10, [Building Lagrange on Raspberry Pi OS](/blog/2024/05/10/building-lagrange-on-pi-os.md)\n - 04-25, [Getting Started with Miranda](/blog/2024/04/25/getting-started.md)\n - 02-25, [A Text Oriented Web](/blog/2024/02/25/text_oriented_web.md)\n - 02-23, [Two missing features from HTML5, an enhanced form.enctype and a list input type](/blog/2024/02/23/enhanced_form_handling.md)\n - 02-01, [Installing pgloader from source](/blog/2024/02/01/installing-pgloader-from-source.md)\n - 01-31, [vis for vi and fun](/blog/2024/01/31/vis-for-vi-and-fun.md)\n - 01-04, [Updated recipe, compiling PostgREST 12.0.2 (M1)](/blog/2024/01/04/updated-recipe-compiling-postgrest_v12.0.2.md)\n\n2023\n----\n\n - 12-23, [Finding Bluesky RSS feeds](/blog/2023/12/23/finding-blue-sky-rss-feeds.md)\n - 12-07, [RSS and my web experience](/blog/2023/12/07/rss-and-my-web-experience.md)\n - 11-17, [Postgres Quick Notes, take two](/blog/2023/11/17/PostgreSQL-Quick-Notes.md)\n - 10-18, [Building A to Z list pages in Pandoc](/blog/2023/10/18/A-to-Z-lists.md)\n - 10-06, [Skimmer](/blog/2023/10/06/concept.md)\n - 07-05, [Quick recipe, compiling PostgREST (M1)](/blog/2023/07/05/quick-recipe-compiling-PostgREST-M1.md)\n - 07-05, [Quick recipe, compiling Pandoc (M1)](/blog/2023/07/05/quick-recipe-compiling-Pandoc-M1.md)\n - 05-20, [gsettings command](/blog/2023/05/20/gsettings-commands.md)\n - 03-10, [First Personal Search Engine Prototype](/blog/2023/03/10/first-prototype-pse.md)\n - 03-07, [Prototyping a personal search engine](/blog/2023/03/07/prototyping-a-personal-search-engine.md)\n - 01-03, [SQL query to CSV, a missing datatool](/blog/2023/01/03/sql-to-csv-a-missing-datatool.md)\n\n2022\n----\n\n - 12-12, [Go and MySQL timestamps](/blog/2022/12/12/Go-and-MySQL-Timestamps.md)\n - 12-05, [Progress and time remaining](/blog/2022/12/05/progress-and-time-remaining.md)\n - 11-28, [Pandoc, Pagefind and Make](/blog/2022/11/28/pandoc-pagefind-and-make.md)\n - 11-21, [Initial Impressions of Pagefind](/blog/2022/11/21/initial-impressions-pagefind.md)\n - 11-18, [Browser based site search](/blog/2022/11/18/browser-side-site-search.md)\n - 11-17, [Revealing the Pandoc AST](/blog/2022/11/17/revealing-pandoc-ast.md)\n - 11-11, [Twitter's pending implosion](/blog/2022/11/11/Twitter-implosion.md)\n - 11-07, [Compiling Pandoc from source](/blog/2022/11/07/compiling-pandoc-from-source.md)\n - 11-01, [Installing Cargo/Rust on Raspberry Pi 400](/blog/2022/11/01/installing-cargo-rust-r400.md)\n - 11-01, [feeds, formats and plain text](/blog/2022/11/01/Feeds-formats-and-plain-text.md)\n - 10-18, [7:30 AM, Oberon Language: A minimum SYSTEM module](/blog/2022/10/18/Wishlist-Oberon-in-2023-2022-10-18_070730.md)\n - 10-16, [Wish list for Oberon in 2023](/blog/2022/10/16/Wishlist-Oberon-in-2023.md)\n - 10-10, [7:30 AM, Gopher: Setup](/blog/2022/10/10/getting-things-setup-2022-10-10_070730.md)\n - 10-09, [Getting things setup](/blog/2022/10/09/getting-things-setup.md)\n - 09-28, [Thinking about Gopher](/blog/2022/09/28/thinking-about-gopher.md)\n - 09-27, [Rust development notes](/blog/2022/09/27/rust-development-notes.md)\n - 09-26, [7:30 AM, Golang: pttk](/blog/2022/09/26/golang-development-2022-09-26_070730.md)\n - 09-19, [12:30 PM, SQL: Postgres](/blog/2022/09/19/rosette-notes-2022-09-19_121230.md)\n - 09-19, [PostgreSQL dump and restore](/blog/2022/09/19/PostgreSQL-Dump-and-Restore.md)\n - 08-30, [Ordering front matter](/blog/2022/08/30/Ordering-Frontmatter.md)\n - 08-26, [10:30 AM, SQL: Postgres](/blog/2022/08/26/rosette-notes-2022-08-26_101030.md)\n - 08-26, [Postgres 14 on Ubuntu 22.04 LTS](/blog/2022/08/26/postgres-14-on-ubuntu-22.04-LTS.md)\n - 08-24, [12:00 PM, SQL: Postgres](/blog/2022/08/24/rosette-notes-2022-08-24_121200.md)\n - 08-24, [A Quick into to PL/pgSQL](/blog/2022/08/24/plpgsql-quick-intro.md)\n - 08-22, [11:30 AM, SQL: Postgres](/blog/2022/08/22/rosette-notes-2022-08-22_111130.md)\n - 08-19, [Rosette Notes: Postgres and MySQL](/blog/2022/08/19/rosette-notes.md)\n - 08-15, [PTTK and STN](/blog/2022/08/15/golang-development.md)\n - 08-15, [5:45 PM, Golang: ptdk,  stngo](/blog/2022/08/15/golang-development-2022-08-15_170545.md)\n - 08-14, [5:00 PM, Golang: pdtk,  stngo](/blog/2022/08/14/golang-development-2022-08-14_170500.md)\n - 08-12, [4:30 PM, Golang: stngo](/blog/2022/08/12/golang-development-2022-08-12_160430.md)\n - 07-30, [Turbo Oberon, the dream](/blog/2022/07/30/Turbo-Oberon.md)\n - 07-27, [Artemis Project Status, 2022](/blog/2022/07/27/Artemis-Status-Summer-2022.md)\n - 02-18, [Installing Golang from source on RPi-OS for arm64](/blog/2022/02/18/Installing-Go-from-Source-RPiOS-arm64.md)\n\n2021\n----\n\n - 12-18, [Notes on setting up a Mid-2010 Mac Mini](/blog/2021/12/18/Notes-on-setting-up-a-2010-Mac-Mini.md)\n - 11-27, [Setting up FreeDOS 1.3rc4 with Qemu](/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.md)\n - 11-26, [Portable Conversions (Integers)](/blog/2021/11/26/Portable-Conversions-Integers.md)\n - 11-22, [Revisiting Files](/blog/2021/11/22/Revisiting-Files.md)\n - 06-14, [Combining Oberon-07 with C using Obc-3](/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.md)\n - 05-16, [Beyond Oakwood, Modules and Aliases](/blog/2021/05/16/Beyond-Oakwood-Modules-and-Aliases.md)\n - 04-25, [Ofront on Raspberry Pi OS](/blog/2021/04/25/Ofront-on-Rasberry-Pi-OS.md)\n - 04-16, [Updating Schema in SQLite3](/blog/2021/04/16/Updating-Schema-in-SQLite3.md)\n - 04-02, [A2 Oberon on VirtualBox 6.1](/blog/2021/04/02/A2-Oberon-on-VirtualBox-6.1.md)\n - 03-17, [ETH Oberon System 3 on VirtualBox 6.1](/blog/2021/03/17/NativeOberon-VirtualBox.md)\n\n2020\n----\n\n - 12-24, [RetroFlag GPi Case Setup](/blog/2020/12/24/gpi-case-setup.md)\n - 11-27, [Dates](/blog/2020/11/27/Dates.md)\n - 11-27, [Dates & Clock](/blog/2020/11/27/Dates-and-Clock.md)\n - 11-27, [Clock](/blog/2020/11/27/Clock.md)\n - 11-27, [Chars](/blog/2020/11/27/Chars.md)\n - 11-11, [Pandoc & Metadata](/blog/2020/11/11/Pandoc-Metadata.md)\n - 11-09, [Pandoc Partials](/blog/2020/11/09/Pandoc-Partials.md)\n - 10-31, [Software Tools, Filters](/blog/2020/10/31/Filters.md)\n - 10-19, [Assembling Pages](/blog/2020/10/19/Assemble-pages.md)\n - 10-03, [Oberon to Markdown](/blog/2020/10/03/Oberon-to-markdown.md)\n - 09-29, [Software Tools, Getting Started](/blog/2020/09/29/Software-Tools-1.md)\n - 08-15, [Portable Oberon-07](/blog/2020/08/15/Portable-Oberon-07.md)\n - 07-08, [Words Matter](/blog/2020/07/08/words-matter.md)\n - 07-07, [Procedures in records](/blog/2020/07/07/Procedures-in-records.md)\n - 06-20, [Procedures as parameters](/blog/2020/06/20/Procedures-as-parameters.md)\n - 05-25, [Dynamic types](/blog/2020/05/25/Dynamic-types.md)\n - 05-09, [Oberon-07 and the file system](/blog/2020/05/09/Oberon-07-and-the-filesystem.md)\n - 05-06, [Compiling OBNC on macOS](/blog/2020/05/06/Compiling-OBNC-on-macOS.md)\n - 05-01, [Combining Oberon-07 and C with OBNC](/blog/2020/05/01/Combining-Oberon-and-C.md)\n - 04-19, [Oberon Loops and Conditions](/blog/2020/04/19/Mostly-Oberon-Loops-and-Conditions.md)\n - 04-18, [Oberon Basic Types](/blog/2020/04/18/Mostly-Oberon-Basic-Types.md)\n - 04-12, [Oberon Modules and Procedures](/blog/2020/04/12/Mostly-Oberon-Modules.md)\n - 04-11, [Mostly Oberon](/blog/2020/04/11/Mostly-Oberon.md)\n\n2019\n----\n\n - 07-28, [FreeDOS 1.2 to Oberon System 3](/blog/2019/07/28/freedos-to-oberon-system-3.md)\n\n2018\n----\n\n - 07-22, [Review: Software Tools in Pascal](/blog/2018/07/22/software-tools-in-pascal.md)\n - 03-11, [Accessing Go from Julia](/blog/2018/03/11/accessing-go-from-julia.md)\n - 02-24, [Go based Python modules](/blog/2018/02/24/go-based-python-modules.md)\n - 02-19, [Go, Bleve and Library oriented software](/blog/2018/02/19/go-bleve-and-libraries.md)\n\n2017\n----\n\n - 12-18, [Raspbian Stretch on DELL E4310 Laptop](/blog/2017/12/18/raspbian-stretch-on-amd64.md)\n - 12-10, [Harvesting my Gists from GitHub](/blog/2017/12/10/harvesting-my-gists-from-github.md)\n - 10-20, [NodeJS, NPM, Electron](/blog/2017/10/20/node-npm-electron.md)\n - 06-16, [Cross compiling Go 1.8.3 for Pine64 Pinebook](/blog/2017/06/16/cross-compiling-go.md)\n\n2016\n----\n\n - 09-20, [Android, Termux and Dev Environment](/blog/2016/09/20/Android-Termux-Dev-environment.md)\n - 08-16, [From Markdown and Bash to mkpage](/blog/2016/08/16/From-Markdown-and-Bash-to-mkpage.md)\n - 08-15, [Exploring Bash for Windows 10 Pro](/blog/2016/08/15/Setting-up-Go-under-Bash-for-Windows-10.md)\n - 07-04, [How to make a Pi-Top more Raspbian](/blog/2016/07/04/How-To-Make-A-PiTop-More-Raspbian.md)\n - 05-30, [Instant Articles, Accelerated Mobile Pages, Twitter Cards and Open Graph](/blog/2016/05/30/amp-cards-and-open-graph.md)\n - 05-28, [OPML to Markdown and back](/blog/2016/05/28/OPML-to-Markdown-and-back.md)\n\n",
      "data": {
        "title": "Robert's ramblings"
      },
      "url": "posts/index.json"
    }
  ]
}