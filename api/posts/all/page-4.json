{
  "page": 4,
  "total_pages": 5,
  "has_more": true,
  "next_page": "posts/all/page-5.json",
  "values": [
    {
      "content": "\n\nOberon Basic Types\n==================\n\n\nBy R. S. Doiel, 2020-04-18\n\nThis is the third post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.\n\n## Simple Types\n\nOberon is a small systems language. It provides a useful but \nlimited umber of basic types. These can be be\nthought of as simple types mapping to specific memory locations\nand more complex types composed of multiple memory locations.\n\nNOTE: __basic types__, INTEGER, REAL, CHAR, ARRAY, RECORD and POINTER TO\n\n### INTEGER\n\nIntegers are easiest to be thought of as whole numbers. They may be\npositive numbers or negative numbers. Declaring an integer\nvariable `i` it would look something like\n\n\n~~~{.oberon}\n\n    VAR i : INTEGER;\n\n~~~\n\n\nSetting `i`'s value to seven would look like\n\n\n~~~{.oberon}\n\n    i := 7;\n\n~~~\n\n\n\n### REAL\n\nReal holds real numbers. Real numbers contain a fractional \ncomponent. We normally notate them with\na decimal value e.g. \"0.01\". Like integers they can also be \npositive or negative.\n\nDeclaring a real number variable `a` would look like\n\n\n~~~{.oberon}\n\n    VAR a : REAL;\n\n~~~\n\n\nSetting the value of `a` to seven and one tenth (7.1) would\nlook like\n\n\n~~~{.oberon}\n\n    a := 7.1;\n\n~~~\n\n\n### CHAR\n\nA CHAR is a single ASCII character. Oberon, unlike more recent\nlanguages like Go or Julia, predates the wide adoption of UTF-8.\nThe character is represented in memory as one 8 bit byte.\nIf you need to work with an extended character set then you need\nto either re-encode the values into ASCII. At this time[^now] there\nis no standard way of handling None ASCII character systems natively.\nIf you need to work directly with an encoding such as UTF-8 you'll\nneed to develop your own modules and procedures for handily their\nencoding, decoding and other operations.\n\nDeclaring a CHAR variable `c` would look like\n\n\n~~~{.oberon}\n\n    VAR c: CHAR;\n\n~~~\n\n\nSetting the value of `c` to capital Z would look like\n\n\n~~~{.oberon}\n\n    c := \"Z\";\n\n~~~\n\n\nNote: Oberon expects double quotes to notate a character.\n\n\n### More complex types\n\nThe simplest types would prove problematic when addressing\nmore complex data representations if Oberon lacked two three built-in\ntypes - ARRAY, RECORD and POINTER TO. \n\n### ARRAY\n\nAn array is a sequence of memory locations which contain a common\ntype.  In Oberon-07 all arrays have to have a known link. This is\nbecause the Oberon compiler is responsible for pre-allocating\nmemory when the program starts to hold the array.  While this\nseems restrictive our next data type, RECORD, lets us move\ninto more dynamic memory structures.  Pre-allocating the array\nsize also has the advantage that we can re-use those locations\neasily in a type safe manner.\n\nDeclaring a variable \"name\" as an array of twelve characters would \nlook like and declaring a variable \"scores\" as an array of ten\nintegers would look like\n\n\n~~~{.oberon}\n\n    VAR \n      name : ARRAY 24 OF CHAR;\n      scores : ARRAY 10 OF INTEGER;\n\n~~~\n\n\nThe length of the array immediately follows the keyword \"ARRAY\" and\nthe \"OF CHAR\" or \"OF INTEGER\" phrases describes the types that can be \ncontained in the array. In the \"OF CHAR\" the type is \"CHAR\" the \n\"OF INTEGER\" is the type \"INTEGER\". \n\nSetting an array value can be done using an index. In this example\nthe zero-th element (first element of the array) is set to the value\n102. \n\n\n~~~{.oberon}\n\n    scores[0] := 102;\n\n~~~\n\n\nIn the case of CHAR arrays the whole array can be set in a simple \nsingle assignment.\n\n\n~~~{.oberon}\n\n    name := \"Ada Lovelace\";\n\n~~~\n\n\nTwo key points of arrays in Oberon are a known length and a single \ntype of data associated with them. Arrays can have more than\none dimension but the cells of the array most contain the same type.\n\nNOTE: __type safety__, Type safe means the compiler or run time verify that the data stored at that location conforms to the program defined, this is helpful in maintaining program correctness.\n\n### RECORD\n\nThe RECORD is Oberon's secret sauce. The record is used to\ncreate new types if data representations. It extend Oberon's basic \ntypes creating structured data representation. In this example we'll \ncreate a record that holds an game's name, a list of three player names \nand a list of three scores. We'll call this record type \n\"TopThreeScoreboard\". \n\n\n~~~{.oberon}\n\n    TYPE\n      TopThreeScoreboard = RECORD\n        gameName : ARRAY 24 OF CHAR;\n        playerNames : ARRAY 3, 24 OF CHAR;\n        scores : ARRAY 3 OF INTEGER\n      END;\n\n~~~\n\n\nNow that we have describe a record of type \"TopThreeScoreboard\" we can\ndeclare it with our \"VAR\" statement.\n\n\n~~~{.oberon}\n\n    VAR\n      scoreboard : TopThreeScoreboard;\n\n~~~\n\n\nSetting the element values in a record uses a dot notation\nand if those elements are themselves. In this case we'll set\nthe game name to \"Basketball\", the three players are\n\"Ada Lovelace\", \"Blaise Pascal\", and \"John McCarthy\", with\nthe scores 102, 101, 100.\n\n\n~~~{.oberon}\n\n   scoreboard.gameName := \"Basketball\";\n   scoreboard.playerNames[0] := \"Ada Lovelace\";\n   scoreboard.scores[0] := 102;\n   scoreboard.playerNames[1] := \"Blaise Pascal\";\n   scoreboard.scores[0] := 101;\n   scoreboard.playerNames[2] := \"John McCarthy\";\n   scoreboard.scores[0] := 100;\n\n~~~\n\n\nRecords are also used to create dynamic memory structures such as lists, trees and maps (see note on \"AD\").  The dynamic nature of records is achieved with\nour next type \"POINTER TO\".\n\nNOTE: __AD__, Prof. Wirth wrote an excellent text on [Algorithms and Data structures](https://inf.ethz.ch/personal/wirth/AD.pdf) available in PDF format.\n### POINTER TO\n\nOberon is a type safe language. To keep things safe in a type\nsafe language you need to place constraints around random\nmemory access. Memory can be thought of a list of locations and\nwe can go to those locations if we know their address. A pointer\nin most languages holds an address. Oberon has pointers but they\nmust point at specific data types. So like array you have to indicate\nthe type of the thing you are pointing at in a declaration. \nE.g. `VAR a : POINTER TO CHAR;` would declare a variable 'a' \nthat points to a memory location that holds a CHAR. The more common \ncase is we use \"POINTER TO\" in records to create dynamic data \nstructures such as linked lists.\n\nHere's a simple data structure representing a dynamic list\nof characters. Let's call it a DString and we will implement\nit using a single link list. The list can be implemented by\ndefining a RECORD type that holds a single character and a pointer\nto the next record. We can then also define a pointer to this type\nof record.  If there is no next character record\nwe assume we're at the end of the string.\n\n\n~~~{.oberon}\n\n    TYPE\n      DStringDesc = RECORD\n        value : CHAR;\n        next : POINTER TO DStringDesc\n      END;\n\n      DString : POINTER TO DStringDesc;\n\n~~~\n\n\nRECORD types are permitted to use recursive definition so our \n\"next\" value is itself a type \"DStringDesc\".  Declaring a \nDString variable is as easy as declaring our scoreboard type variable.\n\n\n~~~{.oberon}\n\n  VAR\n    VAR s : DString;\n\n~~~\n\n\nSetting our DString is a little trickier. This is where\nOberon's procedures come into play. We can pass our variable \"s\"\nof type DString to a procedure to build out our DString from an simple\narray of characters. Note \"s\" is declared as a \"VAR\" parameter\nin our procedure heading. Our `SetDString` will also need to handle\ncreating new elements in our dynamic string. That is what Oberon's\nbuilt-in `NEW()` procedure does. It allocates new memory for our\nlist of records.\n\n\n~~~{.oberon}\n\n    PROCEDURE SetDString(VAR s : DString; buf : ARRAY OF CHAR);\n        VAR i : INTEGER; cur, tmp : DString;\n    BEGIN\n      (* Handle the case where s is NIL *)\n      IF s = NIL THEN\n        NEW(s);\n        s.value := 0X;\n        s.next := NIL;\n      END;\n      cur := s;\n      i := 0;\n      (* check to see if we are at end of string or array *)\n      WHILE (buf[i] # 0X) & (i < LEN(buf)) DO\n        cur.value := buf[i];\n        IF cur.next = NIL THEN\n          NEW(tmp);\n          tmp.value := 0X;\n          tmp.next := NIL;\n          cur.next := tmp;\n        END;\n        (* Advance our current pointer to the next element *)\n        cur := cur.next;\n        i := i + 1;\n      END;\n    END SetDString;\n\n~~~\n\n\nWe can move our string back into a fixed length array of char\nwith a similar procedure.\n\n\n~~~{.oberon}\n\n    PROCEDURE DStringToCharArray(s : DString; VAR buf : ARRAY OF CHAR);\n      VAR cur : DString; i, l : INTEGER;\n    BEGIN\n      l := LEN(buf);\n      i := 0;\n      cur := s;\n      WHILE (i < l) & (cur # NIL) DO\n        buf[i] := cur.value; \n        cur := cur.next;\n        i := i + 1;\n      END;\n      (* Zero out the rest of the string. *)\n      WHILE (i < l) DO\n        buf[i] := 0X;\n        i := i + 1;\n      END;\n    END DStringToCharArray;\n\n~~~\n\n\nAt this stage we have the basics of data organization. Modules\nallow us to group operations and data into cohesive focused units.\nProcedures allow us to define consistent ways of interacting with\nout data, and types singularly and collectively allow us to structure\ndata in a way that is useful to solving problems.\n\n## Putting it all together\n\nHere is a [module demoing our basic type](BasicTypeDemo.Mod). In it\nwe can define procedures to demo our assignments, display their results\nall called from inside the module's initialization block.\n\n\n~~~{.oberon}\n\n    MODULE BasicTypeDemo;\n      IMPORT Out;\n    \n      (* These are our custom data types definitions. *)\n      TYPE\n          TopThreeScoreboard = RECORD\n            gameName : ARRAY 24 OF CHAR;\n            playerNames : ARRAY 3, 24 OF CHAR;\n            scores : ARRAY 3 OF INTEGER\n          END;\n    \n          DStringDesc = RECORD\n            value : CHAR;\n            next : POINTER TO DStringDesc\n          END;\n    \n          DString = POINTER TO DStringDesc;\n    \n      (* Here are our private variables. *)\n      VAR \n        i : INTEGER;\n        a : REAL;\n        c: CHAR;\n        name : ARRAY 24 OF CHAR;\n        scores : ARRAY 10 OF INTEGER;\n        scoreboard : TopThreeScoreboard;\n        s : DString;\n    \n    \n      PROCEDURE SimpleTypes;\n      BEGIN\n        i := 7;\n        a := 7.1;\n        c := \"Z\";\n      END SimpleTypes;\n    \n      PROCEDURE DisplaySimpleTypes;\n      BEGIN\n        Out.String(\" i: \");Out.Int(i, 1);Out.Ln;\n        Out.String(\" a: \");Out.Real(a, 1);Out.Ln;\n        Out.String(\" c: \");Out.Char(c);Out.Ln;\n      END DisplaySimpleTypes;\n    \n    \n      PROCEDURE MoreComplexTypes;\n      BEGIN\n        scores[0] := 102;\n        name := \"Ada Lovelace\";\n        scoreboard.gameName := \"Basketball\";\n        scoreboard.playerNames[0] := \"Ada Lovelace\";\n        scoreboard.scores[0] := 102;\n        scoreboard.playerNames[1] := \"Blaise Pascal\";\n        scoreboard.scores[0] := 101;\n        scoreboard.playerNames[2] := \"John McCarthy\";\n        scoreboard.scores[0] := 100;\n      END MoreComplexTypes;\n    \n      PROCEDURE DisplayMoreComplexTypes;\n        VAR i : INTEGER;\n      BEGIN\n        i := 0;\n        Out.String(\" Game: \");Out.String(scoreboard.gameName);Out.Ln;\n        WHILE i < LEN(scoreboard.playerNames) DO\n          Out.String(\"    player, score: \");\n          Out.String(scoreboard.playerNames[i]);Out.String(\", \");\n          Out.Int(scoreboard.scores[i], 1);\n          Out.Ln;\n          i := i + 1;\n        END;\n      END DisplayMoreComplexTypes;\n    \n      PROCEDURE SetDString(VAR s : DString; buf : ARRAY OF CHAR);\n          VAR i : INTEGER; cur, tmp : DString;\n      BEGIN\n        (* Handle the case where s is NIL *)\n        IF s = NIL THEN\n          NEW(s);\n          s.value := 0X;\n          s.next := NIL;\n        END;\n        cur := s;\n        i := 0;\n        (* check to see if we are at end of string or array *)\n        WHILE (buf[i] # 0X) & (i < LEN(buf)) DO\n          cur.value := buf[i];\n          IF cur.next = NIL THEN\n            NEW(tmp);\n            tmp.value := 0X;\n            tmp.next := NIL;\n            cur.next := tmp;\n          END;\n          cur := cur.next;\n          i := i + 1;\n        END;\n      END SetDString;\n    \n      PROCEDURE DStringToCharArray(s : DString; VAR buf : ARRAY OF CHAR);\n        VAR cur : DString; i, l : INTEGER;\n      BEGIN\n        l := LEN(buf);\n        i := 0;\n        cur := s;\n        WHILE (i < l) & (cur # NIL) DO\n          buf[i] := cur.value; \n          cur := cur.next;\n          i := i + 1;\n        END;\n        (* Zero out the rest of the string. *)\n        WHILE (i < l) DO\n          buf[i] := 0X;\n          i := i + 1;\n        END;\n      END DStringToCharArray;\n    \n    BEGIN\n      SimpleTypes;\n      DisplaySimpleTypes;\n      MoreComplexTypes;\n      DisplayMoreComplexTypes;\n      (* Demo our dynamic string *)\n      Out.String(\"Copy the phrase 'Hello World!' into our dynamic string\");Out.Ln;\n      SetDString(s, \"Hello World!\");\n      Out.String(\"Copy the value of String s into 'name' our array of char\");Out.Ln;\n      DStringToCharArray(s, name);\n      Out.String(\"Display 'name' our array of char: \");Out.String(name);Out.Ln;\n    END BasicTypeDemo.\n\n~~~\n\n\n## Reading through the code\n\nThere are some nuances in Oberon syntax that can creep up on you.\nFirst while most statements end in a semi-colon there are noticeable\nexceptions. Look at the record statements in particular.  The last\nelement of your record before the `END` does not have a semicolon.\nIn that way it is a little like a `RETURN` value in a function\nlike procedure.\n\nIn creating our `DString` data structure the Oberon idiom is to first\ncreate a description record, `DStringDesc` then create a pointer to\nthe descriptive type, i.e. `DString`. This is a very common\nidiom in building out complex data structures. A good place to learn\nabout implementing algorithms and data structures in Oberon-07 is \nProf. Wirth's 2004 edition of [Algorithms and Data Structures](https://inf.ethz.ch/personal/wirth/AD.pdf) which\nis available from his personal website in PDF.\n\n\n### Next and Previous\n\n+ Next [Loops and Conditions](../19/Mostly-Oberon-Loops-and-Conditions.html)\n+ Previous [Modules and Procedures](../12/Mostly-Oberon-Modules.html)\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-04-18",
        "keywords": [
          "Oberon",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 3,
        "series": "Mostly Oberon",
        "title": "Oberon Basic Types"
      },
      "url": "posts/2020/04/18/Mostly-Oberon-Basic-Types.json"
    },
    {
      "content": "\n\nMostly Oberon\n=============\n\nBy R. S. Doiel, 2020-04-11\n\n**Mostly Oberon** is a series of blog posts documenting my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.\n\n## Overview\n\nOberon is a classical computer language and operating system originated by Professors Niklaus Wirth and Jürg Gutknecht at [ETH](https://en.wikipedia.org/wiki/ETH_Zurich) circa 1987.  It was inspired by their experiences in California at the [Xerox Palo Alto Research Center](https://en.wikipedia.org/wiki/PARC_\\(company\\)).  This series of blog posts are my meandering exploration of Oberon-07 language based on [Project Oberon 2013](http://www.projectoberon.com/).\n\nNOTE: Oberon grew from Wirth's Modula, which grew from Pascal, which grew from his experiences with Algol.\n\n### My Voyage\n\nI am new to both Oberon and the Oberon System.  Oberon language is in the tradition of ALGOL, Pascal, Modula 1 and 2 as well as incorporating ideas from the parent of Object Oriented languages Simula. The Oberon language reminds me of my first programming language [Turbo Pascal](https://en.wikipedia.org/wiki/Turbo_Pascal).  Oberon's language shape is more Pascal than C. For that reason I think it has largely been overlooked.\n\nOberon-07 is Wirth's most recent refinement of the Oberon language.  It is a terse and powerful systems language.  It strikes a different computing path then many popular programming languages used in 2020.  You find its influence along with Simula in more recent popular languages like [Go](https://golang.org).\n\nWhile Wirth conceived of Oberon in the context of a whole system it's use in research and instruction means it is also well suited [POSIX](https://en.wikipedia.org/wiki/POSIX) based systems (e.g. BSD, Linux, macOS).  The difference in programming in Oberon for a POSIX system versus a native Oberon System is primarily in the modules you import. These posts will focus on using Oberon language in a POSIX environment.\n\nNOTE: Oberon was initially a project including the CERES Hardware, Oberon compiler and Oberon operating system for networked workstations.\n\nThe latest Oberon is Prof. Niklaus Wirth and Paul Reeds' Project Oberon 2013. If you want to explore it I suggest using Peter De Wachter's [emulator](https://github.com/pdewacht/oberon-risc-emu). Project Oberon also his links to the updated books and articles in PDF format which are easy to read (or print) on most computing devices.\n\n\n## A starting point\n\nI am starting my exploration with Karl Landström's [OBNC](https://miasap.se/obnc/) compiler. I am focusing on getting comfortable using and writing in the Oberon language.\n\nHere's an example of a simple \"Hello World\" program in Oberon written for a POSIX system. I've named the [source code](HelloWorld.Mod) `HelloWorld.Mod`.\n\nNOTE: In 2020 common POSIX systems include [Linux](https://en.wikipedia.org/wiki/Linux), [BSD](https://en.wikipedia.org/wiki/Berkeley_Software_Distribution) and [macOS](https://en.wikipedia.org/wiki/MacOS).\n\n\n~~~\n\n    MODULE HelloWorld;\n      IMPORT Out;\n    BEGIN\n      Out.String(\"Hello World!\"); Out.Ln;\n    END HelloWorld.\n\n~~~\n\n\nWhile this is longer than a Python \"hello world\" program it is much shorter than I remember writing in Java and about the same number of lines as in C. `BEGIN` and `END` are similar to our opening and closing curly braces in C and the module is the basic unit of source code in Oberon. `IMPORT` includes the module `Out` (modules are similar to a included library in C) for sending values to the console (stdout in POSIX). One thing to note, Oberon language(s) are case sensitive. All language terms are capitalized. This makes it easy to distinguish between source code written in Oberon versus the Oberon language itself.\n\nThe `Out` module includes methods for displaying various data types native\nto Oberon. There is a corresponding `In` for receiving input as well as\nsome additional modules provided with our chosen compiler implementation.\n\nModules in Oberon can include a module wide initialization block. The\n`BEGIN` through `END HelloWorld.` are an initialization block. This is\nsimilar to C or Go's \"main\" function for our POSIX environment.\n\n### OBNC\n\nIf you want to run my \"Hello World\" you need to compile it.  I have found that [OBNC](https://miasap.se/obnc/) compiler runs well on Linux, macOS and [Raspberry Pi](https://www.raspberrypi.org). Karl has also made a precompiled version that runs on Windows available too. It is the Oberon compiler I plan to use in this series of posts.\n\nOBNC compiles Oberon source into C then into machine code for the computer system you are running on. Because it is compiling to C it can function as a [cross compiler](https://en.wikipedia.org/wiki/Cross_compiler). This opens the door to [bare metal programming](https://en.wikipedia.org/wiki/Bare_machine).\n\nIf you're following along please install OBNC on your computer.  Instructions are found at https://maisap.se/obnc. Karl also has excellent documentation and is responsive to questions about his implementation. His contact methods are included on his website.\n\n\n### Running OBNC\n\nOBNC provides a Oberon-07 compiler with some optional modules for working in a POSIX environment.  Compiling our \"Hello World\" is easy from your shell or terminal.\n\n\n~~~\n\n    obnc HelloWorld.Mod\n\n~~~\n\n\nIf all goes well this should produce an executable file named `HelloWorld` (or `HelloWorld.exe` on Windows). You can now run this program with a command like `./HelloWorld` (or `HelloWorld` on Windows).\n\n### Learning more about Oberon\n\nI have faced two challenges in my exploration of Oberon, finding a compiler I was happy with (thank you Karl for OBNC) and sorting out the literature around Oberon language implementations and system versions.\n\nOberon has a rich history though it was not well known in Southern California in 2020. Oberon's history is primarily academic and European. It was commonly used in college level instruction in Europe from it's inception at ETH in the late 80's through the early 2000s. The Oberon System is an Open Source system (predating the term by a decade) and was created in the spirit of other academic systems such as BSD. There are many books (physical books as opposed to ebooks) dating from that era.  They covered the Oberon language and system of their time.  From a historical computing perspective they remain very interesting. But running Oberon on modern 2020 hardware is a little more challenging. Fortunately Prof. Emeritus Wirth and Paul Reed brought things up to date in 2013. I recommend Reed's [www.projectoberon.com](http://www.projectoberon.com) as a good place to start. He includes links to revised versions of the classic Oberon and Oberon System texts written by Wirth et el. Prof. Wirth's [website](https://inf.ethz.ch/personal/wirth/) is still maintained and he features links to most of his major publications. His is the canonical source of information on Oberon.\n\nNOTE: Prof. Wirth's personal website at ETH was available as of 2020-04-11. \n\nI have found the ACM [Digital Library](https://dl.acm.org/) and the ETH [Research Collection](https://www.research-collection.ethz.ch/?locale-attribute=en) very helpful.  While much of the material is now historic it remains useful for both techniques and inspiration.  Today's hardware, even a Raspberry Pi Zero, is more resource rich than the original systems Oberon ran on.\n\nThe online community for Oberon and Oberon System seems mostly centered around a [mail list](https://lists.inf.ethz.ch/mailman/listinfo/oberon) at ETH and net news group [comp.lang.oberon](https://groups.google.com/forum/#!forum/comp.lang.oberon)\n\n\n\n\n\n\n\n\n### Next\n\n+ Next [Modules and Procedures](../12/Mostly-Oberon-Modules.html)\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "byline": "R. S. Doiel",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-04-11",
        "keywords": [
          "Oberon",
          "Wirth",
          "Gutknecht",
          "ETH",
          "Parc",
          "programming",
          "operating systems"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 1,
        "series": "Mostly Oberon",
        "title": "Mostly Oberon"
      },
      "url": "posts/2020/04/11/Mostly-Oberon.json"
    },
    {
      "content": "\nOberon Loops and Conditions\n===========================\n\nBy R. S. Doiel, 2020-04-19\n\nThis is the four post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.\n\n## Data Flow\n\nOberon is a small systems language and while it is minimalist.\nIt provides you with the necessary primitives to get things done.\nI've touched on code organization, basic types and basic type\nextensions in the previous articles.  I have shown the basic\ncontrol statements but have not talked about them yet.\n\nOberon offers four basic control statements. \n\nIF, ELSIF, ELSE\n: Basic condition test and execution\n\nASSERT\n: A mechanism to trigger a program halt\n\nWHILE DO, ELSIF DO\n: The Loop structure in the language (aside from recursive procedures)\n\nFOR TO, FOR TO BY\n: A counting Loop where incrementing a counter by an integer value (e.g. 1 or by a specified constant).\n\n## IF, ELSIF, ELSE\n\nThe first two provide for conditional statements of the form\nif a condition is true do something. Almost ever computer language\nhas some form of a conditional express and the Oberon IF, ELSIF,\nELSE typical of what you find is more computer languages today.\nBoth ELSIF and ELSE are optional.\n\n```Oberon\n    IF (s = \"Freda\") OR (s = \"Mojo\") THEN\n      Out.String(\"Wowie Zowie! I remember you from ZBS stories.\");Out.Ln;\n    ELSIF (s = \"Bilbo\") OR (s = \"Gandolf\") THEN\n      Out.String(\"Greets, I remember from the Hobbit.\");Out.Ln;\n    ELSE\n      Out.String(\"Glad to meet you \");Out.String(s);Out.Ln;\n    END;\n```\n\n## ASSERT\n\nThe second expression, ASSERT, is a little different. If ASSERT\nevaluates an expression that is FALSE then your program is halted.\nThis is like combining an \"if EXPR is false then system exit\".\n\n```Oberon\n    Out.String(\"Should I continue? Y/n \");\n    In.Line(s);\n    Out.Ln;\n    ASSERT((s = \"Y\") OR (s = \"y\"));\n    (* If you didn't enter Y or y the program will halt *)\n```\n\n\n## WHILE DO, ELSIF DO\n\nOberon-07 also provides two loop structures. These are very \nsimilar to other languages as well. The only expectation is that\na while loop may contain an ELSIF which continues the loop\nexecution until both clauses return FALSE.\n\nThe basic while loop, counting 1 to 10.\n\n```Oberon\n    i := 0;\n    WHILE i < 10 DO\n       i := i + 1;\n       Out.Int(i, 1);Out.String(\" \");\n    END;\n```\n\nA while, elsif loop, counting 1 to 10, then 10 to 100 by 10.\n\n```Oberon\n    i := 0;\n    WHILE i < 10 DO\n       i := i + 1;\n       Out.Int(i, 1); Out.String(\" \");\n    ELSIF i < 100 DO\n       i := i + 10;\n       Out.Int(i, 1);Out.String(\" \");\n    END;\n```\n\n\n## FOR Loops\n\nThe FOR loop in Oberon is very similar to modern FOR loops.\nThe FOR loop increments an integer value with in a range.\nYou the default increments the start value by 1 but if a \nBY clause is included you can control how the increment value\nworks.\n\nRegular for loop, `i` is incremented by 1.\n\n```Oberon\n    FOR i := 1 TO 10 DO\n       Out.Int(i, 1);Out.String(\" \");\n    END;\n```\n\nUsing a BY clause incrementing `i` by 2.\n\n```Oberon\n    FOR i := 0 TO 20 BY 2  DO\n       Out.Int(i, 1);Out.String(\" \");\n    END;\n```\n\n\n## Putting it all together\n\nThe following [module](LoopsAndConditions.Mod) demonstrates\nthe conditional and loop syntax.\n\n```Oberon\n    MODULE LoopsAndConditions;\n      IMPORT In, Out;\n    \n    PROCEDURE IfElsifElseDemo;\n      VAR s : ARRAY 128 OF CHAR;\n    BEGIN\n      Out.String(\"Enter your name: \");\n      In.Line(s);\n      Out.Ln;\n      IF (s = \"Freda\") OR (s = \"Mojo\") THEN\n        Out.String(\"Wowie Zowie! I remember you from ZBS stories.\");Out.Ln;\n      ELSIF (s = \"Bilbo\") OR (s = \"Gandolf\") THEN\n        Out.String(\"Greets, I remember from the Hobbit.\");Out.Ln;\n      ELSE\n        Out.String(\"Glad to meet you \");Out.String(s);Out.Ln;\n      END;\n    END IfElsifElseDemo;\n    \n    PROCEDURE AssertDemo;\n      VAR s : ARRAY 128 OF CHAR;\n    BEGIN\n      Out.String(\"Should I continue? Y/n \");\n      In.Line(s);\n      Out.Ln;\n      ASSERT((s = \"Y\") OR (s = \"y\"));\n    END AssertDemo;\n    \n    PROCEDURE WhileDemo;\n      VAR i : INTEGER;\n    BEGIN\n      Out.String(\"Basic WHILE counting from 1 to 10\");Out.Ln;\n      i := 0;\n      WHILE i < 10 DO\n         i := i + 1;\n         Out.Int(i, 1);Out.String(\" \");\n      END;\n      Out.Ln;\n      Out.String(\"WHILE ELSIF, count 1 to 10 THEN 10 to 100\");Out.Ln;\n      i := 0;\n      WHILE i < 10 DO\n         i := i + 1;\n         Out.Int(i, 1); Out.String(\" \");\n      ELSIF i < 100 DO\n         i := i + 10;\n         Out.Int(i, 1);Out.String(\" \");\n      END;\n      Out.Ln;\n      Out.String(\"Demo of while loop counting one to ten, then by tenths.\");\n    END WhileDemo;\n    \n    PROCEDURE ForDemo;\n      VAR i : INTEGER;\n    BEGIN\n      Out.String(\"Basic FOR LOOP counting from 1 to 10\");Out.Ln;\n      FOR i := 1 TO 10 DO\n         Out.Int(i, 1);Out.String(\" \");\n      END;\n      Out.Ln;\n      Out.String(\"FOR loop counting by twos 1 to 20\");Out.Ln;\n      FOR i := 0 TO 20 BY 2  DO\n         Out.Int(i, 1);Out.String(\" \");\n      END;\n      Out.Ln;\n    END ForDemo;\n    \n    BEGIN\n      IfElsifElseDemo;\n      AssertDemo;\n      WhileDemo;\n      ForDemo;\n    END LoopsAndConditions.\n```\n\n\n### Next and Previous\n\n+ Next [Combining Oberon-07 and C with OBNC](../../05/01/Combining-Oberon-and-C.html)\n+ Previous [Basic Types](../18/Mostly-Oberon-Basic-Types.html)\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-04-19",
        "keywords": [
          "Oberon",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 4,
        "series": "Mostly Oberon",
        "title": "Oberon Loops and Conditions"
      },
      "url": "posts/2020/04/19/Mostly-Oberon-Loops-and-Conditions.json"
    },
    {
      "content": "\n\nOberon Modules and Procedures\n=============================\n\nBy R. S. Doiel, 2020-04-12\n\nThis is the second post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.\n\n## Modules\n\nThe module is a primary code unit of Oberon language. Modules allow you to focus on functional units of code and can be readily composed into larger solutions.\nA module's name should match the filename you are saving it under. A module starts with declaring it's name and ends the declaration with a semicolon\nthe statement separator in Oberon. Our simple \"Hello World\" example \nshows the basic code shape.\n\n\n~~~{.oberon}\n\n    MODULE HelloWorld;\n      IMPORT Out;\n    BEGIN\n      Out.String(\"Hello World!\"); Out.Ln;\n    END HelloWorld.\n\n~~~\n\n\nModules end with a `END` followed by the module's name and a period.\nAny text following the `END` statement is ignored by the compiler. This\nturns out to be very useful as a place to write up ideas about the code\nyou're working on. You can also write any additional special instructions \nthere (e.g. document usage). You can even use it as a scratch pad knowing \nthat the compiler will ignore it.\n\nHere's an example\n\n\n~~~{.oberon}\n\n    MODULE HelloWorld;\n      IMPORT Out;\n    BEGIN\n      Out.String(\"Hello World!\"); Out.Ln;\n    END HelloWorld.\n\n    This program isn't very useful. It has no interactive ability.\n    It'd be nice if it could be more specific about who it was saying\n    hello to.\n\n~~~\n\n\nFor a module to be really useful you want to have the capability\nof including both private and public code. Public code\nallows us to reuse our code in other modules while the private code \nkeeps internal things inside the module safe from colliding with other\nmodules private code. This technique is classically known as \n\"information hiding\" and in computer sciences texts as \"scope\". Lets \ncreate a a more composable module called `SayingHi.Mod`.  In \naddition to display \"Hello World!\" we want a public method \n(procedure in Oberon terminology) that can ask for a name and print \nout a salutation. We will use the `SayingHi.Mod` module along with \na newer version of `HelloWorld.Mod` named `HelloWorld2.Mod`.\n\n\n## Procedures\n\nHow do we write methods in Oberon?  Methods are declared\nusing the keyword `PROCEDURE` followed by their name, a \ndeclaration of any parameters and if the procedure returns a\nvalue (i.e. is a function) it also includes that declaration. \nNext we declare any internal variables needed by the procedure.\nThis is followed by the procedure's body.  The body of the \nprocedure is defined by a `BEGIN` and `END` statement structure. \nThe body contains the steps the procedure needs to execute.\n\nWe'll create a procedure called \"HelloWorld\" in our new module.\nSince we will use this procedure from our new `HelloWorld2.Mod` \nour new \"HelloWorld\" procedure needs to be public.  A public \nprocedure in `SayingHi.Mod` is available for use in our new \n`HelloWorld2.Mod` (or by another module).  Marking a procedure \npublic in Oberon is a little different than in other languages. \nA Module's procedure is public if its name ends with an asterisk. \nBelow is a sketch of our module `SayingHi.Mod` so far.\n\nNOTE: This technique is also used to mark variables, records and constants as public and available to other modules. Public variables are \"read only\" in other modules.\n\n\n~~~{.oberon}\n\n    MODULE SayingHi;\n      IMPORT Out;\n    \n      PROCEDURE HelloWorld*;\n      BEGIN\n        Out.String(\"Hello World!\"); Out.Ln;\n      END HelloWorld;\n    END SayingHi.\n\n~~~\n\n\nThis modules looks allot like `HelloWorld.Mod` with a couple key\ndifferences. Rather than relying on the module's begin and end \nstatements we declare a procedure with its own begin and end statements.\nNotice the procedures end statement includes the procedure name and\nis terminated by semicolon rather than a period.  Like `HelloWorld.Mod`\nwe import the `Out` module to display our greeting.\n\n## Putting it all together\n\nLet's create a new \"Hello World\" module called `HelloWorld2.Mod` and\nuse our `SayingHi` module instead of directly importing `Out`.\n\n\n~~~{.oberon}\n\n    MODULE HelloWorld2;\n      IMPORT SayingHi;\n    BEGIN\n      SayingHi.HelloWorld;\n    END HelloWorld2.\n\n~~~\n\n\nWe can compile our module with OBNC using the command\n\n\n~~~\n\n    obnc HelloWorld2.Mod\n\n~~~\n\n\nWe can run our new \"Hello World\" with the command\n\n\n~~~\n\n    ./HelloWorld2\n\n~~~\n\n\nAt this point we have a way of saying \"Hello World!\" whenever\nwe need in our Oberon programs. But just printing \"Hello World!\"\nto the screen isn't very interactive. It'd be nice if we could\nhave the computer ask our name and then respond with a greeting.\n\nWe'll modify our SayingHi to include a new procedure called \"Greetings\"\nand that procedure needs to ask us our name and then display\nan appropriate greeting. \"Greetings\" will be a public procedure\nmarked by an asterisk like \"HelloWorld\". \n\n\"Greetings\" has three tasks\n\n1. Ask politely for our name\n2. Get the name typed in with our keyboard\n3. Assemble and display a polite greeting\n\nTo keep our \"Greeting\" procedure short we'll split this\nup into some private procedures. These will not be available\noutside `SayingHi.Mod`. Here's a sketch of our improved module.\n\n\n~~~{.oberon}\n\n    MODULE SayingHi;\n      IMPORT In, Out;\n    \n      PROCEDURE HelloWorld*;\n      BEGIN\n        Out.String(\"Hello World!\"); Out.Ln;\n      END HelloWorld;\n    \n      PROCEDURE AskOurName;\n      BEGIN\n        Out.String(\"Excuse me, may I ask your name? \");\n      END AskOurName;\n    \n      PROCEDURE GetName(VAR ourName : ARRAY OF CHAR);\n      BEGIN\n        In.Line(ourName);\n      END GetName;\n    \n      PROCEDURE AssembleGreeting(ourName : ARRAY OF CHAR);\n      BEGIN\n        Out.String(\"Hello \");Out.String(ourName);\n        Out.String (\", very nice to meeting you.\"); Out.Ln;\n      END AssembleGreeting;\n    \n      PROCEDURE Greetings*;\n        VAR ourName : ARRAY 256 OF CHAR;\n      BEGIN\n        AskOurName;\n        GetName(ourName);\n        AssembleGreeting(ourName);\n      END Greetings;\n    END SayingHi.\n\n~~~\n\n\nNow let's add our Greetings procedure to `HelloWorld2.Mod`.\n\n\n~~~{.oberon}\n\n    MODULE HelloWorld2;\n      IMPORT SayingHi;\n    BEGIN\n      SayingHi.HelloWorld;\n      SayingHi.Greetings;\n    END HelloWorld2.\n\n~~~\n\n\nWe compile and run it the same way as before\n\n\n~~~\n\n    obnc HelloWorld2\n    ./HelloWorld2\n\n~~~\n\n\nWhen you run `HelloWorld2` you should now see something like\n(I've answered \"Robert\" and pressed return after the second line.\n\n\n~~~\n\n   Hello World!\n   Excuse me, may I ask your name? Robert\n   Hello Robert, very nice to meeting you.\n\n~~~\n\n\n\n## Reading our code\n\nWhile our revised modules are still short they actually exercise\na number of language features. Let's walk through the code \nblock by block and see what is going.\n\n`HelloWorld2.Mod` is responsible for the general management of\nour program namely say \"Hello World!\" and also for initiating\nand responding with a more personal greeting.  It does this by\nfirst importing our `SayingHi.Mod` module.\n\n\n~~~\n\n    IMPORT SayingHi;\n\n~~~\n\n\n[HelloWorld2.Mod](HelloWorld2.Mod) doesn't have any of its own \nprocedures and like our original [HelloWorld.Mod](HelloWorld.Mod)\nrelies on the module's initialization block to run our two public \nprocedures from `SayingHi`. It calls first `SayingHi.HelloWorld;` \nthen `SayingHi.Greetings'` before existing. Other than using the \n`SayingHi` module it is similar in spirit to our first \n[HelloWorld.Mod](HelloWorld.Mod).\n\nOur second module [SayingHi.Mod](SayingHi.Mod) does the heavy lifting.\nIt contains both public and private procedures.  If you tried to\nuse `GetName` from `SayingHi` in `HelloWorld2.Mod` you would get a\ncompiler error. As far as `HelloWorld2.Mod` is concerned `GetName`\ndoes not exist. This is called information hiding and is an important\ncapability provided by Oberon's Modules system. \n\n### explore `SayingHi` more deeply\n\nIn `SayingHi.Mod` we introduce two important concepts.\n\n1. Public and Private procedures\n2. variables to hold user input\n\n`SayingHi.Mod` imports two module, `In` which is for getting\ntext input from the keyboard, and `Out` which is used for displaying\ntext to standard output.\n\n\n~~~{.oberon}\n\n    IMPORT In, Out;\n\n~~~\n\n\n`In` and `Out` are to modules you will commonly use to either\nreceive input (`In`) from the keyboard or display output (`Out`)\nto the terminal or shell. They provide simple methods for working\nwith variables and constants and built-in Oberon data types. \nThis is a very useful as it lets us focus our procedures\non operating on data rather than the low level steps needed to\ninteract with the operating system and hardware.\n\nNOTE: __basic types__, Oberon has a number of basic types, BYTE holds a byte as a series of bit, CHAR holds a single ASCII character, INTEGER holds a signed integer value, REAL holds a floating point number and BOOLEAN holds a True/False value.\n\nThe first procedure is `HelloWorld` and it's pretty straight forward.\nIt displays a \"Hello World!\" message in our terminal. It uses `Out`.\n`Out.String` to display the \"Hello World!\" and `Out.Ln` to force a new\nline. `Out.String` is responsible for displaying values that are of type\n`ARRAY OF CHAR`. This includes text we provided in double quotes.\n\n\n~~~{.oberon}\n\n    PROCEDURE HelloWorld*;\n    BEGIN\n      Out.String(\"Hello World!\"); Out.Ln;\n    END HelloWorld;\n\n~~~\n\n\nThe notable thing about `HelloWorld*` is its annotation `*`.\nThis asterisk indicates to the compiler that this is\na public procedure and should be made available to other modules.\nProcedures, variables, constants, records (data structures) can be\nmade public with this simple annotation.  If we left off the `*`\nthen we would not be able to use `HelloWorld` procedure from other\nmodule.\n\nOur second procedure is `AskOurName`. It's private because it lacks\nthe `*`. It is invisible to `HelloWorld2.Mod`. It is visible within\n`SayingHi` module and we'll use it later in `Greetings*`. Before\na procedure, variable, constant or record can be used it must be\ndeclared. That is why we most define `AskOurName` before we define\n`Greetings*`. `AskOurName` is in other respects very similar to \n`HelloWorld*`.\n\n\n~~~{.oberon}\n\n    PROCEDURE AskOurName;\n    BEGIN\n      Out.String(\"Excuse me, may I ask your name? \");\n    END AskOurName;\n\n~~~\n\n\nOur third procedure `GetName` is a little more interesting.\nIt demonstrates several features of the Oberon language. Most\nobvious is that it is the first procedure which contains a\nparameter list.\n\n\n~~~{.oberon}\n\n    PROCEDURE GetName(VAR ourName: ARRAY OF CHAR);\n\n~~~\n\n\nThere is allot packed in this single statement in addition\nto putting a name to our procedure. Specifically it uses\na `VAR` in the parameter.  Oberon provides two kinds of parameters\nin declaring procedures. The two are `VAR` and static.  A `VAR` \nparameter means that the procedure is allowed to up date the value \nin the memory location indicated by the name. A static variable \n(a parameter without the `VAR` prefix passes in a read only value. \nThis allows us to distinguish between those procedures and variables\nwhere that can be modified by the procedure and those which\nwill be left the same. Inside of `GetName` we call the \n`In` module using the `Line`. This retrieves a line of text\n(a sequence of keyboard strokes ended with the return key).\n\n\n~~~{.oberon}\n\n    In.Line(ourName);\n\n~~~\n\n\nBecause `ourName` was a variable parameter in `GetName` it\ncan be modified by `In.Line`.\n\nOur next procedure `AssembleGreeting` is private like\n`AskOurName` and `GetName`. Like `HelloWorld*` and `AskOurName`\nit makes use of the `Out` module to display content.\nUnlike `HelloWorld*` it has a parameter but this time\na static one. Notice the missing `VAR`. This indicates that\n`AssembleGreeting` doesn't modify, cannot modify `ourName`.\n\n\n~~~{.oberon}\n\n    PROCEDURE AssembleGreeting(ourName : ARRAY OF CHAR);\n    BEGIN\n      Out.String(\"Hello \");Out.String(ourName);\n      Out.String (\", very nice to meeting you.\"); Out.Ln;\n    END AssembleGreeting;\n\n~~~\n\n\nThe use of `Out.String` is more elaborate then before. Notice how\nwe use trailing spaces to make the output more readable.\n\nOur final procedure is public, `Greetings*`. It does not\nhave any parameters.  Importantly it does include a\nvariable for use inside the procedure called `ourName`. \nThe `VAR` line declares `ourName` as an `ARRAY 256 OF CHAR`. \nThis declaration tells the compiler to allocate memory \nfor storing `ourName` while `Greetings*` is being executed. \nThe declaration tells us three things. First the storage\nis continuous block of memory, that is what `ARRAY` means.\nThe second is the size of this memory block is 256 `CHAR`\nlong and the that we will be storing `CHAR` values in it.\n\nThe memory for `ourName` will be populated when we pass\nthe variable to `GetName` based on what we type at the\nkeyboard. If we type more than 256 ASCII characters they\nwill be ignored. After `GetName` records the typed character\nwe use the memory associated with the `ourName` variable\nwe read that memory to display what we typed in \nthe procedure named `AssembleGreeting`.\n\n\n### Going a little deeper\n\nOberon is a typed language meaning that \nvariables are declared, allocated and checked during compile time\nfor specific characteristics. The one variable we created `ourName`\nin the `Greetings` procedure reserves the space for 256 \n[ASCII](https://en.wikipedia.org/wiki/ASCII) characters. \nIn Oberon we call a single ASCII character a `CHAR`.  Since it\nwould be useful to work with more than one `CHAR` in relationship\nto others Oberon also supports a variable type called `ARRAY`. \nAn `ARRAY` is represented as a block of memory that is allocated\nby the Oberon run time. Because it is allocated ahead of time we\nneed to know its size (i.e. how many `CHAR` are we storing). In\nour case we have declared `ARRAY 256 OF CHAR`. That means we can\nhold names up to 256 ASCII characters. \n\n`Greetings*` does three things and the second thing, `GetName` \nreceives the characters typed at the keyboard.  `GetName` has\na parameter list. In this case the only one parameter is declared\n`VAR ourName : ARRAY OF CHAR`. Notice the similarity and\ndifference between the `VAR` statement in `Greetings` versions\nthe parameter list.  Our `GetName` can accept **any** length of\n`ARRAY OF CHAR` and it **only** can accept an `ARRAY OF CHAR`.\nIf you try to pass another type of variable to `GetName` the\ncompiler will stop with an error message.\n\nWhy is this important?\n\nWe've minimized the memory we've used in our program.  Memory is \ntypically allocated on the stack (a block of memory made available \nby the operating system to the program). We've told the operating \nsystem we need 256 `CHAR` worth of consecutive memory locations \nwhen we allocated room the variable `ourName` in `Greetings`. When \nwe invoke `GetName` Oberon knows to use that same memory location \nfor the value of `ourName` defined in the parameter.  In turn\nwhen `In.String(ourName);` is called the module `In` knows\nto store the name typed on the keyboard in that location of memory.\nWhen `Out.String(outName);` is called the compiler knows to use\nthe same location of memory to send the contents to the display.\nWhen we finally finish the `Greetings*` procedure the memory is \nreleased back to the operating system for re-use by this or\nother programs.\n\n### What we've explored\n\n1. Using a module to break down a simple problem\n2. Using a module's ability to have public and private procedures \n3. Touched on how memory is used in a simple interactive program\n\n\n\n### Next and Previous\n\n+ Next [Basic Types](../18/Mostly-Oberon-Basic-Types.html)\n+ Previous [Mostly Oberon](../11/Mostly-Oberon.html)\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-04-12",
        "keywords": [
          "Oberon",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 2,
        "series": "Mostly Oberon",
        "title": "Oberon Modules and Procedures"
      },
      "url": "posts/2020/04/12/Mostly-Oberon-Modules.json"
    },
    {
      "content": "\n\n# Oberon-07 and the file system\n\nBy R. S. Doiel, 2020-05-09 (updated: 2021-10-29)\n\nThis is the seventh post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.\n\n## Working with files in Oberon-07\n\nIn a POSIX system we often talk of opening files,\nwriting and reading files and close files. The Oberon\nlanguage reflects a more Oberon System point of view.\n\nThe Oberon System generally avoids modality in favor\nof action. Modality is where a context must be set\nbefore a set of actions are possible. The `vi` \ntext editor is a \"modal\" editor. You are in either\nedit (typing) mode or command mode. At the function\nlevel POSIX's `open()`, is also modal. You can \nopen a file for reading, open a file for writing,\nyou can open a file for appending, etc. The Oberon\nlanguage and base modules avoids modality.\n\nThe Oberon System is highly interactive but\nhas a very different idea about code, data and computer\nresources. In POSIX the basic unit of code is a program\nand the basic unit of execution is a program. In Oberon\nthe basic unit of code is the module and the basic unit\nof execution is the procedure.  Modules are brought into \nmemory and persist. As a result it is common in \nthe Oberon System to need to have file representations \nthat can persist across procedure calls. It provides\na set of abstractions that are a little bit like views\nand cursors found in database systems. In taking\nthis approach Oberon language eschews modality at the\nprocedure level. \n\nNOTE: Modules can be explicitly unload otherwise they persist until the computer is turned off\n\n## Key Oberon Concepts\n\nThe following are exported in the `Files` module.\n\nFile\n: is a handle to the representation of a file, a File and Rider form a view into a file.\n\nRider\n: similar to a database cursor, it is the mechanism that lets you navigate in a file\n\nNew\n: Creates a new file (in memory but not on disc).\n\nRegistration\n: Associates a file handle created with New with the file system. A file must be registered to persist in the file system.\n\nOld\n: Opens an existing file for use.\n\nSet\n: Set the position of a rider in a file\n\nPos\n: Gets the position of a rider in a file\n\nClose\n: Writes out unwritten buffers in file to disc, file handle is still value as is the rider.\n\nPurge\n: Sets a file's length to zero.\n\nDelete\n: Unregister the filename with the file system.\n\nIn the Oberon Systems a file can be \"opened\" many\ntimes with only one copy maintained in memory. This allows\nefficient operations across a module's procedures.\nLikewise a file can have one or more Riders associated with\nit. Each rider can move through the file independently operating on\nthe common in memory file. If a file is created with `New` but\nnot registered it can be treated like an in-memory temp file.\nClosing a file writes its buffers but the file remains accessible\nthrough it handle and riders. If a file is not modified it\ndoesn't need to be closed.\n\nIn POSIX we generally want to explicitly close the file when\nwe're through. In the Oberon language we only need to close\na file if we've modified it.\n\nThe behavior of files and riders in Oberon creates interesting\nnuances around deleting files.  The Delete operation can in\nprinciple happen multiple times before the file is deleted on\ndisc.  That is because the file handles and riders may still\nbe operating on it.  To know when a file is finally deleted \nwhen `Delete` procedure is called it includes a results\nparameter. When that value is set to zero by the `Delete`\nprocedure you know your file has been deleted.\n\nThe `Files` module provides a number of methods\nto read and write basic Oberon types. These use the rider\nrather than the file handle. Calling them automatically\nupdates the riders position. The procedures themselves\nmap to what we've seen in the modules `In` and `Out`.  \nThere are a few additional commands for file system house \nkeeping such as `Length`, `GetDate`, `Base`.\nSee the OBNC documentation for the `Files` module for\ndetails <https://miasap.se/obnc/obncdoc/basic/Files.def.html>.\n\nIn the following examples we'll be using the `Files`\nmodule to create, update and delete a file called \n`HelloWorld.txt`.\n\n### Creating a file\n\nThe recipe we want to follow for creating a file is\nNew (creates an empty file in memory), Register\n(associations the filename with the file system), \nSet the rider position, with the rider write our\ncontent and with the file call close because we've\nhave changed the file.\n\nLike our origin `SayingHi` we'll demonstrate this code\nin a new module called `TypingHi.Mod`. Below is\na procedure called `WriteHelloWorld`. It shows how\nto create, write and close the new file called\n\"HelloWorld.txt\".\n\n\n~~~\n\n  PROCEDURE WriteHelloWorld;\n    VAR\n      (* Define a file handle *)\n      f : Files.File;\n      (* Define a file rider *)\n      r : Files.Rider;\n  BEGIN\n    (* Create our file, New returns a file handle *)\n    f := Files.New(\"HelloWorld.txt\");\n    (* Register our file with the file system *)\n    Files.Register(f);\n    (* Set the position of the rider to the beginning *)\n    Files.Set(r, f, 0);\n    (* Use the rider to write out \"Hello World!\" *)\n    Files.WriteString(r, \"Hello World!\");\n    (* Write a end of line *)\n    Files.Write(r, 10);\n    (* Close our modified file *)\n    Files.Close(f);\n  END WriteHelloWorld;\n\n~~~\n\n\n#### Receipt in review\n\n+ New, creates our file\n+ Register, associates the file handle with the file system \n+ Set initializes the rider's position\n+ WriteString, writes our \"Hello World!\" to the file\n+ Close, closes the file, flushing unwritten content to disc\n\n\n### Working with an existing file\n\nIf we're working with an existing file we swap `New` for \na procedure named `Old`. We don't need to register the\nfile because it already exists.  We still need to set\nour rider and we want to read back the string we previously wrote.\nWe don't need to close it because we haven't\nmodified it. To demonstrate a new procedure is added to\nour module called `ReadHelloWorld`.\n\n\n~~~\n\n  PROCEDURE ReadHelloWorld;\n    VAR\n      f : Files.File;\n      r : Files.Rider;\n      (* We need a string to store what we have read *)\n      src : ARRAY 256 OF CHAR;\n  BEGIN\n    (* Create our file, New returns a file handle *)\n    f := Files.Old(\"HelloWorld.txt\");\n    (* Set the position of the rider to the beginning *)\n    Files.Set(r, f, 0);\n    (* Use the rider to write out \"Hello World!\" *)\n    Files.ReadString(r, src);\n    (* Check the value we read, if it is not the name, \n       halt the program with an error *)\n    ASSERT(src = \"Hello World!\");\n  END ReadHelloWorld;\n\n~~~\n\n\n#### Receipt in review\n\n+ Old, gets returns a file handle for an existing file\n+ Set initializes the rider's position\n+ ReadString, read our \"Hello World!\" string from the file\n+ Check the value we read with an ASSERT\n\n### Removing a file\n\nDeleting the file only requires knowing the name of the file.\nLike in `ReadHelloWorld` we'll use the built-in ASSERT\nprocedure to check if the file was successfully removed.\n\n\n~~~\n\n  PROCEDURE DeleteHelloWorld;\n    VAR\n      result : INTEGER;\n  BEGIN\n    (* Delete our file *)\n    Files.Delete(\"HelloWorld.txt\", result);\n    (* Check our result, if not zero then halt program with error *)\n    ASSERT(result = 0);\n  END DeleteHelloWorld;\n\n~~~\n\n\n#### Receipt in review\n\n+ Delete the file setting a result value\n+ Check the value with ASSERT to make sure it worked\n\n## Putting it all together.\n\nHere is the full listing of our module.\n\n\n~~~\n\n    MODULE TypingHi;\n      IMPORT Files;\n    \n      PROCEDURE WriteHelloWorld;\n        VAR\n          (* Define a file handle *)\n          f : Files.File;\n          (* Define a file rider *)\n          r : Files.Rider;\n      BEGIN\n        (* Create our file, New returns a file handle *)\n        f := Files.New(\"HelloWorld.txt\");\n        (* Register our file with the file system *)\n        Files.Register(f);\n        (* Set the position of the rider to the beginning *)\n        Files.Set(r, f, 0);\n        (* Use the rider to write out \"Hello World!\" *)\n        Files.WriteString(r, \"Hello World!\");\n        (* Write a end of line *)\n        Files.Write(r, 10);\n        (* Close our modified file *)\n        Files.Close(f);\n      END WriteHelloWorld;\n    \n      PROCEDURE ReadHelloWorld;\n        VAR\n          f : Files.File;\n          r : Files.Rider;\n          (* We need a string to store what we have read *)\n          src : ARRAY 256 OF CHAR;\n      BEGIN\n        (* Create our file, New returns a file handle *)\n        f := Files.Old(\"HelloWorld.txt\");\n        (* Set the position of the rider to the beginning *)\n        Files.Set(r, f, 0);\n        (* Use the rider to write out \"Hello World!\" *)\n        Files.ReadString(r, src);\n        (* Check the value we read, if it is not the name, \n           halt the program with an error *)\n        ASSERT(src = \"Hello World!\");\n      END ReadHelloWorld;\n    \n      PROCEDURE DeleteHelloWorld;\n        VAR\n          result : INTEGER;\n      BEGIN\n        (* Delete our file *)\n        Files.Delete(\"HelloWorld.txt\", result);\n        (* Check our result, if not zero then halt program with error *)\n        ASSERT(result = 0);\n      END DeleteHelloWorld;\n    \n    BEGIN\n        WriteHelloWorld();\n        ReadHelloWorld();\n        DeleteHelloWorld();\n    END TypingHi.\n\n~~~\n\n## Post Script, 2021-10-29\n\nOn October 29, 2021 I had an email conversation with Jules. It pointed out a problem in this implementation of Hello World.  I had incorrectly coded the end of line with `Files.WriteString(r, 0AX);` this is wrong.  At best it should have been `Files.Write(r, 10);`. There remains an issues with `Files.WriteString(\"Hello World!\");`. The Oakwood module `Files` defines \"WriteString\" to include the trailing NULL character. This will be output in the file. It all depends on how close to the Oakwood specification that your compiler implements the `Files` module.\n\n\n\n### Next and Previous\n\n+ Next [Dynamic Types](../25/Dynamic-types.html)\n+ Previous [Compiling OBNC on macOS](../06/Compiling-OBNC-on-macOS.html)\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-05-09",
        "keywords": [
          "Oberon",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 7,
        "series": "Mostly Oberon",
        "title": "Oberon-07 and the file system",
        "updated": "2021-10-29"
      },
      "url": "posts/2020/05/09/Oberon-07-and-the-filesystem.json"
    },
    {
      "content": "\n\n# Combining Oberon-07 and C with OBNC\n\nBy R. S. Doiel, 2020-05-01\n\nThis is the fifth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html)\nseries. Mostly Oberon documents my exploration of the Oberon\nLanguage, Oberon System and the various rabbit holes I will\ninevitably fall into.\n\nIn my day job I write allot of code in Go and\norchestration code in Python.  It's nice having\nthe convenience of combining code written one\nlanguage with an another.  You can do the same\nwith [OBNC](https://miasap.se/obnc/).  The OBNC\ncompiler supports inclusion of C code in a\nstraight forward manner. In fact Karl's compiler\nwill generate the C file for you!\n\nIn learning how to combine C code and Oberon-07\nI started by reviewing Karl's [manual page](https://miasap.se/obnc/man/obnc.txt).\nThe bottom part of that manual page describes\nthe steps I will repeat below. The description\nsounds more complicated but when you walk through\nthe steps it turns out to be pretty easy.\n\n## Basic Process\n\nCreating a C extension for use with OBNC is very\nstraight forward.\n\n1. Create a Oberon module with empty exported procedures\n2. Create a Oberon test module that uses your module\n3. Compile your test module with OBNC\n4. Copy the generated module `.c` file to the same directory as your Oberon module source\n5. Edit the skeleton `.c`,  re-compile and test\n\nFive steps may sound complicated but in practice is\nstraight forward.\n\n## Fmt, an example\n\nIn my demonstration of Karl's instructions I will be\ncreating a module named `Fmt` that includes two\nprocedures `Int()` and `Real()` that let you use\na C-style format string to format an INTEGER\nor REAL as an ARRAY OF CHAR. We retain the idiomatic\nway Oberon works with types but allow a little more\nflexibility in how the numbers are converted and\nrendered as strings.\n\n### Step 1\n\nCreate [Fmt.Mod](Fmt.Mod) defining two exported procedures\n`Int*()` and `Real*()`. The procedures body should be\nempty. Karl's practice is to use exported comments to\nexplain the procedures.\n\n\n~~~ {.oberon}\n\n    MODULE Fmt;\n\n    \tPROCEDURE Int*(value : INTEGER; fmt: ARRAY OF CHAR;\n                       VAR dest : ARRAY OF CHAR);\n    \tEND Int;\n\n    \tPROCEDURE Real*(value : REAL; fmt: ARRAY OF CHAR;\n                        VAR dest : ARRAY OF CHAR);\n    \tEND Real;\n\n    BEGIN\n    END Fmt.\n\n~~~\n\n\n### Step 2\n\nCreate a test module, [FmtTest.Mod](FmtTest.Mod), for\n[Fmt.Mod](Fmt.Mod).\n\n\n~~~ {.oberon}\n\n    MODULE FmtTest;\n      IMPORT Out, Fmt;\n\n    PROCEDURE TestInt(): BOOLEAN;\n      VAR\n        fmtString : ARRAY 24 OF CHAR;\n        dest : ARRAY 128 OF CHAR;\n        i : INTEGER;\n    BEGIN\n        i := 42;\n        fmtString := \"%d\";\n        Fmt.Int(i, fmtString, dest);\n        Out.String(dest);Out.Ln;\n        RETURN TRUE\n    END TestInt;\n\n    PROCEDURE TestReal(): BOOLEAN;\n      VAR\n        fmtString : ARRAY 24 OF CHAR;\n        dest : ARRAY 128 OF CHAR;\n        r : REAL;\n    BEGIN\n        r := 3.145;\n        fmtString := \"%d\";\n        Fmt.Real(r, fmtString, dest);\n        Out.String(dest);Out.Ln;\n        RETURN TRUE\n    END TestReal;\n\n    BEGIN\n      ASSERT(TestInt());\n      ASSERT(TestReal());\n      Out.String(\"Success!\");Out.Ln;\n    END FmtTest.\n\n~~~\n\n\n### Step 3\n\nGenerate a new [Fmt.c](Fmt.c) by using the\nOBNC compiler.\n\n\n~~~ {.shell}\n\n    obnc FmtTest.Mod\n    mv .obnc/Fmt.c ./\n\n~~~\n\n\nthe file `.obnc/Fmt.c` is your C template file. Copy it\nto the directory where Fmt.Mod is.\n\n### Step 4\n\nUpdate the skeleton `Fmt.c` with the necessary C code.\nHere's what OBNC generated version.\n\n\n~~~ {.c}\n\n    /*GENERATED BY OBNC 0.16.1*/\n\n    #include \"Fmt.h\"\n    #include <obnc/OBNC.h>\n\n    #define OBERON_SOURCE_FILENAME \"Fmt.Mod\"\n\n    void Fmt__Int_(OBNC_INTEGER value_, const char fmt_[], \n                   OBNC_INTEGER fmt_len, char dest_[], \n                   OBNC_INTEGER dest_len)\n    {\n    }\n\n\n    void Fmt__Real_(OBNC_REAL value_, const char fmt_[],\n                    OBNC_INTEGER fmt_len, char dest_[],\n                    OBNC_INTEGER dest_len)\n    {\n    }\n\n\n    void Fmt__Init(void)\n    {\n    }\n\n~~~\n\n\nHere's the skeleton revised with do what we need to be done.\n\n\n~~~ {.c}\n\n    #include \".obnc/Fmt.h\"\n    #include <obnc/OBNC.h>\n    #include <stdio.h>\n\n    #define OBERON_SOURCE_FILENAME \"Fmt.Mod\"\n\n    void Fmt__Int_(OBNC_INTEGER value_, \n                   const char fmt_[], OBNC_INTEGER fmt_len,\n                   char dest_[], OBNC_INTEGER dest_len)\n    {\n        sprintf(dest_, fmt_, value_);\n    }\n\n\n    void Fmt__Real_(OBNC_REAL value_, const char fmt_[],\n                    OBNC_INTEGER fmt_len, char dest_[],\n                    OBNC_INTEGER dest_len)\n    {\n        sprintf(dest_, fmt_, value_);\n    }\n\n\n    void Fmt__Init(void)\n    {\n    }\n\n~~~\n\n\nNOTE: You need to change the path for the `Fmt.h` file reference.\nI also add the `stdio.h` include so I have access to the C\nfunction I wish to use. Also notice how OBNC the signature\nfor the functions use the `_` character to identify mapped values\nas well as the char arrays being provided with a length parameter.\nIf you are doing more extensive string work you'll want to take\nadvantage of these additional parameters so insure that the\nas strings are terminated properly for Oberon's reuse.\n\n\n### Step 5\n\nRecompile and test.\n\n\n~~~ {.shell}\n\n    obnc FmtTest.Mod\n    ./FmtTest\n\n~~~\n\n\n### Next and Previous\n\n+ Next [Compiling OBNC on macOS](../06/Compiling-OBNC-on-macOS.html)\n+ Previously [Oberon Loops and Conditions](../../04/19/Mostly-Oberon-Loops-and-Conditions.html)\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-05-01",
        "keywords": [
          "Oberon",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 5,
        "series": "Mostly Oberon",
        "title": "Combining Oberon-07 and C with OBNC"
      },
      "url": "posts/2020/05/01/Combining-Oberon-and-C.json"
    },
    {
      "content": "\nCompiling OBNC on macOS \n=======================\n\nBy R. S. Doiel, 2020-05-06\n\nThis is the sixth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.\n\nCompiling OBNC v0.16.1 on macOS (10.13.6) using MacPorts (2.6.2) \nis straight forward if you have the required dependencies and \nenvironment setup up. Below are my notes to get everything working.\n\n## Prerequisites\n\n+ OBNC v0.16.1\n+ SDL v1.2\n+ Boehm-Demers-Weiser GC\n+ A C compiler and linker (OBNC uses this to generate machine specific code)\n\n### SDL 1.2\n\nMacPorts has libsdl 1.2 available as a package called \"libsdl\"\n(not surprisingly). There are other versions of the SDL available\nin ports but this is the one we're using.\n\n\n~~~\n\n   sudo port install libsdl\n\n~~~\n\n\n### The Boehm-Demers-Weiser GC\n\nYou need to install the Boehm-Demers-Weiser GC installed. Using\nMacPorts it is almost as easy as installing under Debian. The\npackage is less obviously named than under Debian. The package\nyou want is \"beohmgc\".\n\n\n~~~\n\n    sudo port install boehmgc\n\n~~~\n\n\nMore info on the GC.\n\n+ [The Boehm-Demers-Weiser GC](https://www.hboehm.info/gc/)\n+ [MacPorts page](https://ports.macports.org/port/boehmgc/summary)\n\n### C compiler and linker\n\nXCode is provides a C compiler and linker. That is what is installed on my\nmachine. It can be a bit of a pain at times with obscure errors, particularly with regards to the linker. Your milleage may very. I know you can\ninstall other C compilers (e.g. Clang) but I haven't tried them yet.\n\n## Setting up my environment\n\nYou need to update your CC variables to find the header and\nshared library files for compilation of obnc with `build`. (I added\nthese to my `.bash_profile`). New Macs ships with zsh and\nyour settings might be in a different location. MacPorts puts \nits libraries under the `/opt/local` directory.\n\n\n~~~\n\n    export C_INCLUDE_PATH=\"/usr/include:/usr/local/include:/opt/local/include\"\n    export LIBRARY_PATH=\"/usr/lib:/usr/local/lib:/opt/local/lib\"\n    export LD_LIBRARY_PATH=\"/usr/lib:/usr/local/lib:/opt/local/lib\"\n\n~~~\n\n\n## OBNC environment variables\n\nThis follows' Karl's docs.  Additionally if you install OBNC extlib so\nyou can do POSIX shell programs you'll need to set your\n`OBNC_IMPORT_PATH` environment.  An example of including a default\ninstall location and local home directory location.\n\n\n~~~\n\n    export OBNC_IMPORT_PATH=\"/usr/local/lib/obnc:$HOME/lib/obnc\"\n\n~~~\n\n\n### Next and Previous\n\n+ Next [Oberon-07 and the file system](../09/Oberon-07-and-the-filesystem.html)\n+ Previous [Combining Oberon-07 and C](../01/Combining-Oberon-and-C.html)\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-05-06",
        "keywords": [
          "Oberon",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 6,
        "series": "Mostly Oberon",
        "title": "Compiling OBNC on macOS"
      },
      "url": "posts/2020/05/06/Compiling-OBNC-on-macOS.json"
    },
    {
      "content": "\n\n# Dynamic types\n\nBy R. S. Doiel, 2020-05-25\n\nThis is the eighth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html)\nseries. Mostly Oberon documents my exploration of the Oberon Language, \nOberon System and the various rabbit holes I will inevitably fall into.\n\n## Dynamic Types in Oberon\n\nOberon-07 is a succinct systems language. It provides a minimal\nbut useful set of basic static types. Relying on them addresses \nmany common programming needs. The Oberon compiler ensures \nstatic types are efficiently allocated in memory. One of the \nstrengths of Oberon is this ability to extend the type system. \nThis means when the basic types fall short you can take \nadvantage of Oberon's type  extension features. This includes \ncreating dynamically allocated data structures. In Oberon-07 \ncombining Oberon's `POINTER TO` and `RECORD` types allows us to\ncreate complex and dynamic data structures. \n\n\n## An example, dynamic strings \n\nStrings in Oberon-07 are typical declared as an `ARRAY OF CHAR` \nwith a specific length. If the length of a string is not \nknown a head of time this presents a challenge. One approach is \nto declare a long array but that would allocate allot of memory \nwhich may not get used. Another approach is to create a dynamic\ndata structure. An example is using a linked list of shorter \n`ARRAY OF CHAR`.  The small fixed strings can combine to \nrepresent much larger strings. When one fills up we add \nanother. \n\n### Pointers and records, an Oberon idiom \n\nOur data model is a pointer to a record where the record \ncontains an `ARRAY OF CHAR` and a pointer to the next record. \nA common idiom in Oberon for dynamic types is to declare a \n`POINTER TO` type and declare a `RECORD` type which contains\nthe `POINTER TO` type as an attribute.  If you see this idiom \nyou are looking at some sort of dynamic data structure. The \npointer type is usually named for the dynamic type you want \nwork with and the record type is declared using the same name \nwith a \"Desc\" suffix. In our case `DynamicString` will be the \nname of our `POINTER TO` type and our record type will be \ncalled `DynamicStringDesc` following the convention.  In our \nrecord structure we include a \"value\" to holding a short \nfixed length `ARRAY OF CHAR`  and a \"next\" to holding the \npointer to our next record.\n\nIn our record the value is declared as a static type. We need\nto know how long our \"short\" string should be? I.e. What length\nis our `ARRAY OF CHAR`? It's a question of tuning. If it is too \nshort we spend more time allocating new records, too long and \nwe are wasting memory in each record. A way to make tuning a \nlittle simpler is to use a constant value to describe our array \nlength. Then if we decide our array is too big \nor too small we can adjust the constant knowing that our record \nstructure and the procedures that use that the length \ninformation will continue to work correctly. \n\nLet's take a look at actual code (NOTE: vSize is our constant value). \n\n~~~\n\n    CONST\n      vSize = 128; \n    \n    TYPE\n      DynamicString* = POINTER TO DynamicStringDesc;\n      DynamicStringDesc* = RECORD \n        value : ARRAY vSize OF CHAR; \n        next : DymamicString; \n      END;\n\n~~~\n\nNOTE: Both `DynamicString` and `DynamicStringDesc` are defined \nusing an `*`. These are public and will be available \nto other modules.  Inside our record `DynamicStringDesc` we \nhave two private to our module attributes, `.value` and \n`.next`. They are private so that we can change our \nimplementation in the future without requiring changes in \nmodules that use our dynamic strings. Likewise our constant `vSize`\nis private as that is an internal implementation detail. This\npractice is called information hiding.\n\nNOTE: The asterisk in Oberon decorates procedures, types, variables\nand constants that are \"public\" to other modules.\n\nNOTE: Variables are always exported read only.\n\nNOTE: With information hiding some details of implementation allow us \nto keep a clean division between implementation inside the module and how\nthat implementation might be used. With out information hiding we often\nhave \"leaky\" abstractions that become brittle and hard to maintain and\nrely on.\n\n\n\n## Working with DynamicString\n\nOur type definitions describe to the compiler how to layout our \ndata in memory. The type system in Oberon-07 also ensures that \naccess to that memory is restricted to assignments, operations \nand procedures compatible with that type. To be useful from \nother modules we need a few procedures to help work with\nthis new data type. What follows is a minimal set needed to be \nuseful.\n\n### `New*(VAR str : DynamicString)`\n\n`New` will initialize a DynamicString object setting `.value` to \nan empty string. \n\n\n~~~\n\n  PROCEDURE New*(VAR str : DynamicString);\n  BEGIN NEW(str);\n    str.value := \"\"; \n    str.next := NIL;\n  END New;\n\n~~~\n\n\n### `Set*(VAR str : DynamicString; source : ARRAY OF CHAR)` \n\n`Set` copies an `ARRAY OF CHAR` into an existing DynamicString. \nThis requires that we add and link additional records if the \n`source` is longer than our current dynamic string. Set is a \nbridge procedure between an existing datatype, `ARRAY OF CHAR` \nand our new data type, `DynamicString`.\n\n\n~~~\n\n  PROCEDURE Set*(VAR str : DynamicString; source : ARRAY OF CHAR); \n    VAR cur, next : DynamicString; tmp : ARRAY vSize OF CHAR; \n        i, l : INTEGER;\n  BEGIN cur := str; cur.value := \"\";\n    l := Strings.Length(source);\n    i := 0; \n    WHILE i < l DO\n      Strings.Extract(source, i, i + vSize, tmp);\n      Strings.Append(tmp, cur.value);\n      i := i + Strings.Length(tmp);\n      IF (i < l) THEN\n        IF cur.next = NIL THEN\n          New(next); cur.next := next;\n        END;\n        cur := cur.next;\n      END; \n    END;\n  END Set;\n\n~~~\n\n### `ToCharArray*(str : DynamicString; VAR dest : ARRAY OF CHAR; VAR ok : BOOLEAN)`\n\n`ToCharArray` copies the contents of our dynamic string into an array \nof char setting `ok` to TRUE on success or FALSE if truncated. \nLike `Set*` it is a bridge procedure to let us move data output \nour new dynamic string type.\n\n\n~~~\n\n  PROCEDURE ToCharArray*(str : DynamicString; \n                         VAR dest : ARRAY OF CHAR; \n                         VAR ok : BOOLEAN);\n    VAR cur : DynamicString; i : INTEGER;\n  BEGIN \n    ok := FALSE;\n    cur := str; i := 0;\n    WHILE cur # NIL DO\n      i := i + Strings.Length(cur.value);\n      Strings.Append(cur.value, dest);\n      cur := cur.next;\n    END;\n    ok := (i = Strings.Length(dest));\n  END ToCharArray;\n\n~~~\n\nTwo additional procedures will likely be needed-- `Append` and \n`AppendCharArray`. This first one is trivial, if we want to add \none dynamic string onto another all we need to do is link the \nlast record of the first and point it to a copy of the second string we're appending.\n\n\n### `Append*(extra : DynamicString; VAR dest : DynamicString);`\n\n`Append` adds the `extra` dynamic string to `dest` dynamic string. Our \n\"input\" is `extra` and our output is a modified dynamic string \nnamed `dest`. This parameter order mimics the standard \n`Strings` module's `Append`.\n\nNOTE: Oberon idiom is often input values, modified value and \nresult values. Modified and result values are declared in the parameter\ndefinition using `VAR`.\n\nAlgorithm:\n\n1. Move to the end of `dest` dynamic string\n2. Create a new record at `cur.next`.\n3. Copy `extra.value` info.value `cur.next.value`\n4. Advance `extra` and `cur`, repeating steps 2 to 4 as needed.\n\nImplemented procedure.\n\n~~~\n\n  PROCEDURE Append*(extra: DynamicString; VAR dest : DynamicString);\n    VAR cur : DynamicString;  \n  BEGIN\n    (* Move to the end of the dest DynamicString *)\n    cur := dest;\n    WHILE cur.next # NIL DO cur := cur.next; END;\n    (* Starting initial pointer of `extra` copy its records\n       input new records created in `cur`. *)\n    WHILE extra # NIL DO\n      (* Create a new record *)\n      NEW(cur.next);\n      cur.next.value := \"\";\n      cur.next.next := NIL;\n      (* Copy extra.value into new record *)\n      Strings.Extract(extra.value, 0, vSize, cur.next.value);\n      (* Advance to next record for both cur and extra *)\n      extra := extra.next;\n      cur := cur.next;\n    END;\n  END Append;\n\n~~~\n\nA second procedure for appending an `ARRAY OF CHAR` also \nbecomes trivial. First convert the `ARRAY OF CHAR` to a dynamic \nstring then append it with the previous procedure.\n\n### `AppendCharArray*(src : ARRAY OF CHAR; VAR str : DynamicString);`\n\nThis procedure appends an ARRAY OF CHAR to an existing dynamic string.\n\n~~~\n\n  PROCEDURE AppendCharArray*(extra: ARRAY OF CHAR; VAR dest : DynamicString);\n    VAR extraStr : DynamicString;    \n  BEGIN\n    (* Convert our extra ARRAY OF CHAR into a DynamicString *)\n    New(extraStr); Set(extraStr, extra);\n    (* Now we can append. *)\n    Append(extraStr, dest);\n  END AppendCharArray;\n\n~~~\n\nAt some point we will want to know the length of our dynamic string.\n\n### `Length(str : DynamicString) : INTEGER`\n\nOur `Length` needs to go through our linked list and total up \nthe length of each value. We will use a variable called `cur` \nto point at the current record and add up our total length as \nwe walk through the list.\n\n~~~\n\n  PROCEDURE Length*( source : DynamicString) : INTEGER;\n    VAR cur : DynamicString; total : INTEGER;\n  BEGIN\n    total := 0;\n    cur := source;\n    WHILE cur # NIL DO\n      total := total + Strings.Length(cur.value);\n      cur := cur.next;\n    END; \n    RETURN total\n  END Length;\n\n~~~\n\n## Extending DynamicStrings module\n\nWith these few procedures we have a basic means of working with \ndynamic strings. Moving beyond this we can look at the standard \nOberon `Strings` module for inspiration.  If we use similar \nprocedure signatures we can create a drop in replacement \nfor `Strings` with `DynamicStrings`.\n\nNOTE: Procedure signatures refer to procedures type along \nwith the order and types of parameters. A quick review of the \nprocedure signatures for the standard module [Strings](https://miasap.se/obnc/obncdoc/basic/Strings.def.html) is \nprovided by the [OBNC](https://miasap.se/obnc) compiler docs. \n\nLet's look at recreating `Insert` as a potential guide to\na more fully featured [\"DynamicStrings.Mod\"](DynamicStrings.Mod). \nIn our `Insert` we modify the procedure signature so the \nsource and destinations are dynamic strings.\n\n\n### `Insert(source : DynamicString; pos : INTEGER; VAR dest : DynamicString)`\n\nThe `Insert` procedure inserts a `source` dynamic string at the \nposition provided into our `dest` dynamic string. We are implementing\nthe same signature  for our `DynamicStrings.Insert()` as \n`Strings.Insert()`. Only the parameters for source and destination\nare changed to `DynamicString`.\n\nInternally our procedure for `Insert` is a more complicated than\nthe ones we've written so far. It needs to do all the housing \nkeeping for making sure we add the right content in the correct\nspot.  The general idea is to find the record holding the split \npoint. Split that record into two records. The first retains \nthe characters before the insert position. The second holds the \ncharacters after the insert position and points to next record \nin the dynamic string. Once the split is accomplished it then \nis a matter of linking everything up. The record before the \ninsert position is set to point at the dynamic string to be \ninserted, the inserted dynamic string is set to point at the \nrecord that contained the rest of the characters after the \nsplit.\n\nIt is easy to extract a sub-string from an `ARRAY OF CHAR` \nusing the standard `Strings` module.  We can store the characters\nin the `.value` of the record after the split in a temporary \n`ARRAY OF CHAR`.  The temporary `ARRAY OF CHAR` can be used to \ncreate a new dynamic string record which will be linked to the \nrest of our destination dynamic string. The record which held \nthe characters before the insert position needs to be truncated \nand it needs to be linked to the dynamic string we want to \ninsert. NOTE: This will leave a small amount of unused \nmemory.\n\nNOTE: If conserving memory is critical then re-packing the \ndynamic string could be implemented as another procedure. The \ncost would be complexity and time to shift characters between \nlater records and earlier ones replacing excess NULL values.\n\nWe need to find the record where the split will occur. In the \nrecord to be split we need to calculate a relative \nsplit point. We then can copy the excess characters in that \nsplit record to a new record and truncate the `.value`'s \n`ARRAY OF CHAR` to create our split point. Truncating is easy \nin that we replace the CHAR in the `.values` that are not \nneeded with a NULL character. We can do that with a \nsimple loop. Likewise calculating the relative insertion \nposition can be done by taking the modulo of the `vSize` of \n`.value`.\n\nNOTE: In Oberon stings are terminated with a NULL \ncharacter. A NULL character holds the ASCII value `0X`.\n\nOur algorithm:\n\n1. Set `cur` to point to the start of our destination dynamic string\n2. Move `cur` to the record in the link list where the insertion will take place\n3. Calculate the relative split point in `cur.value`\n4. Copy the characters in `cur.value` from relative split point to end of `.value` into a temporary `ARRAY OF CHAR`\n5. Make a new record, `rest`, using the temporary `ARRAY OF CHAR` and update the value of `.next` to match that of `cur.next`\n6. Truncate the record (cur) at the relative split point\n7. Set `cur.next` to point to our `extra` dynamic string.\n8. Move to the end of extra with `cur`\n9. Set the `cur.next` to point at `rest`\n\nOur procedure:\n\n~~~\n\n  PROCEDURE Insert*(extra : DynamicString; \n                    pos : INTEGER; \n                    VAR dest : DynamicString);\n    VAR cur, rest : DynamicString;\n        tmp : ARRAY vSize OF CHAR;\n        i, splitPos : INTEGER; continue : BOOLEAN;\n  BEGIN\n    (* 1. Set `cur` to the start of our `dest` dynamic string *)\n    cur := dest;\n\n    (* 2. Move to the record which holds the split point *)\n    i := 0;\n    continue := (i < pos);\n    WHILE continue DO\n      i := i + Strings.Length(cur.value);\n      continue := (i < pos);\n      IF continue & (cur.next # NIL) THEN\n        cur := cur.next;\n      ELSE\n        continue := FALSE;\n      END;\n    END;\n\n    (* 3. Copy the characters in `cur.value` from relative\n          split point to end of `.value` into a \n          temporary `ARRAY OF CHAR` *)\n    splitPos := pos MOD vSize;\n    Strings.Extract(cur.value, splitPos,\n                    Strings.Length(cur.value), tmp);\n\n    (* 4. Make a new record, `rest`, using the temporary \n          `ARRAY OF CHAR` and update the value of `.next` to\n          match that of `cur.next` *)\n    New(rest); Set(rest, tmp);\n    rest.next := cur.next;\n\n    (* 5. Truncate `cur.value` at the relative split point *)\n    i := splitPos;\n    WHILE i < LEN(cur.value) DO\n      cur.value[i] := 0X;\n      INC(i);\n    END;\n\n    (* 6. Set `cur.next` to point to our `extra`\n          dynamic string. *)\n    cur.next := extra;\n\n    (* 7. Move to the end of extra with `cur` *)\n    WHILE cur.next # NIL DO cur := cur.next; END;\n\n    (* 8. Set the `cur.next` to point at `rest` *)\n    cur.next := rest;\n  END Insert;\n\n~~~\n\nWhile our `Insert` is the longest procedure so far the steps \nare mostly simple. Additionally we can easily extend this to \nsupport inserting a more traditional `ARRAY OF CHAR` using our\npreviously established design pattern of converting a basic type\ninto our dynamic type before calling the dynamic version of the\nfunction.\n\n~~~\n\n  PROCEDURE InsertCharArray*(source : ARRAY OF CHAR; \n                             pos : INTEGER; \n                             VAR dest : DynamicString);\n    VAR extra : DynamicString;\n  BEGIN\n    New(extra); Set(extra, source);\n    Insert(extra, pos, dest);\n  END InsertCharArray;\n\n~~~\n\n## Where to go next\n\nIt is possible to extend our \"DynamicStrings.Mod\" into a drop \nin replacement for the standard `Strings`.  I've included a \nskeleton of that module as links at the end of this article \nwith stubs for the missing implementations such as `Extract`, \n`Replace`, `Pos`, and `Cap`.  I've also included a \n\"DynamicStringsTest.Mod\" for demonstrating how it works.\n\nThe procedure I suggest is to mirror `Strings` replacing the \nparameters that are `ARRAY OF CHAR` with `DynamicString`. It \nwill be helpful to include some bridging procedures that accept \n`ARRAY OF CHAR` as inputs too. These will use similar names \nwith a suffix of `CharArray`.\n\n## Parameter conventions and order\n\nOberon is highly composable. The trick to creating a drop in \nreplacement module is use the same parameter signatures so \nyou only need to make minor changes like updating the `IMPORT` \nstatement and using a module alias to map the old module to the\nnew one.  The parameter signatures in `Strings` follow a \nconvention you'll see in other Oberon modules. The parameter\norder is based on the \"inputs\", \"modify parameters\", and \n\"output parameters\". Inputs are non-`VAR` parameters. The \nremaining are `VAR` parameters. I think of \"modify parameters\" \nas those objects who reflect side effects. I think of \"output\" \nas values that in other languages would be returned by \nfunctions.  This is only a convention. A variation I've \nread in other Oberon modules is \"object\", \"inputs\", \"outputs\". \n\"object\" and \"outputs\" are `VAR` parameters and \"inputs\" are \nnot. This ordering makes sense when we think of records as \nholding an object. In both cases ordering is a convention \nand not enforced by the language.  Convention and consistency is \nhelpful but readability is the most important.  Oberon is a \nreadable language. It does not reward obfuscation. Readability is \na great virtue in a programming language. When creating your own \nmodules choose readability based on the concepts you want to\nemphasize in the module (e.g. procedural, object oriented).\n\n## The modules so far\n\nYou can read the full source for the module discussed along\nwith a test module in the links that follow.\n\n+ [DynamicStrings.Mod](DynamicStrings.Mod)\n+ [DynamicStringsTest.Mod](DynamicStringsTest.Mod)\n\n\n### Next and Previous \n\n+ Next [Procedures as parameters](../../06/20/Procedures-as-parameters.html)\n+ Previous [Oberon-07 and the file system](../09/Oberon-07-and-the-filesystem.html) \n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-05-25",
        "keywords": [
          "Oberon",
          "programming",
          "type extension",
          "dynamic data"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 8,
        "series": "Mostly Oberon",
        "title": "Dynamic types"
      },
      "url": "posts/2020/05/25/Dynamic-types.json"
    },
    {
      "content": "\n\nChars\n=====\n\nThis module provides common character oriented tests.\n\nInRange\n: Check to see if a character, c, is in an inclusive range from a lower to upper character.\n\nIsUpper\n: Check to see if a character is upper case\n\nIsLower\n: Check to see if a character is lower case\n\nIsAlpha\n: Check to see if a character is alphabetic, i.e. in the range of \"a\" to \"z\"\nor \"A\" to \"Z\".\n\nIsDigit\n: Check to see if a character is a digit, i.e. in range of \"0\" to \"9\"\n\nIsAlphaNum\n: Check to see if a character is alpha or a digit\n\nIsSpace\n: Check to see if a character is a space, tab, carriage return or line feed\n\nAppendChar\n: Append a single char to the end of an ARRAY OF CHAR adjusting the terminating null character and return TRUE on success or FALSE otherwise.\n\nAppendChars\n: Append an ARRAY OF CHAR to another the destination ARRAY OF CHAR.\n\nEqual\n: Compares two ARRAY OF CHAR and returns TRUE if they match, FALSE otherwise\n\nClear\n: Sets all cells in an ARRAY OF CHAR to 0X.\n\nTrimSpace\n: Trim the leading and trailing space characters from an ARRAY OF CHAR\n\nTrimLeftSpace\n: Trim the leading space characters from an ARRAY OF CHAR\n\nTrimRightSpace\n: Trim the trailing space characters from an ARRAY OF CHAR\n\nStartsWith\n: Checks to see if a prefix ARRAY OF CHAR matches a target ARRAY OF CHAR return TRUE if found, FALSE otherwise\n\nEndsWith\n: Checks to see if a suffix ARRAY OF CHAR matches a target ARRAY OF CHAR return TRUE if found, FALSE otherwise\n\nTrimPrefix\n: Trim a prefix ARRAY OF CHAR from a target ARRAY OF CHAR\n\nTrimSuffix\n: Trim a suffix ARRAY OF CHAR from a target ARRAY OF CHAR\n\n\n\n\nSource code for **Chars.Mod**\n-----------------------------\n\n~~~\nMODULE Chars;\n\nIMPORT Strings;\n\nCONST\n    MAXSTR* = 1024; (* or whatever *)\n    (* byte constants *)\n    LF* = 10;\n    CR* = 13;\n    (* Character constants *)\n    ENDSTR* = 0X;\n    NEWLINE* = 10X;\n    TAB* = 9X;\n    SPACE* = \" \";\n    DASH* = \"-\";\n    CARET* = \"^\";\n    TILDE* = \"~\";\n    QUOTE* = CHR(34);\n\n(* InRange -- given a character to check and an inclusive range of\ncharacters in the ASCII character set. Compare the ordinal values\nfor inclusively. Return TRUE if in range FALSE otherwise. *)\nPROCEDURE InRange* (c, lower, upper : CHAR) : BOOLEAN;\nVAR inrange : BOOLEAN;\nBEGIN\n  IF (ORD(c) >= ORD(lower)) & (ORD(c) <= ORD(upper)) THEN\n    inrange := TRUE;\n  ELSE\n    inrange := FALSE;\n  END;\n  RETURN inrange\nEND InRange;\n\n(* IsUpper return true if the character is an upper case letter *)\nPROCEDURE IsUpper*(c : CHAR) : BOOLEAN;\nVAR isupper : BOOLEAN;\nBEGIN\n    IF InRange(c, \"A\", \"Z\") THEN\n        isupper := TRUE;\n    ELSE\n        isupper := FALSE;\n    END\n    RETURN isupper\nEND IsUpper;\n\n\n(* IsLower return true if the character is a lower case letter *)\nPROCEDURE IsLower*(c : CHAR) : BOOLEAN;\nVAR islower : BOOLEAN;\nBEGIN\n    IF InRange(c, \"a\", \"a\") THEN\n        islower := TRUE;\n    ELSE\n        islower := FALSE;\n    END\n    RETURN islower\nEND IsLower;\n\n(* IsDigit return true if the character in the range of \"0\" to \"9\" *)\nPROCEDURE IsDigit*(c : CHAR) : BOOLEAN;\nVAR isdigit : BOOLEAN;\nBEGIN\n    IF InRange(c, \"0\", \"9\") THEN\n        isdigit := TRUE;\n    ELSE\n        isdigit := FALSE;\n    END;\n    RETURN isdigit\nEND IsDigit;\n\n(* IsAlpha return true is character is either upper or lower case letter *)\nPROCEDURE IsAlpha*(c : CHAR) : BOOLEAN;\nVAR isalpha : BOOLEAN;\nBEGIN\n    IF IsUpper(c) OR IsLower(c) THEN\n        isalpha := TRUE;\n    ELSE\n        isalpha := FALSE;\n    END;\n    RETURN isalpha\nEND IsAlpha;\n\n(* IsAlphaNum return true is IsAlpha or IsDigit *)\nPROCEDURE IsAlphaNum* (c : CHAR) : BOOLEAN;\nVAR isalphanum : BOOLEAN;\nBEGIN\n    IF IsAlpha(c) OR IsDigit(c) THEN\n        isalphanum := TRUE;\n    ELSE\n        isalphanum := FALSE;\n    END;\n    RETURN isalphanum\nEND IsAlphaNum;\n\n(* IsSpace returns TRUE if the char is a space, tab, carriage return or line feed *)\nPROCEDURE IsSpace*(c : CHAR) : BOOLEAN;\nVAR isSpace : BOOLEAN;\nBEGIN\n\tisSpace := FALSE;\n\tIF (c = SPACE) OR (c = TAB) OR (ORD(c) = CR) OR (ORD(c) = LF) THEN\n    \tisSpace := TRUE;\n\tEND;\n\tRETURN isSpace\nEND IsSpace;\n\n(* AppendChar - this copies the char and appends it to\n   the destination. Returns FALSE if append fails. *)\nPROCEDURE AppendChar*(c : CHAR; VAR dest : ARRAY OF CHAR) : BOOLEAN;\nVAR res : BOOLEAN; l : INTEGER;\nBEGIN\n  l := Strings.Length(dest);\n  (* NOTE: we need to account for a trailing 0X to end\n     the string. *)\n  IF l < (LEN(dest) - 1) THEN\n    dest[l] := c;\n    dest[l + 1] := 0X;\n    res := TRUE;\n  ELSE\n    res := FALSE;\n  END;\n  RETURN res\nEND AppendChar;\n\n(* AppendChars - copy the contents of src ARRAY OF CHAR to end of\n   dest ARRAY OF CHAR *)\nPROCEDURE AppendChars*(src : ARRAY OF CHAR; VAR dest : ARRAY OF CHAR);\nVAR i, j : INTEGER;\nBEGIN\n  i := 0;\n  WHILE (i < LEN(dest)) & (dest[i] # 0X) DO\n    i := i + 1;\n  END;\n  j := 0;\n  WHILE (i < LEN(dest)) & (j < Strings.Length(src)) DO\n    dest[i] := src[j];\n    i := i + 1;\n    j := j + 1;\n  END;\n  WHILE i < LEN(dest) DO\n    dest[i] := 0X;\n    i := i + 1;\n  END;\nEND AppendChars;\n\n(* Equal - compares two ARRAY OF CHAR and returns TRUE\nif the characters match up to the end of string, FALSE otherwise. *)\nPROCEDURE Equal*(a : ARRAY OF CHAR; b : ARRAY OF CHAR) : BOOLEAN;\nVAR isSame : BOOLEAN; i : INTEGER;\nBEGIN\n  isSame := (Strings.Length(a) = Strings.Length(b));\n  i := 0;\n  WHILE isSame & (i < Strings.Length(a)) DO\n    IF a[i] # b[i] THEN\n      isSame := FALSE;\n    END;\n    i := i + 1;\n  END;\n  RETURN isSame\nEND Equal;\n\n\n(* StartsWith - check to see of a prefix starts an ARRAY OF CHAR *)\nPROCEDURE StartsWith*(prefix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR) : BOOLEAN;\nVAR startsWith : BOOLEAN; i: INTEGER;\nBEGIN\n    startsWith := FALSE;\n    IF Strings.Length(prefix) <= Strings.Length(src) THEN\n        startsWith := TRUE;\n        i := 0;\n        WHILE (i < Strings.Length(prefix)) & startsWith DO\n            IF prefix[i] # src[i] THEN\n                startsWith := FALSE;\n            END;\n            i := i + 1;\n        END;\n    END;    \n    RETURN startsWith\nEND StartsWith;\n\n(* EndsWith - check to see of a prefix starts an ARRAY OF CHAR *)\nPROCEDURE EndsWith*(suffix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR) : BOOLEAN;\nVAR endsWith : BOOLEAN; i, j : INTEGER;\nBEGIN\n    endsWith := FALSE;\n    IF Strings.Length(suffix) <= Strings.Length(src) THEN\n        endsWith := TRUE;\n        i := 0;\n        j := Strings.Length(src) - Strings.Length(suffix);\n        WHILE (i < Strings.Length(suffix)) & endsWith DO\n            IF suffix[i] # src[j] THEN\n                endsWith := FALSE;\n            END;\n            i := i + 1;\n            j := j + 1;\n        END;\n    END;\n    RETURN endsWith\nEND EndsWith;\n\n\n(* Clear - resets all cells of an ARRAY OF CHAR to 0X *)\nPROCEDURE Clear*(VAR a : ARRAY OF CHAR);\nVAR i : INTEGER;\nBEGIN\n  FOR i := 0 TO (LEN(a) - 1) DO\n    a[i] := 0X;\n  END;\nEND Clear;\n\n(* Shift returns the first character of an ARRAY OF CHAR and shifts the\nremaining elements left appending an extra 0X if necessary *)\nPROCEDURE Shift*(VAR src : ARRAY OF CHAR) : CHAR;\nVAR i, last : INTEGER; c : CHAR;\nBEGIN\n    i := 0;\n    c := src[i];\n    Strings.Delete(src, 0, 1);\n    last := Strings.Length(src) - 1;\n    FOR i := last TO (LEN(src) - 1) DO\n        src[i] := 0X;\n    END;\n    RETURN c\nEND Shift;\n\n(* Pop returns the last non-OX element of an ARRAY OF CHAR replacing\n   it with an OX *)\nPROCEDURE Pop*(VAR src : ARRAY OF CHAR) : CHAR;\nVAR i, last : INTEGER; c : CHAR;\nBEGIN\n\t(* Move to the last non-0X cell *)\n\ti := 0;\n\tlast := LEN(src);\n\tWHILE (i < last) & (src[i] # 0X) DO\n\t   i := i + 1;\n\tEND;\n\tIF i > 0 THEN\n\t\ti := i - 1;\n\tELSE\n\t\ti := 0;\n\tEND;\n\tc := src[i];\n\tWHILE (i < last) DO\n\t\tsrc[i] := 0X;\n\t\ti := i + 1;\n\tEND;\n\tRETURN c\nEND Pop;\n\n(* TrimLeftSpace - remove leading spaces from an ARRAY OF CHAR *)\nPROCEDURE TrimLeftSpace*(VAR src : ARRAY OF CHAR);\nVAR i : INTEGER;\nBEGIN\n    (* find the first non-space or end of the string *)\n    i := 0;\n    WHILE (i < LEN(src)) & IsSpace(src[i]) DO\n        i := i + 1;\n    END;\n    (* Trims the beginning of the string *)\n    IF i > 0 THEN\n        Strings.Delete(src, 0, i);\n    END;\nEND TrimLeftSpace;\n\n(* TrimRightSpace - remove the trailing spaces from an ARRAY OF CHAR *)\nPROCEDURE TrimRightSpace*(VAR src : ARRAY OF CHAR);\nVAR i, l : INTEGER; \nBEGIN\n    (* Find the first 0X, end of string *)\n\tl := Strings.Length(src);\n\ti := l - 1;\n\t(* Find the start of the trailing space sequence *)\n\tWHILE (i > 0) & IsSpace(src[i]) DO\n\t\ti := i - 1;\n\tEND;\n\t(* Delete the trailing spaces *)\n\tStrings.Delete(src, i + 1, l - i);\nEND TrimRightSpace;\n\n(* TrimSpace - remove leading and trailing space CHARS from an ARRAY OF CHAR *)\nPROCEDURE TrimSpace*(VAR src : ARRAY OF CHAR);\nBEGIN\n\tTrimLeftSpace(src);\n\tTrimRightSpace(src);    \nEND TrimSpace;    \n    \n\n(* TrimPrefix - remove a prefix ARRAY OF CHAR from a target ARRAY OF CHAR *)\nPROCEDURE TrimPrefix*(prefix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR);\nVAR l : INTEGER;\nBEGIN\n    IF StartsWith(prefix, src) THEN\n         l := Strings.Length(prefix);\n         Strings.Delete(src, 0, l);\n    END;\nEND TrimPrefix;\n\n(* TrimSuffix - remove a suffix ARRAY OF CHAR from a target ARRAY OF CHAR *)\nPROCEDURE TrimSuffix*(suffix : ARRAY OF CHAR; VAR src : ARRAY OF CHAR);\nVAR i, l : INTEGER;\nBEGIN\n\tIF EndsWith(suffix, src) THEN\n\t\tl := Strings.Length(src) - 1;\n\t\tFOR i := ((l - Strings.Length(suffix)) + 1) TO l DO\n\t\t\tsrc[i] := 0X;\n\t\tEND;\n\tEND;\nEND TrimSuffix;\n\n\nEND Chars.\n\n~~~\n\n\n",
      "data": {
        "title": "Chars"
      },
      "url": "posts/2020/11/27/Chars.json"
    },
    {
      "content": "\n\nDates and Clock\n===============\n\nBy R. S. Doiel, 2020-11-27\n\nThe [Oakwood](http://www.edm2.com/index.php/The_Oakwood_Guidelines_for_Oberon-2_Compiler_Developers#The_Oakwood_Guidelines)\nguidelines specified a common set of modules for Oberon-2 for writing\nprograms outside of an Oberon System. A missing module from the Oakwood\nguidelines is modules for working with dates and the system clock.\nFortunately the A2 Oberon System[^1] provides a template for that\nfunctionality. In this article I am exploring implementing the\n[Dates](Dates.Mod) and [Clock](Clock.Mod) modules for Oberon-07. I\nalso plan to go beyond the A2 implementations and provide additional\nfunctionality such as parsing procedures and the ability to work with\neither the date or time related attributes separately in the\n`Dates.DateTime` record.\n\n[^1]: A2 information can be found in the [Oberon wikibook](https://en.wikibooks.org/wiki/Oberon#In_A2)\n\nDivergences\n-----------\n\nOne of the noticeable differences between Oberon-07 and Active Oberon\nis the types that functional procedures can return. We cannot return\nan Object in Oberon-07. This is not much of a handicap as we have\nvariable procedure parameters.  Likewise Active Oberon provides\na large variety of integer number types. In Oberon-07 we have only\nINTEGER. Where I've create new procedures I've used the Oberon idiom\nof read only input parameters followed by variable parameters with\nside effects and finally parameters for the target record or values\nto be updated.\n\n\nSimilarities\n------------\n\nIn spite of the divergence I have split the module into two.\nThe [Dates](Dates.html) module is the one you would include in your\nprogram, it provides a DateTime record type which holds the integer\nvalues for year, month, day, hour, minute and second. It provides the\nmeans of parsing a date or time string, comparison, difference and addition\nof dates.  The second module [Clock](Clock.html) provides a mechanism\nto retrieve the real time clock value from the host system and map the\nC based time object into our own DateTime record.  Clock is specific to\nOBNC method of interfacing to the C standard libraries of the host system.\nIf you were to use a different Oberon compiled such as the Oxford\nOberon Compiler you would need to re-implement Clock. Dates itself\nshould be system independent and work with Oberon-07 compilers generally.\n\nClock\n-----\n\nThe Clock module is built from a skeleton in Oberon-07 describing the\nsignatures of the procedure and an implementation in [C](Clock.c) that\nis built using the technique for discussed in my post\n[Combining Oberon-07 and C with OBNC](../../05/01/Combining-Oberon-and-C.html). In that article I outline Karl's three step process to create a\nmodule that will be an interface to C code.  In Step one I create\nthe Oberon module. Normally I'd leave all procedures empty and\ndevelop them in C. In this specific case I went ahead and wrote\nthe procedure called `Get` in Oberon and left the procedure `GetRtcTime`\nblank. This allowed OBNC to generate the C code for `Get` saving\nme some time and create the skeleton for `GetRtcTime` which does\nthe work interfacing with the system clock via C library calls.\n\nThe interface Oberon module looked like this:\n\n~~~{.oberon}\n\nMODULE Clock;\n\nPROCEDURE GetRtcTime*(VAR second, minute, hour, day, month, year : INTEGER);\nBEGIN\nEND GetRtcTime;\n\nPROCEDURE Get*(VAR time, date : INTEGER);\nVAR\n    second, minute, hour, day, month, year : INTEGER;\nBEGIN\n\tGetRtcTime(second, minute, hour, day, month, year);\n\ttime = ((hour * 4096) + (minute * 64)) + second;\n\tdate = ((year * 512) + (month * 32)) + day;\nEND Get;\n\nEND Clock.\n\n~~~\n\nI wrote the `Get` procedure code in Oberon-07 is the OBNC\ncompiler will render the Oberon as C during the\ncompilation process. I save myself writing some C code\nin by leveraging OBNC.\n\n\nStep two was to write [ClockTest.Mod](ClockTest.Mod) in Oberon-07.\n\n~~~{.oberon}\n\nMODULE ClockTest;\n\nIMPORT Tests, Chars, Clock; (* , Out; *)\n\nCONST\n    MAXSTR = Chars.MAXSTR;\n\nVAR\n    title : ARRAY MAXSTR OF CHAR;\n    success, errors : INTEGER;\n\nPROCEDURE TestGetRtcTime() : BOOLEAN;\nVAR second, minute, hour, day, month, year : INTEGER; \n    test, expected, result: BOOLEAN;\nBEGIN\n    test := TRUE;\n    second := 0; minute := 0; hour := 0;\n    day := 0; month := 0; year := 0;\n    expected := TRUE;\n    Clock.GetRtcTime(second, minute, hour, day, month, year);\n\n\n    result := (year > 1900);\n    Tests.ExpectedBool(expected, result, \n          \"year should be greater than 1900\", test);\n    result := (month >= 0) & (month <= 11);\n    Tests.ExpectedBool(expected, result,\n          \"month should be [0, 11]\", test);\n    result := (day >= 1) & (day <= 31);\n    Tests.ExpectedBool(expected, result,\n          \"day should be non-zero\", test);\n\n    result := (hour >= 0) & (hour <= 23);\n    Tests.ExpectedBool(expected, result,\n          \"hour should be [0, 23]\", test);\n    result := (minute >= 0) & (minute <= 59);\n    Tests.ExpectedBool(expected, result, \n          \"minute should be [0, 59]\", test);\n    result := (second >= 0) & (second <= 60);\n    Tests.ExpectedBool(expected, result,\n          \"second year should be [0,60]\", test);\n    RETURN test\nEND TestGetRtcTime;\n\nPROCEDURE TestGet() : BOOLEAN;\nVAR time, date : INTEGER; \n    test, expected, result : BOOLEAN;\nBEGIN\n    test := TRUE;\n    time := 0;\n    date := 0;\n    Clock.Get(time, date);\n    expected := TRUE;\n    result := (time > 0);\n    Tests.ExpectedBool(expected, result,\n        \"time should not be zero\", test);\n    result := (date > 0);\n    Tests.ExpectedBool(expected, result,\n        \"date should not be zero\", test);\n\n    RETURN test\nEND TestGet;\n\nBEGIN\n    Chars.Set(\"Clock module test\", title);\n    success := 0; errors := 0;\n    Tests.Test(TestGetRtcTime, success, errors);\n    Tests.Test(TestGet, success, errors);\n    Tests.Summarize(title, success, errors);\nEND ClockTest.\n\n~~~\n\nClockTest is a simple test module for [Clock.Mod](Clock.Mod).\nIt also serves the role when compiled with OBNC to create the\ntemplate C code for [Clock.c](Clock.c). Here's the steps we\ntake to generate `Clock.c` with OBNC:\n\n~~~{.shell}\n\nobnc ClockTest.Mod\nmv .obnc/Clock.c ./\nvi Clock.c\n\n~~~\n\nAfter compiling `.obnc/Clock.c` I then moved `.obnc/Clock.c`\nto my working directory. Filled in the C version of\n`GetRtcTime` function and modified my [Clock.Mod](Clock.Mod)\nto contain my empty procedure.\n\nThe finally version of Clock.c looks like (note how we need to\ninclude \"Clock.h\" in the head of the our C source file).\n\n~~~{.c}\n\n/*GENERATED BY OBNC 0.16.1*/\n\n#include \".obnc/Clock.h\"\n#include <obnc/OBNC.h>\n#include <time.h>\n\n#define OBERON_SOURCE_FILENAME \"Clock.Mod\"\n\nvoid Clock__GetRtcTime_(OBNC_INTEGER *second_, OBNC_INTEGER *minute_,\n     OBNC_INTEGER *hour_, OBNC_INTEGER *day_,\n     OBNC_INTEGER *month_, OBNC_INTEGER *year_)\n{\n    time_t now;\n    struct tm *time_info;\n    now = time(NULL);\n    time_info = localtime(&now);\n    *second_ = time_info->tm_sec;\n    *minute_ = time_info->tm_min;\n    *hour_ = time_info->tm_hour;\n    *day_ = time_info->tm_mday;\n    *month_ = time_info->tm_mon;\n    *year_ = (time_info->tm_year) + 1900;\n}\n\n\nvoid Clock__Get_(OBNC_INTEGER *time_, OBNC_INTEGER *date_)\n{\n\tOBNC_INTEGER second_, minute_, hour_, day_, month_, year_;\n\n\tClock__GetRtcTime_(&second_, &minute_, \n                       &hour_, &day_, &month_, &year_);\n\t(*time_) = ((hour_ * 4096) + (minute_ * 64)) + second_;\n\t(*date_) = ((year_ * 512) + (month_ * 32)) + day_;\n}\n\n\nvoid Clock__Init(void)\n{\n}\n\n~~~\n\nThe final version of Clock.Mod looks like\n\n~~~{.oberon}\n\nMODULE Clock;\n\nPROCEDURE GetRtcTime*(VAR second, minute, \n                      hour, day, month, year : INTEGER);\nBEGIN\nEND GetRtcTime;\n\nPROCEDURE Get*(VAR time, date : INTEGER);\nBEGIN\nEND Get;\n\nEND Clock.\n\n~~~\n\n\nStep three was to re-compile `ClockTest.Mod` and run the tests.\n\n~~~{.shell}\n\n    obnc ClockTest.Mod\n    ./ClockTest\n\n~~~\n\nDates\n-----\n\nThe dates module provides a rich variety of\nprocedures for working with dates. This includes parsing\ndate strings into `DateTime` records, testing strings for\nsupported date formats, setting dates or time in a `DateTime`\nrecord as well as comparison, difference and addition\n(both addition and subtraction) of dates. Tests for the Dates\nmodule is implemented in [DatesTest.Mod](DatesTest.Mod).\n\n~~~{.oberon}\n\nMODULE Dates;\nIMPORT Chars, Strings, Clock, Convert := extConvert;\n\nCONST\n    MAXSTR = Chars.MAXSTR;\n    SHORTSTR = Chars.SHORTSTR;\n\n    YYYYMMDD* = 1; (* YYYY-MM-DD format *)\n    MMDDYYYY* = 2; (* MM/DD/YYYY format *)\n    YYYYMMDDHHMMSS* = 3; (* YYYY-MM-DD HH:MM:SS format *)\n\nTYPE\n    DateTime* = RECORD\n        year*, month*, day*, hour*, minute*, second* : INTEGER\n    END;\n\nVAR\n    (* Month names, January = 0, December = 11 *)\n    Months*: ARRAY 23 OF ARRAY 10 OF CHAR;\n    (* Days of week, Monday = 0, Sunday = 6 *)\n    Days*: ARRAY 7 OF ARRAY 10 OF CHAR;\n    DaysInMonth: ARRAY 12 OF INTEGER;\n\n\n(* Set -- initialize a date record year, month and day values *)\nPROCEDURE Set*(year, month, day, hour, minute, second : INTEGER; \n               VAR dt: DateTime);\nBEGIN\n    dt.year := year;\n    dt.month := month;\n    dt.day := day;\n    dt.hour := hour;\n    dt.minute := minute;\n    dt.second := second;\nEND Set;\n\n(* SetDate -- set a Date record's year, month and day attributes *)\nPROCEDURE SetDate*(year, month, day : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.year := year;\n    dt.month := month;\n    dt.day := day;\nEND SetDate;\n\n(* SetTime -- set a Date record's hour, minute, second attributes *)\nPROCEDURE SetTime*(hour, minute, second : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.hour := hour;\n    dt.minute := minute;\n    dt.second := second;\nEND SetTime;\n\n(* Copy -- copy the values from one date record to another *)\nPROCEDURE Copy*(src : DateTime; VAR dest : DateTime);\nBEGIN\n    dest.year := src.year;\n    dest.month := src.month;\n    dest.day := src.day;\n    dest.hour := src.hour;\n    dest.minute := src.minute;\n    dest.second := src.second;\nEND Copy;\n\n(* ToChars -- converts a date record into an array of chars using\nthe format constant. Formats supported are YYYY-MM-DD HH:MM:SS\nor MM/DD/YYYY HH:MM:SS. *)\nPROCEDURE ToChars*(dt: DateTime; fmt : INTEGER;\n                   VAR src : ARRAY OF CHAR);\nVAR ok : BOOLEAN;\nBEGIN\n    Chars.Clear(src);\n    IF fmt = YYYYMMDD THEN\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n    ELSIF fmt = MMDDYYYY THEN\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"/\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n        ok := Chars.AppendChar(\"/\", src);\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n    ELSIF fmt = YYYYMMDDHHMMSS THEN\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n        ok := Chars.AppendChar(\" \", src);\n        Chars.AppendInt(dt.hour, 2, \"0\", src);\n        ok := Chars.AppendChar(\":\", src);\n        Chars.AppendInt(dt.minute, 2, \"0\", src);\n        ok := Chars.AppendChar(\":\", src);\n        Chars.AppendInt(dt.second, 2, \"0\", src);\n    END;\nEND ToChars;\n\n(*\n * Date and Time functions very much inspired by A2 but\n * adapted for use in Oberon-07 and OBNC compiler.\n *)\n\n(* LeapYear -- returns TRUE if 'year' is a leap year *)\nPROCEDURE LeapYear*(year: INTEGER): BOOLEAN;\nBEGIN\n\tRETURN (year > 0) & (year MOD 4 = 0) & \n           (~(year MOD 100 = 0) OR (year MOD 400 = 0))\nEND LeapYear;\n\n(* NumOfDays -- number of days, returns the number of \ndays in that month *)\nPROCEDURE NumOfDays*(year, month: INTEGER): INTEGER;\nVAR result : INTEGER;\nBEGIN\n    result := 0;\n\tDEC(month);\n\tIF ((month >= 0) & (month < 12)) THEN\n\t    IF (month = 1) & LeapYear(year) THEN\n            result := DaysInMonth[1]+1;\n\t    ELSE\n            result := DaysInMonth[month];\n\t    END;\n    END;\n    RETURN result\nEND NumOfDays;\n\n(* IsValid -- checks if the attributes set in a \nDateTime record are valid *)\nPROCEDURE IsValid*(dt: DateTime): BOOLEAN;\nBEGIN\n\tRETURN ((dt.year > 0) & (dt.month > 0) &\n           (dt.month <= 12) & (dt.day > 0) &\n           (dt.day <= NumOfDays(dt.year, dt.month)) &\n           (dt.hour >= 0) & (dt.hour < 24) & (dt.minute >= 0) &\n           (dt.minute < 60) & (dt.second >= 0) & (dt.second < 60))\nEND IsValid;\n\n(* IsValidDate -- checks to see if a datetime record \nhas valid day, month and year attributes *)\nPROCEDURE IsValidDate*(dt: DateTime) : BOOLEAN;\nBEGIN\n\tRETURN (dt.year > 0) & (dt.month > 0) &\n           (dt.month <= 12) & (dt.day > 0) &\n           (dt.day <= NumOfDays(dt.year, dt.month))\nEND IsValidDate;\n\n(* IsValidTime -- checks if the hour, minute, second\nattributes set in a DateTime record are valid *)\nPROCEDURE IsValidTime*(dt: DateTime): BOOLEAN;\nBEGIN\n\tRETURN (dt.hour >= 0) & (dt.hour < 24) &\n           (dt.minute >= 0) & (dt.minute < 60) &\n           (dt.second >= 0) & (dt.second < 60)\nEND IsValidTime;\n\n\n(* OberonToDateTime -- convert an Oberon date/time \nto a DateTime structure *)\nPROCEDURE OberonToDateTime*(Date, Time: INTEGER; \n                            VAR dt : DateTime);\nBEGIN\n\tdt.second := Time MOD 64; Time := Time DIV 64;\n\tdt.minute := Time MOD 64; Time := Time DIV 64;\n\tdt.hour := Time MOD 24;\n\tdt.day := Date MOD 32; Date := Date DIV 32;\n\tdt.month := (Date MOD 16) + 1; Date := Date DIV 16;\n\tdt.year := Date;\nEND OberonToDateTime;\n\n(* DateTimeToOberon -- convert a DateTime structure\nto an Oberon date/time *)\nPROCEDURE DateTimeToOberon*(dt: DateTime;\n                            VAR date, time: INTEGER);\nBEGIN\n\tIF IsValid(dt) THEN\n\tdate := (dt.year)*512 + dt.month*32 + dt.day;\n\ttime := dt.hour*4096 + dt.minute*64 + dt.second\n    ELSE\n        date := 0;\n        time := 0;\n    END;\nEND DateTimeToOberon;\n\n(* Now -- returns the current date and time as a\nDateTime record. *)\nPROCEDURE Now*(VAR dt: DateTime);\nVAR d, t: INTEGER;\nBEGIN\n\tClock.Get(t, d);\n\tOberonToDateTime(d, t, dt);\nEND Now;\n\n\n(* WeekDate -- returns the ISO 8601 year number,\nweek number & week day (Monday=1, ....Sunday=7)\nAlgorithm is by Rick McCarty, \nhttp://personal.ecu.edu/mccartyr/ISOwdALG.txt\n*)\nPROCEDURE WeekDate*(dt: DateTime; \n                    VAR year, week, weekday: INTEGER);\nVAR doy, i, yy, c, g, jan1: INTEGER; leap: BOOLEAN;\nBEGIN\n\tIF IsValid(dt) THEN\n\t\tleap := LeapYear(dt.year);\n\t\tdoy := dt.day; i := 0;\n\t\tWHILE (i < (dt.month - 1)) DO\n            doy := doy + DaysInMonth[i];\n            INC(i);\n        END;\n\t\tIF leap & (dt.month > 2) THEN\n            INC(doy);\n        END;\n\t\tyy := (dt.year - 1) MOD 100;\n        c := (dt.year - 1) - yy;\n        g := (yy + yy) DIV 4;\n\t\tjan1 := 1 + (((((c DIV 100) MOD 4) * 5) + g) MOD 7);\n\n\t\tweekday := 1 + (((doy + (jan1 - 1)) - 1) MOD 7);\n        (* does doy fall in year-1 ? *)\n\t\tIF (doy <= (8 - jan1)) & (jan1 > 4) THEN \n\t\t\tyear := dt.year - 1;\n\t\t\tIF (jan1 = 5) OR ((jan1 = 6) & LeapYear(year)) THEN\n                week := 53;\n\t\t\tELSE\n                week := 52;\n\t\t\tEND;\n\t\tELSE\n\t\t\tIF leap THEN\n                i := 366;\n            ELSE\n                i := 365;\n            END;\n\t\t\tIF ((i - doy) < (4 - weekday)) THEN\n\t\t\t\tyear := dt.year + 1;\n\t\t\t\tweek := 1;\n\t\t\tELSE\n\t\t\t\tyear := dt.year;\n\t\t\t\ti := doy + (7-weekday) + (jan1-1);\n\t\t\t\tweek := i DIV 7;\n\t\t\t\tIF (jan1 > 4) THEN\n                    DEC(week);\n                END;\n\t\t\tEND;\n\t\tEND;\n\tELSE\n\t\tyear := -1; week := -1; weekday := -1;\n\tEND;\nEND WeekDate;\n\n(* Equal -- compare to date records to see if they \nare equal values *)\nPROCEDURE Equal*(t1, t2: DateTime) : BOOLEAN;\nBEGIN\n\tRETURN ((t1.second = t2.second) &\n            (t1.minute = t2.minute) & (t1.hour = t2.hour) &\n            (t1.day = t2.day) & (t1.month = t2.month) &\n            (t1.year = t2.year))\nEND Equal;\n\n(* compare -- used in Compare only for comparing\nspecific values, returning an appropriate -1, 0, 1 *)\nPROCEDURE compare(t1, t2 : INTEGER) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tIF (t1 < t2) THEN\n        result := -1;\n\tELSIF (t1 > t2) THEN\n        result := 1;\n\tELSE\n        result := 0;\n\tEND;\n\tRETURN result\nEND compare;\n\n(* Compare -- returns -1 if (t1 < t2), \n0 if (t1 = t2) or 1 if (t1 >  t2) *)\nPROCEDURE Compare*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.year, t2.year);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.month, t2.month);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.day, t2.day);\n\t\t\tIF (result = 0) THEN\n\t\t\t\tresult := compare(t1.hour, t2.hour);\n\t\t\t\tIF (result = 0) THEN\n\t\t\t\t\tresult := compare(t1.minute, t2.minute);\n\t\t\t\t\tIF (result = 0) THEN\n\t\t\t\t\t\tresult := compare(t1.second, t2.second);\n\t\t\t\t\tEND;\n\t\t\t\tEND;\n\t\t\tEND;\n\t\tEND;\n\tEND;\n\tRETURN result\nEND Compare;\n\n(* CompareDate -- compare day, month and year\nvalues only *)\nPROCEDURE CompareDate*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.year, t2.year);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.month, t2.month);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.day, t2.day);\n\t\tEND;\n\tEND;\n\tRETURN result\nEND CompareDate;\n\n(* CompareTime -- compare second, minute and\nhour values only *)\nPROCEDURE CompareTime*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.hour, t2.hour);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.minute, t2.minute);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.second, t2.second);\n\t\tEND;\n\tEND;\n\tRETURN result\nEND CompareTime;\n\n\n\n(* TimeDifferences -- returns the absolute time\ndifference between\nt1 and t2.\n\nNote that leap seconds are not counted,\nsee http://www.eecis.udel.edu/~mills/leap.html *)\nPROCEDURE TimeDifference*(t1, t2: DateTime;\n              VAR days, hours, minutes, seconds : INTEGER);\nCONST \n    SecondsPerMinute = 60; \n    SecondsPerHour = 3600; \n    SecondsPerDay = 86400;\nVAR start, end: DateTime; year, month, second : INTEGER;\nBEGIN\n\tIF (Compare(t1, t2) = -1) THEN\n        start := t1;\n        end := t2;\n    ELSE\n        start := t2;\n        end := t1;\n    END;\n\tIF (start.year = end.year) & (start.month = end.month) &\n       (start.day = end.day) THEN\n\t\tsecond := end.second - start.second + \n                  ((end.minute - start.minute) * SecondsPerMinute) +\n                  ((end.hour - start.hour) * SecondsPerHour);\n\t\tdays := 0;\n        hours := 0;\n        minutes := 0;\n\tELSE\n\t\t(* use start date/time as reference point *)\n\t\t(* seconds until end of the start.day *)\n\t\tsecond := (SecondsPerDay - start.second) -\n                  (start.minute * SecondsPerMinute) -\n                  (start.hour * SecondsPerHour);\n\t\tIF (start.year = end.year) &\n           (start.month = end.month) THEN\n\t\t\t(* days between start.day and end.day *)\n\t\t\tdays := (end.day - start.day) - 1;\n\t\tELSE\n\t\t\t(* days until start.month ends excluding start.day *)\n\t\t\tdays := NumOfDays(start.year, start.month) - start.day;\n\t\t\tIF (start.year = end.year) THEN\n\t\t\t\t(* months between start.month and end.month *)\n\t\t\t\tFOR month := start.month + 1 TO end.month - 1 DO\n\t\t\t\t\tdays := days + NumOfDays(start.year, month);\n\t\t\t\tEND;\n\t\t\tELSE\n\t\t\t\t(* days until start.year ends (excluding start.month) *)\n\t\t\t\tFOR month := start.month + 1 TO 12 DO\n\t\t\t\t\tdays := days + NumOfDays(start.year, month);\n\t\t\t\tEND;\n                (* days between start.years and end.year *)\n\t\t\t\tFOR year := start.year + 1 TO end.year - 1 DO\n\t\t\t\t\tIF LeapYear(year) THEN days := days + 366; \n                    ELSE days := days + 365; END;\n\t\t\t\tEND;\n                (* days until we reach end.month in end.year *)\n\t\t\t\tFOR month := 1 TO end.month - 1 DO\n\t\t\t\t\tdays := days + NumOfDays(end.year, month);\n\t\t\t\tEND;\n\t\t\tEND;\n\t\t\t(* days in end.month until reaching end.day excluding end.day *)\n\t\t\tdays := (days + end.day) - 1;\n\t\tEND;\n\t\t(* seconds in end.day *)\n\t\tsecond := second + end.second +\n                  (end.minute * SecondsPerMinute) +\n                  (end.hour * SecondsPerHour);\n\tEND;\n\tdays := days + (second DIV SecondsPerDay); \n    second := (second MOD SecondsPerDay);\n\thours := (second DIV SecondsPerHour); \n    second := (second MOD SecondsPerHour);\n\tminutes := (second DIV SecondsPerMinute);\n    second := (second MOD SecondsPerMinute);\n\tseconds := second;\nEND TimeDifference;\n\n(* AddYear -- Add/Subtract a number of years to/from date *)\nPROCEDURE AddYears*(VAR dt: DateTime; years : INTEGER);\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.year := dt.year + years;\n\tASSERT(IsValid(dt));\nEND AddYears;\n\n(* AddMonths -- Add/Subtract a number of months to/from date.\nThis will adjust date.year if necessary *)\nPROCEDURE AddMonths*(VAR dt: DateTime; months : INTEGER);\nVAR years : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tyears := months DIV 12;\n\tdt.month := dt.month + (months MOD 12);\n\tIF (dt.month > 12) THEN\n\t\tdt.month := dt.month - 12;\n\t\tINC(years);\n\tELSIF (dt.month < 1) THEN\n\t\tdt.month := dt.month + 12;\n\t\tDEC(years);\n\tEND;\n\tIF (years # 0) THEN AddYears(dt, years); END;\n\tASSERT(IsValid(dt));\nEND AddMonths;\n\n(* AddDays --  Add/Subtract a number of days to/from date.\nThis will adjust date.month and date.year if necessary *)\nPROCEDURE AddDays*(VAR dt: DateTime; days : INTEGER);\nVAR nofDaysLeft : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tIF (days > 0) THEN\n\t\tWHILE (days > 0) DO\n\t\t\tnofDaysLeft := NumOfDays(dt.year, dt.month) - dt.day;\n\t\t\tIF (days > nofDaysLeft) THEN\n\t\t\t\tdt.day := 1;\n\t\t\t\tAddMonths(dt, 1);\n                (* -1 because we consume the first day \n                    of the next month *)\n\t\t\t\tdays := days - nofDaysLeft - 1;\n\t\t\tELSE\n\t\t\t\tdt.day := dt.day + days;\n\t\t\t\tdays := 0;\n\t\t\tEND;\n\t\tEND;\n\tELSIF (days < 0) THEN\n\t\tdays := -days;\n\t\tWHILE (days > 0) DO\n\t\t\tnofDaysLeft := dt.day - 1;\n\t\t\tIF (days > nofDaysLeft) THEN\n                (* otherwise, dt could become an invalid \n                   date if the previous month has less \n                   days than dt.day *)\n\t\t\t\tdt.day := 1; \n\t\t\t\tAddMonths(dt, -1);\n\t\t\t\tdt.day := NumOfDays(dt.year, dt.month);\n                (* -1 because we consume the last day \n                   of the previous month *)\n\t\t\t\tdays := days - nofDaysLeft - 1;\n\t\t\tELSE\n\t\t\t\tdt.day := dt.day - days;\n\t\t\t\tdays := 0;\n\t\t\tEND;\n\t\tEND;\n\tEND;\n\tASSERT(IsValid(dt));\nEND AddDays;\n\n(* AddHours -- Add/Subtract a number of hours to/from date.\nThis will adjust date.day, date.month and date.year if necessary *)\nPROCEDURE AddHours*(VAR dt: DateTime; hours : INTEGER);\nVAR days : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.hour := dt.hour + hours;\n\tdays := dt.hour DIV 24;\n\tdt.hour := dt.hour MOD 24;\n\tIF (dt.hour < 0) THEN\n\t\tdt.hour := dt.hour + 24;\n\t\tDEC(days);\n\tEND;\n\tIF (days # 0) THEN AddDays(dt, days); END;\n\tASSERT(IsValid(dt));\nEND AddHours;\n\n(* AddMinutes -- Add/Subtract a number of minutes to/from date.\nThis will adjust date.hour, date.day, date.month and date.year\nif necessary *)\nPROCEDURE AddMinutes*(VAR dt: DateTime; minutes : INTEGER);\nVAR hours : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.minute := dt.minute + minutes;\n\thours := dt.minute DIV 60;\n\tdt.minute := dt.minute MOD 60;\n\tIF (dt.minute < 0) THEN\n\t\tdt.minute := dt.minute + 60;\n\t\tDEC(hours);\n\tEND;\n\tIF (hours # 0) THEN AddHours(dt, hours); END;\n\tASSERT(IsValid(dt));\nEND AddMinutes;\n\n(* AddSeconds -- Add/Subtract a number of seconds to/from date.\nThis will adjust date.minute, date.hour, date.day, date.month and\ndate.year if necessary *)\nPROCEDURE AddSeconds*(VAR dt: DateTime; seconds : INTEGER);\nVAR minutes : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.second := dt.second + seconds;\n\tminutes := dt.second DIV 60;\n\tdt.second := dt.second MOD 60;\n\tIF (dt.second < 0) THEN\n\t\tdt.second := dt.second + 60;\n\t\tDEC(minutes);\n\tEND;\n\tIF (minutes # 0) THEN AddMinutes(dt, minutes); END;\n\tASSERT(IsValid(dt));\nEND AddSeconds;\n\n\n(* IsDateString -- return TRUE if the ARRAY OF CHAR is 10 characters\nlong and is either in the form of YYYY-MM-DD or MM/DD/YYYY where\nY, M and D are digits.\nNOTE: is DOES NOT check the ranges of the digits. *)\nPROCEDURE IsDateString*(inline : ARRAY OF CHAR) : BOOLEAN;\nVAR\n    test : BOOLEAN; i, pos : INTEGER;\n    src : ARRAY MAXSTR OF CHAR;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    test := FALSE;\n    IF Strings.Length(src) = 10 THEN\n        pos := Strings.Pos(\"-\", src, 0);\n        IF pos > 0 THEN\n            IF (src[4] = \"-\") & (src[7] = \"-\") THEN\n                test := TRUE;\n                FOR i := 0 TO 9 DO\n                    IF (i # 4) & (i # 7) THEN\n                       IF Chars.IsDigit(src[i]) = FALSE THEN\n                           test := FALSE;\n                       END;\n                    END;\n                END;\n            ELSE\n                test := FALSE;\n            END;\n        END;\n        pos := Strings.Pos(\"/\", src, 0);\n        IF pos > 0 THEN\n            IF (src[2] = \"/\") & (src[5] = \"/\") THEN\n                test := TRUE;\n                FOR i := 0 TO 9 DO\n                    IF (i # 2) & (i # 5) THEN\n                        IF Chars.IsDigit(src[i]) = FALSE THEN\n                            test := FALSE;\n                        END;\n                    END;\n                END;\n            ELSE\n                test := FALSE;\n            END;\n        END;\n    END;\n    RETURN test\nEND IsDateString;\n\n(* IsTimeString -- return TRUE if the ARRAY OF CHAR has 4 to 8\ncharacters in the form of H:MM, HH:MM, HH:MM:SS where H, M and S\nare digits. *)\nPROCEDURE IsTimeString*(inline : ARRAY OF CHAR) : BOOLEAN;\nVAR\n    test : BOOLEAN;\n    l : INTEGER;\n    src : ARRAY MAXSTR OF CHAR;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    (* remove any trailing am/pm suffixes *)\n    IF Chars.EndsWith(\"m\", src) THEN\n        IF Chars.EndsWith(\"am\", src) THEN\n            Chars.TrimSuffix(\"am\", src);\n        ELSE\n            Chars.TrimSuffix(\"pm\", src);\n        END;\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"M\", src) THEN\n        Chars.TrimSuffix(\"AM\", src);\n        Chars.TrimSuffix(\"PM\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"p\", src) THEN\n        Chars.TrimSuffix(\"p\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"P\", src) THEN\n        Chars.TrimSuffix(\"P\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"a\", src) THEN\n        Chars.TrimSuffix(\"a\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"A\", src) THEN\n        Chars.TrimSuffix(\"A\", src);\n        Chars.TrimSpace(src);\n    END;\n    Strings.Extract(src, 0, 8, src);\n    test := FALSE;\n    l := Strings.Length(src);\n    IF (l = 4) THEN\n        IF Chars.IsDigit(src[0]) & (src[1] = \":\") &\n            Chars.IsDigit(src[2]) & Chars.IsDigit(src[3]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSIF (l = 5) THEN\n        IF Chars.IsDigit(src[0]) & Chars.IsDigit(src[1]) &\n            (src[2] = \":\") &\n            Chars.IsDigit(src[3]) & Chars.IsDigit(src[4]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSIF (l = 8) THEN\n        IF Chars.IsDigit(src[0]) & Chars.IsDigit(src[1]) &\n            (src[2] = \":\") &\n            Chars.IsDigit(src[3]) & Chars.IsDigit(src[4]) &\n            (src[5] = \":\") &\n            Chars.IsDigit(src[6]) & Chars.IsDigit(src[7]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSE\n        test := FALSE;\n    END;\n    RETURN test\nEND IsTimeString;\n\n(* ParseDate -- parses a date string in YYYY-MM-DD or\nMM/DD/YYYY format. *)\nPROCEDURE ParseDate*(inline : ARRAY OF CHAR;\n                     VAR year, month, day : INTEGER) : BOOLEAN;\nVAR src, tmp : ARRAY MAXSTR OF CHAR; ok, b : BOOLEAN;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.Clear(tmp);\n    ok := FALSE;\n\tIF IsDateString(src) THEN\n        (* LIMITATION: Need to allow for more than 4 digit years! *)\n        IF (src[2] = \"/\") & (src[5] = \"/\") THEN\n            ok := TRUE;\n            Strings.Extract(src, 0, 2, tmp);\n            Convert.StringToInt(tmp, month, b);\n            ok := ok & b;\n            Strings.Extract(src, 4, 2, tmp);\n            Convert.StringToInt(tmp, day, b);\n            ok := ok & b;\n            Strings.Extract(src, 6, 4, tmp);\n            Convert.StringToInt(tmp, year, b);\n            ok := ok & b;\n        ELSIF (src[4] = \"-\") & (src[7] = \"-\") THEN\n            ok := TRUE;\n            Strings.Extract(src, 0, 4, tmp);\n            Convert.StringToInt(tmp, year, b);\n            ok := ok & b;\n            Strings.Extract(src, 5, 2, tmp);\n            Convert.StringToInt(tmp, month, b);\n            ok := ok & b;\n            Strings.Extract(src, 8, 2, tmp);\n            Convert.StringToInt(tmp, day, b);\n            ok := ok & b;\n        ELSE\n            ok := FALSE;\n        END;\n    END;\n    RETURN ok\nEND ParseDate;\n\n(* ParseTime -- procedure for parsing time strings into hour,\nminute, second. Returns TRUE on successful parse, FALSE otherwise *)\nPROCEDURE ParseTime*(inline : ARRAY OF CHAR;\n                     VAR hour, minute, second : INTEGER) : BOOLEAN;\nVAR src, tmp : ARRAY MAXSTR OF CHAR;\n    ok : BOOLEAN; cur, pos, l : INTEGER;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.Clear(tmp);\n\tIF IsTimeString(src) THEN\n        ok := TRUE;\n        cur := 0; pos := 0;\n        pos := Strings.Pos(\":\", src, cur);\n        IF pos > 0 THEN\n        (* Get Hour *)\n            Strings.Extract(src, cur, pos - cur, tmp);\n            Convert.StringToInt(tmp, hour, ok);\n            IF ok THEN\n                (* Get Minute *)\n                cur := pos + 1;\n                Strings.Extract(src, cur, 2, tmp);\n                Convert.StringToInt(tmp, minute, ok);\n                IF ok THEN\n                    (* Get second, optional, default to zero *)\n                    pos := Strings.Pos(\":\", src, cur);\n                    IF pos > 0 THEN\n                        cur := pos + 1;\n                        Strings.Extract(src, cur, 2, tmp);\n                        Convert.StringToInt(tmp, second, ok);\n                        cur := cur + 2;\n                    ELSE\n                        second := 0;\n                    END;\n                    (* Get AM/PM, optional, adjust hour if PM *)\n                    l := Strings.Length(src);\n                    WHILE (cur < l) & Chars.IsSpace(src[cur]) DO\n                        cur := cur + 1;\n                    END;\n                    Strings.Extract(src, cur, 2, tmp);\n                    Chars.TrimSpace(tmp);\n                    IF Chars.Equal(tmp, \"PM\") OR Chars.Equal(tmp, \"pm\") THEN\n                        hour := hour + 12;\n                    END;\n                ELSE\n                    ok := FALSE;\n                END;\n            END;\n        ELSE\n            ok := FALSE;\n        END;\n    ELSE\n        ok := FALSE;\n    END;\n    IF ok THEN\n        ok := ((hour >= 0) & (hour <= 23)) &\n            ((minute >= 0) & (minute <= 59)) &\n                ((second >= 0) & (second <= 59));\n    END;\n    RETURN ok\nEND ParseTime;\n\n\n(* Parse accepts a date array of chars in either dates, times\nor dates and times separate by spaces. Date formats supported\ninclude YYYY-MM-DD, MM/DD/YYYY. Time formats include\nH:MM, HH:MM, H:MM:SS, HH:MM:SS with 'a', 'am', 'p', 'pm'\nsuffixes.  Dates and times can also be accepted as JSON\nexpressions with the individual time compontents are specified\nas attributes, e.g. {\"year\": 1998, \"month\": 12, \"day\": 10,\n\"hour\": 11, \"minute\": 4, \"second\": 3}.\nParse returns TRUE on successful parse, FALSE otherwise.\n\nBUG: Assumes a 4 digit year.\n*)\nPROCEDURE Parse*(inline : ARRAY OF CHAR; VAR dt: DateTime) : BOOLEAN;\nVAR src, ds, ts, tmp : ARRAY SHORTSTR OF CHAR; ok, okDate, okTime : BOOLEAN;\n    pos, year, month, day, hour, minute, second : INTEGER;\nBEGIN\n    dt.year := 0;\n    dt.month := 0;\n    dt.day := 0;\n    dt.hour := 0;\n    dt.minute := 0;\n    dt.second := 0;\n    Chars.Clear(tmp);\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    (* Split into Date and Time components *)\n    pos := Strings.Pos(\" \", src, 0);\n    IF pos >= 0 THEN\n        Strings.Extract(src, 0, pos, ds);\n        pos := pos + 1;\n        Strings.Extract(src, pos, Strings.Length(src) - pos, ts);\n    ELSE\n        Chars.Set(src, ds);\n        Chars.Set(src, ts);\n    END;\n    ok := FALSE;\n    IF IsDateString(ds) THEN\n        ok := TRUE;\n        okDate := ParseDate(ds, year, month, day);\n        SetDate(year, month, day, dt);\n        ok := ok & okDate;\n    END;\n    IF IsTimeString(ts) THEN\n        ok := ok OR okDate;\n        okTime := ParseTime(ts, hour, minute, second);\n        SetTime(hour, minute, second, dt);\n        ok := ok & okTime;\n    END;\n    RETURN ok\nEND Parse;\n\nBEGIN\n    Chars.Set(\"January\", Months[0]);\n    Chars.Set(\"February\", Months[1]);\n    Chars.Set(\"March\", Months[2]);\n    Chars.Set(\"April\", Months[3]);\n    Chars.Set(\"May\", Months[4]);\n    Chars.Set(\"June\", Months[5]);\n    Chars.Set(\"July\", Months[6]);\n    Chars.Set(\"August\", Months[7]);\n    Chars.Set(\"September\", Months[8]);\n    Chars.Set(\"October\", Months[9]);\n    Chars.Set(\"November\", Months[10]);\n    Chars.Set(\"December\", Months[11]);\n\n    Chars.Set(\"Sunday\", Days[0]);\n    Chars.Set(\"Monday\", Days[1]);\n    Chars.Set(\"Tuesday\", Days[2]);\n    Chars.Set(\"Wednesday\", Days[3]);\n    Chars.Set(\"Thursday\", Days[4]);\n    Chars.Set(\"Friday\", Days[5]);\n    Chars.Set(\"Saturday\", Days[6]);\n\n    DaysInMonth[0] := 31; (* January *)\n    DaysInMonth[1] := 28; (* February *)\n    DaysInMonth[2] := 31; (* March *)\n    DaysInMonth[3] := 30; (* April *)\n    DaysInMonth[4] := 31; (* May *)\n    DaysInMonth[5] := 30; (* June *)\n    DaysInMonth[6] := 31; (* July *)\n    DaysInMonth[7] := 31; (* August *)\n    DaysInMonth[8] := 30; (* September *)\n    DaysInMonth[9] := 31; (* October *)\n    DaysInMonth[10] := 30; (* November *)\n    DaysInMonth[11] := 31; (* December *)\n\nEND Dates.\n\n~~~\n\nPostscript: In this article I included a reference to the module\n**[Chars](Chars.html)**. This is a non-standard module I wrote\nfor Oberon-07. Here is a link to [Chars](Chars.Mod). RSD, 2021-05-06\n\n### Next, Previous\n\n+ Next [Beyond Oakwood, Modules and Aliases](/blog/2021/05/16/Beyond-Oakwood-Modules-and-Aliases.html)\n+ Previous [Assemble Pages](/blog/2020/10/19/Assemble-pages.html)\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-11-27",
        "keywords": [
          "Oberon-07",
          "C-shared",
          "obnc"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 14,
        "series": "Mostly Oberon",
        "title": "Dates & Clock"
      },
      "url": "posts/2020/11/27/Dates-and-Clock.json"
    },
    {
      "content": "\nDates\n=====\n\nThis module provides minimal date time records and procedures\nfor working with dates in YYYY-MM-DD and MM/DD/YYYY format and\ntimes in H:MM, HH:MM and HH:MM:SS formats.\n\n\nSet\n: Set a DateTime record providing year, month, day, hour, minute and second as integers and the DateTime record to be populated.\n\nSetDate\n: Set the date portion of a DateTime record, leaves the hour, minute and second attributes unmodified. \n\nSetTime\n: Set the time portion of a DateTime record, leaves the year, month, date attributes unmodified.\n\nCopy\n: Copy the attributes of one DateTime record into another DateTime record\n\nToChars\n: Given a DateTime record and a format constant, render the DateTime record to an array of CHAR.\n\nLeapYear\n: Given a DateTime record check to see if it is a  leap year.\n\nNumOfDays\n: Given a year and monoth return the number of days in the month.\n\nIsValid\n: Check to see if the all attributes in a DateTime record are valid.\n\nOberonToDateTime\n: Convert oberon date and time integer values into a DateTime record\n\nDateTimeToOberon\n: Convert a DateTime record into Oberon date and time integer values.\n\nNow\n: Set a DateTime record's attributes to the current time, depends of on the implementation of Clock.Mod.\n\nWeekDate\n: Given a DateTime record calculates the year, week and weekday as integers values.\n\nEqual\n: Checks to DateTime records to see if they have equivalent attribute values.\n\nCompare\n: Compare two DateTime records, if t1 < t2 then return -1, if t1 = t2 return 0 else if t1 > t2 return 1.\n\nCompareDate\n: Compare the year, month, day attributes of two DateTime records following the approach used in Compare.\n\nCompareTime\n: Compare the hour, minute, second attributes of two DateTime records following the approach used in Compare.\n\nTimeDifference\n: Take the differ of two DateTime records setting the difference in integer values for days, hours, minutes and seconds.\n\nAddYears\n: Add years to a DateTime record. Years is a positive or negative integer.\n\nAddMonths\n: Add months to a DateTime record. Months is either a positive or negative integer. Months will propogate to year in the DataTime record.\n\nAddDays\n: Add days to a DateTime record. Days can be either a positive or negative integer.  Days will propogate to month and year attributes of the DateTime record.\n\nAddHours\n: Add hours to a DateTime record. Hours can be either a positive or negative integer.  Hours will propogate to day, month and year attributes of the DateTime record.\n\nAddMinutes\n: Add minutes to a DateTime record. Minutes can be either a positive or negative integer. Minutes will propogate to hour, day, month and year attributes of the DateTime record.\n\nAddSeconds\n: Add seconds to a DateTime record. Seconds can be either a positive or negatice integer.  Seconds will propogate to minute, hour, day, month, year attributes of the DateTime record.\n\nIsValidDate\n: IsValidDate checks the day, month, year attributes of a DateTime record and validates the values. Returns TRUE if everthing is ok, FALSE otherwise.\n\nIsValidTime\n: IsValidTime checks the hour, minute, second attributes of a DateTime record and validates the values. Returns TRUE if everthing is ok, FALSE otherwise.\n\nIsDateString\n: Checks to see if an ARRAY OF CHAR is a parsiable date string (e.g. in 2020-11-26 or 11/26/2020). Returns TRUE if the string is parsable, FALSE otherwise. NOTE: It does NOT check to see if the day, month or year values are valid. It only checks the format of the string.\n\nIsTimeString\n: Checks to see if an ARRAY OF CHAR is a parsible time string (e.g. 3:32, 14:55, 09:19:22). NOTE: It only checks the format and does not check the hour, minute and second values.\n\nParseDate\n: Parse an ARRAY OF CHAR setting the values if year, month and day. Return TRUE on successful parse and FALSE otherwise.\n\nParseTime\n: Parse an ARRAY OF CHAR setting the values of hour, minute and second. Return TRUE on succesful parse and FALSE otherwise.\n\nParse\n: Parse an ARRAY OF CHAR setting the attributes of a DateTime record. Return TURE on success, FALSE otherwise.\n\nLimitations\n-----------\n\nDates are presumed to be in the YYYY-DD-MM or MM/DD/YYYY formats.\nDoes not handle dates with spelled out months or weekdays.\n\nTime portion of the date object doesn't include time zone.\nThis will need to be rectified at some point.\n\n\n\nSource code for **Dates.Mod**\n-----------------------------\n\n~~~\n(* Dates -- this module was inspired by the A2's Dates module, adapted\n   for Oberon-07 and a POSIX system. It provides an assortment of procedures\n   for working with a simple datetime record.\n\nCopyright (C) 2020 R. S. Doiel\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\n@Author R. S. Doiel, <rsdoiel@gmail.com>\ncopyright (c) 2020, all rights reserved.\nThis software is released under the GNU AGPL\nSee http://www.gnu.org/licenses/agpl-3.0.html\n*)\nMODULE Dates;\nIMPORT Chars, Strings, Clock, Convert := extConvert; (*, Out; **)\n\nCONST\n    MAXSTR = Chars.MAXSTR;\n    SHORTSTR = Chars.SHORTSTR;\n\n    YYYYMMDD* = 1; (* YYYY-MM-DD format *)\n    MMDDYYYY* = 2; (* MM/DD/YYYY format *)\n    YYYYMMDDHHMMSS* = 3; (* YYYY-MM-DD HH:MM:SS format *)\n\nTYPE\n    DateTime* = RECORD\n        year*, month*, day*, hour*, minute*, second* : INTEGER\n    END;\n\nVAR\n    (* Month names, January = 0, December = 11 *)\n    Months*: ARRAY 23 OF ARRAY 10 OF CHAR; \n    (* Days of week, Monday = 0, Sunday = 6 *)\n    Days*: ARRAY 7 OF ARRAY 10 OF CHAR;\n    DaysInMonth: ARRAY 12 OF INTEGER;\n\n\n(* Set -- initialize a date record year, month and day values *)\nPROCEDURE Set*(year, month, day, hour, minute, second : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.year := year;\n    dt.month := month;\n    dt.day := day;\n    dt.hour := hour;\n    dt.minute := minute;\n    dt.second := second;\nEND Set;\n\n(* SetDate -- set a Date record's year, month and day attributes *)\nPROCEDURE SetDate*(year, month, day : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.year := year;\n    dt.month := month;\n    dt.day := day;\nEND SetDate;\n\n(* SetTime -- set a Date record's hour, minute, second attributes *)\nPROCEDURE SetTime*(hour, minute, second : INTEGER; VAR dt: DateTime);\nBEGIN\n    dt.hour := hour;\n    dt.minute := minute;\n    dt.second := second;\nEND SetTime;\n\n(* Copy -- copy the values from one date record to another *)\nPROCEDURE Copy*(src : DateTime; VAR dest : DateTime);\nBEGIN\n    dest.year := src.year;\n    dest.month := src.month;\n    dest.day := src.day;\n    dest.hour := src.hour;\n    dest.minute := src.minute;\n    dest.second := src.second;\nEND Copy;\n\n(* ToChars -- converts a date record into an array of chars using\nthe format constant. Formats supported are YYYY-MM-DD HH:MM:SS\nor MM/DD/YYYY HH:MM:SS. *)\nPROCEDURE ToChars*(dt: DateTime; fmt : INTEGER; VAR src : ARRAY OF CHAR);\nVAR ok : BOOLEAN;\nBEGIN\n    Chars.Clear(src);\n    IF fmt = YYYYMMDD THEN\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n    ELSIF fmt = MMDDYYYY THEN\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"/\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n        ok := Chars.AppendChar(\"/\", src);\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n    ELSIF fmt = YYYYMMDDHHMMSS THEN\n        Chars.AppendInt(dt.year, 4, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.month, 2, \"0\", src);\n        ok := Chars.AppendChar(\"-\", src);\n        Chars.AppendInt(dt.day, 2, \"0\", src);\n        ok := Chars.AppendChar(\" \", src);\n        Chars.AppendInt(dt.hour, 2, \"0\", src);\n        ok := Chars.AppendChar(\":\", src);\n        Chars.AppendInt(dt.minute, 2, \"0\", src);\n        ok := Chars.AppendChar(\":\", src);\n        Chars.AppendInt(dt.second, 2, \"0\", src);\n    END;\nEND ToChars;\n\n(* \n * Date and Time functions very much inspired by A2 but\n * adapted for use in Oberon-07 and OBNC compiler.\n *)\n\n(* LeapYear -- returns TRUE if 'year' is a leap year *)\nPROCEDURE LeapYear*(year: INTEGER): BOOLEAN;\nBEGIN\n\tRETURN (year > 0) & (year MOD 4 = 0) & (~(year MOD 100 = 0) OR (year MOD 400 = 0))\nEND LeapYear;\n\n(* NumOfDays -- number of days, returns the number of days in that month *)\nPROCEDURE NumOfDays*(year, month: INTEGER): INTEGER;\nVAR result : INTEGER;\nBEGIN\n    result := 0;\n\tDEC(month);\n\tIF ((month >= 0) & (month < 12)) THEN\n\t    IF (month = 1) & LeapYear(year) THEN \n            result := DaysInMonth[1]+1;\n\t    ELSE \n            result := DaysInMonth[month];\n\t    END;\n    END;\n    RETURN result\nEND NumOfDays;\n\n(* IsValid -- checks if the attributes set in a DateTime record are valid *)\nPROCEDURE IsValid*(dt: DateTime): BOOLEAN;\nBEGIN\n\tRETURN ((dt.year > 0) & (dt.month > 0) & (dt.month <= 12) & (dt.day > 0) & (dt.day <= NumOfDays(dt.year, dt.month)) & (dt.hour >= 0) & (dt.hour < 24) & (dt.minute >= 0) & (dt.minute < 60) & (dt.second >= 0) & (dt.second < 60))\nEND IsValid;\n\n(* IsValidDate -- checks to see if a datetime record has valid day, month and year\nattributes *)\nPROCEDURE IsValidDate*(dt: DateTime) : BOOLEAN;\nBEGIN\n\tRETURN (dt.year > 0) & (dt.month > 0) & (dt.month <= 12) & (dt.day > 0) & (dt.day <= NumOfDays(dt.year, dt.month))\nEND IsValidDate;\n\n(* IsValidTime -- checks if the hour, minute, second attributes set in a DateTime record are valid *)\nPROCEDURE IsValidTime*(dt: DateTime): BOOLEAN;\nBEGIN\n\tRETURN (dt.hour >= 0) & (dt.hour < 24) & (dt.minute >= 0) & (dt.minute < 60) & (dt.second >= 0) & (dt.second < 60)\nEND IsValidTime;\n\n\n(* OberonToDateTime -- convert an Oberon date/time to a DateTime \nstructure *)\nPROCEDURE OberonToDateTime*(Date, Time: INTEGER; VAR dt : DateTime);\nBEGIN\n\tdt.second := Time MOD 64; Time := Time DIV 64;\n\tdt.minute := Time MOD 64; Time := Time DIV 64;\n\tdt.hour := Time MOD 24;\n\tdt.day := Date MOD 32; Date := Date DIV 32;\n\tdt.month := (Date MOD 16) + 1; Date := Date DIV 16;\n\tdt.year := Date;\nEND OberonToDateTime;\n\n(* DateTimeToOberon -- convert a DateTime structure to an Oberon \ndate/time *)\nPROCEDURE DateTimeToOberon*(dt: DateTime; VAR date, time: INTEGER);\nBEGIN\n\tIF IsValid(dt) THEN\n\tdate := (dt.year)*512 + dt.month*32 + dt.day;\n\ttime := dt.hour*4096 + dt.minute*64 + dt.second\n    ELSE\n        date := 0;\n        time := 0;\n    END;\nEND DateTimeToOberon;\n\n(* Now -- returns the current date and time as a DateTime record. *)\nPROCEDURE Now*(VAR dt: DateTime);\nVAR d, t: INTEGER;\nBEGIN\n\tClock.Get(t, d);\n\tOberonToDateTime(d, t, dt);\nEND Now;\n\n\n(* WeekDate -- returns the ISO 8601 year number, week number &\nweek day (Monday=1, ....Sunday=7) \nAlgorithm is by Rick McCarty, http://personal.ecu.edu/mccartyr/ISOwdALG.txt\n*)\nPROCEDURE WeekDate*(dt: DateTime; VAR year, week, weekday: INTEGER);\nVAR doy, i, yy, c, g, jan1: INTEGER; leap: BOOLEAN;\nBEGIN\n\tIF IsValid(dt) THEN\n\t\tleap := LeapYear(dt.year);\n\t\tdoy := dt.day; i := 0;\n\t\tWHILE (i < (dt.month - 1)) DO \n            doy := doy + DaysInMonth[i];\n            INC(i);\n        END;\n\t\tIF leap & (dt.month > 2) THEN \n            INC(doy);\n        END;\n\t\tyy := (dt.year - 1) MOD 100; \n        c := (dt.year - 1) - yy; \n        g := (yy + yy) DIV 4;\n\t\tjan1 := 1 + (((((c DIV 100) MOD 4) * 5) + g) MOD 7);\n\n\t\tweekday := 1 + (((doy + (jan1 - 1)) - 1) MOD 7);\n\n\t\tIF (doy <= (8 - jan1)) & (jan1 > 4) THEN (* falls in year-1 ? *)\n\t\t\tyear := dt.year - 1;\n\t\t\tIF (jan1 = 5) OR ((jan1 = 6) & LeapYear(year)) THEN \n                week := 53;\n\t\t\tELSE \n                week := 52;\n\t\t\tEND;\n\t\tELSE\n\t\t\tIF leap THEN \n                i := 366;\n            ELSE \n                i := 365;\n            END;\n\t\t\tIF ((i - doy) < (4 - weekday)) THEN\n\t\t\t\tyear := dt.year + 1;\n\t\t\t\tweek := 1;\n\t\t\tELSE\n\t\t\t\tyear := dt.year;\n\t\t\t\ti := doy + (7-weekday) + (jan1-1);\n\t\t\t\tweek := i DIV 7;\n\t\t\t\tIF (jan1 > 4) THEN \n                    DEC(week);\n                END;\n\t\t\tEND;\n\t\tEND;\n\tELSE\n\t\tyear := -1; week := -1; weekday := -1;\n\tEND;\nEND WeekDate;\n\n(* Equal -- compare to date records to see if they are equal values *)\nPROCEDURE Equal*(t1, t2: DateTime) : BOOLEAN;\nBEGIN\n\tRETURN ((t1.second = t2.second) & (t1.minute = t2.minute) & (t1.hour = t2.hour) & (t1.day = t2.day) & (t1.month = t2.month) & (t1.year = t2.year))\nEND Equal;\n\n(* compare -- used in Compare only for comparing specific values,\n    returning an appropriate -1, 0, 1 *)\nPROCEDURE compare(t1, t2 : INTEGER) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tIF (t1 < t2) THEN \n        result := -1;\n\tELSIF (t1 > t2) THEN \n        result := 1;\n\tELSE \n        result := 0;\n\tEND;\n\tRETURN result\nEND compare;\n\n(* Compare -- returns -1 if (t1 < t2), 0 if (t1 = t2) or 1 if (t1 >  t2) *)\nPROCEDURE Compare*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.year, t2.year);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.month, t2.month);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.day, t2.day);\n\t\t\tIF (result = 0) THEN\n\t\t\t\tresult := compare(t1.hour, t2.hour);\n\t\t\t\tIF (result = 0) THEN\n\t\t\t\t\tresult := compare(t1.minute, t2.minute);\n\t\t\t\t\tIF (result = 0) THEN\n\t\t\t\t\t\tresult := compare(t1.second, t2.second);\n\t\t\t\t\tEND;\n\t\t\t\tEND;\n\t\t\tEND;\n\t\tEND;\n\tEND;\n\tRETURN result\nEND Compare;\n\n(* CompareDate -- compare day, month and year values only *)\nPROCEDURE CompareDate*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.year, t2.year);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.month, t2.month);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.day, t2.day);\n\t\tEND;\n\tEND;\n\tRETURN result\nEND CompareDate;\n\n(* CompareTime -- compare second, minute and hour values only *)\nPROCEDURE CompareTime*(t1, t2: DateTime) : INTEGER;\nVAR result : INTEGER;\nBEGIN\n\tresult := compare(t1.hour, t2.hour);\n\tIF (result = 0) THEN\n\t\tresult := compare(t1.minute, t2.minute);\n\t\tIF (result = 0) THEN\n\t\t\tresult := compare(t1.second, t2.second);\n\t\tEND;\n\tEND;\n\tRETURN result\nEND CompareTime;\n\n\n\n(* TimeDifferences -- returns the absolute time difference between \nt1 and t2.\n\nNote that leap seconds are not counted, \nsee http://www.eecis.udel.edu/~mills/leap.html *)\nPROCEDURE TimeDifference*(t1, t2: DateTime; VAR days, hours, minutes, seconds : INTEGER);\nCONST SecondsPerMinute = 60; SecondsPerHour = 3600; SecondsPerDay = 86400;\nVAR start, end: DateTime; year, month, second : INTEGER;\nBEGIN\n\tIF (Compare(t1, t2) = -1) THEN \n        start := t1; \n        end := t2; \n    ELSE \n        start := t2; \n        end := t1; \n    END;\n\tIF (start.year = end.year) & (start.month = end.month) & (start.day = end.day) THEN\n\t\tsecond := end.second - start.second + ((end.minute - start.minute) * SecondsPerMinute) + ((end.hour - start.hour) * SecondsPerHour);\n\t\tdays := 0;\n        hours := 0;\n        minutes := 0;\n\tELSE\n\t\t(* use start date/time as reference point *)\n\t\t(* seconds until end of the start.day *)\n\t\tsecond := (SecondsPerDay - start.second) - (start.minute * SecondsPerMinute) - (start.hour * SecondsPerHour);\n\t\tIF (start.year = end.year) & (start.month = end.month) THEN\n\t\t\t(* days between start.day and end.day *)\n\t\t\tdays := (end.day - start.day) - 1;\n\t\tELSE\n\t\t\t(* days until start.month ends excluding start.day *)\n\t\t\tdays := NumOfDays(start.year, start.month) - start.day;\n\t\t\tIF (start.year = end.year) THEN\n\t\t\t\t(* months between start.month and end.month *)\n\t\t\t\tFOR month := start.month + 1 TO end.month - 1 DO\n\t\t\t\t\tdays := days + NumOfDays(start.year, month);\n\t\t\t\tEND;\n\t\t\tELSE\n\t\t\t\t(* days until start.year ends (excluding start.month) *)\n\t\t\t\tFOR month := start.month + 1 TO 12 DO\n\t\t\t\t\tdays := days + NumOfDays(start.year, month);\n\t\t\t\tEND;\n\t\t\t\tFOR year := start.year + 1 TO end.year - 1 DO (* days between start.years and end.year *)\n\t\t\t\t\tIF LeapYear(year) THEN days := days + 366; ELSE days := days + 365; END;\n\t\t\t\tEND;\n\t\t\t\tFOR month := 1 TO end.month - 1 DO (* days until we reach end.month in end.year *)\n\t\t\t\t\tdays := days + NumOfDays(end.year, month);\n\t\t\t\tEND;\n\t\t\tEND;\n\t\t\t(* days in end.month until reaching end.day excluding end.day *)\n\t\t\tdays := (days + end.day) - 1;\n\t\tEND;\n\t\t(* seconds in end.day *)\n\t\tsecond := second + end.second + (end.minute * SecondsPerMinute) + (end.hour * SecondsPerHour);\n\tEND;\n\tdays := days + (second DIV SecondsPerDay); second := (second MOD SecondsPerDay);\n\thours := (second DIV SecondsPerHour); second := (second MOD SecondsPerHour);\n\tminutes := (second DIV SecondsPerMinute); second := (second MOD SecondsPerMinute);\n\tseconds := second;\nEND TimeDifference;\n\n(* AddYear -- Add/Subtract a number of years to/from date *)\nPROCEDURE AddYears*(VAR dt: DateTime; years : INTEGER);\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.year := dt.year + years;\n\tASSERT(IsValid(dt));\nEND AddYears;\n\n(* AddMonths -- Add/Subtract a number of months to/from date.\nThis will adjust date.year if necessary *)\nPROCEDURE AddMonths*(VAR dt: DateTime; months : INTEGER);\nVAR years : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tyears := months DIV 12;\n\tdt.month := dt.month + (months MOD 12);\n\tIF (dt.month > 12) THEN\n\t\tdt.month := dt.month - 12;\n\t\tINC(years);\n\tELSIF (dt.month < 1) THEN\n\t\tdt.month := dt.month + 12;\n\t\tDEC(years);\n\tEND;\n\tIF (years # 0) THEN AddYears(dt, years); END;\n\tASSERT(IsValid(dt));\nEND AddMonths;\n\n(* AddDays --  Add/Subtract a number of days to/from date.\nThis will adjust date.month and date.year if necessary *)\nPROCEDURE AddDays*(VAR dt: DateTime; days : INTEGER);\nVAR nofDaysLeft : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tIF (days > 0) THEN\n\t\tWHILE (days > 0) DO\n\t\t\tnofDaysLeft := NumOfDays(dt.year, dt.month) - dt.day;\n\t\t\tIF (days > nofDaysLeft) THEN\n\t\t\t\tdt.day := 1;\n\t\t\t\tAddMonths(dt, 1);\n\t\t\t\tdays := days - nofDaysLeft - 1; (* -1 because we consume the first day of the next month *)\n\t\t\tELSE\n\t\t\t\tdt.day := dt.day + days;\n\t\t\t\tdays := 0;\n\t\t\tEND;\n\t\tEND;\n\tELSIF (days < 0) THEN\n\t\tdays := -days;\n\t\tWHILE (days > 0) DO\n\t\t\tnofDaysLeft := dt.day - 1;\n\t\t\tIF (days > nofDaysLeft) THEN\n\t\t\t\tdt.day := 1; (* otherwise, dt could become an invalid date if the previous month has less days than dt.day *)\n\t\t\t\tAddMonths(dt, -1);\n\t\t\t\tdt.day := NumOfDays(dt.year, dt.month);\n\t\t\t\tdays := days - nofDaysLeft - 1; (* -1 because we consume the last day of the previous month *)\n\t\t\tELSE\n\t\t\t\tdt.day := dt.day - days;\n\t\t\t\tdays := 0;\n\t\t\tEND;\n\t\tEND;\n\tEND;\n\tASSERT(IsValid(dt));\nEND AddDays;\n\n(* AddHours -- Add/Subtract a number of hours to/from date.\nThis will adjust date.day, date.month and date.year if necessary *)\nPROCEDURE AddHours*(VAR dt: DateTime; hours : INTEGER);\nVAR days : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.hour := dt.hour + hours;\n\tdays := dt.hour DIV 24;\n\tdt.hour := dt.hour MOD 24;\n\tIF (dt.hour < 0) THEN\n\t\tdt.hour := dt.hour + 24;\n\t\tDEC(days);\n\tEND;\n\tIF (days # 0) THEN AddDays(dt, days); END;\n\tASSERT(IsValid(dt));\nEND AddHours;\n\n(* AddMinutes -- Add/Subtract a number of minutes to/from date.\nThis will adjust date.hour, date.day, date.month and date.year \nif necessary *)\nPROCEDURE AddMinutes*(VAR dt: DateTime; minutes : INTEGER);\nVAR hours : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.minute := dt.minute + minutes;\n\thours := dt.minute DIV 60;\n\tdt.minute := dt.minute MOD 60;\n\tIF (dt.minute < 0) THEN\n\t\tdt.minute := dt.minute + 60;\n\t\tDEC(hours);\n\tEND;\n\tIF (hours # 0) THEN AddHours(dt, hours); END;\n\tASSERT(IsValid(dt));\nEND AddMinutes;\n\n(* AddSeconds -- Add/Subtract a number of seconds to/from date.\nThis will adjust date.minute, date.hour, date.day, date.month and\ndate.year if necessary *)\nPROCEDURE AddSeconds*(VAR dt: DateTime; seconds : INTEGER);\nVAR minutes : INTEGER;\nBEGIN\n\tASSERT(IsValid(dt));\n\tdt.second := dt.second + seconds;\n\tminutes := dt.second DIV 60;\n\tdt.second := dt.second MOD 60;\n\tIF (dt.second < 0) THEN\n\t\tdt.second := dt.second + 60;\n\t\tDEC(minutes);\n\tEND;\n\tIF (minutes # 0) THEN AddMinutes(dt, minutes); END;\n\tASSERT(IsValid(dt));\nEND AddSeconds;\n\n\n(* IsDateString -- return TRUE if the ARRAY OF CHAR is 10 characters\nlong and is either in the form of YYYY-MM-DD or MM/DD/YYYY where\nY, M and D are digits. \nNOTE: is DOES NOT check the ranges of the digits. *)\nPROCEDURE IsDateString*(inline : ARRAY OF CHAR) : BOOLEAN;\nVAR \n    test : BOOLEAN; i, pos : INTEGER;\n    src : ARRAY MAXSTR OF CHAR;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    test := FALSE;\n    IF Strings.Length(src) = 10 THEN\n        pos := Strings.Pos(\"-\", src, 0);\n        IF pos > 0 THEN\n            IF (src[4] = \"-\") & (src[7] = \"-\") THEN\n                test := TRUE;\n                FOR i := 0 TO 9 DO\n                    IF (i # 4) & (i # 7) THEN\n                       IF Chars.IsDigit(src[i]) = FALSE THEN\n                           test := FALSE;\n                       END;\n                    END;\n                END;\n            ELSE\n                test := FALSE;\n            END;\n        END;\n        pos := Strings.Pos(\"/\", src, 0);\n        IF pos > 0 THEN\n            IF (src[2] = \"/\") & (src[5] = \"/\") THEN\n                test := TRUE;\n                FOR i := 0 TO 9 DO\n                    IF (i # 2) & (i # 5) THEN\n                        IF Chars.IsDigit(src[i]) = FALSE THEN\n                            test := FALSE;\n                        END;\n                    END;\n                END;\n            ELSE\n                test := FALSE;\n            END;\n        END;\n    END;\n    RETURN test\nEND IsDateString;\n\n(* IsTimeString -- return TRUE if the ARRAY OF CHAR has 4 to 8 \ncharacters in the form of H:MM, HH:MM, HH:MM:SS where H, M and S\nare digits. *)\nPROCEDURE IsTimeString*(inline : ARRAY OF CHAR) : BOOLEAN;\nVAR \n    test : BOOLEAN; \n    l : INTEGER;\n    src : ARRAY MAXSTR OF CHAR;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    (* remove any trailing am/pm suffixes *)\n    IF Chars.EndsWith(\"m\", src) THEN\n        IF Chars.EndsWith(\"am\", src) THEN\n            Chars.TrimSuffix(\"am\", src);\n        ELSE\n            Chars.TrimSuffix(\"pm\", src);\n        END;\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"M\", src) THEN\n        Chars.TrimSuffix(\"AM\", src);\n        Chars.TrimSuffix(\"PM\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"p\", src) THEN\n        Chars.TrimSuffix(\"p\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"P\", src) THEN\n        Chars.TrimSuffix(\"P\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"a\", src) THEN\n        Chars.TrimSuffix(\"a\", src);\n        Chars.TrimSpace(src);\n    ELSIF Chars.EndsWith(\"A\", src) THEN\n        Chars.TrimSuffix(\"A\", src);\n        Chars.TrimSpace(src);\n    END;\n    Strings.Extract(src, 0, 8, src);\n    test := FALSE;\n    l := Strings.Length(src);\n    IF (l = 4) THEN\n        IF Chars.IsDigit(src[0]) & (src[1] = \":\") & \n            Chars.IsDigit(src[2]) & Chars.IsDigit(src[3]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSIF (l = 5) THEN\n        IF Chars.IsDigit(src[0]) & Chars.IsDigit(src[1]) &\n            (src[2] = \":\") & \n            Chars.IsDigit(src[3]) & Chars.IsDigit(src[4]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSIF (l = 8) THEN\n        IF Chars.IsDigit(src[0]) & Chars.IsDigit(src[1]) &\n            (src[2] = \":\") & \n            Chars.IsDigit(src[3]) & Chars.IsDigit(src[4]) & \n            (src[5] = \":\") & \n            Chars.IsDigit(src[6]) & Chars.IsDigit(src[7]) THEN\n            test := TRUE;\n        ELSE\n            test := FALSE;\n        END;\n    ELSE\n        test := FALSE;\n    END;\n    RETURN test\nEND IsTimeString;\n\n(* ParseDate -- parses a date string in YYYY-MM-DD or\nMM/DD/YYYY format. *)\nPROCEDURE ParseDate*(inline : ARRAY OF CHAR; VAR year, month, day : INTEGER) : BOOLEAN;\nVAR src, tmp : ARRAY MAXSTR OF CHAR; ok, b : BOOLEAN;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.Clear(tmp);\n    ok := FALSE;\n\tIF IsDateString(src) THEN\n        (* FIXME: Need to allow for more than 4 digit years! *)\n        IF (src[2] = \"/\") & (src[5] = \"/\") THEN\n            ok := TRUE;\n            Strings.Extract(src, 0, 2, tmp);\n            Convert.StringToInt(tmp, month, b);\n            ok := ok & b;\n            Strings.Extract(src, 4, 2, tmp);\n            Convert.StringToInt(tmp, day, b);\n            ok := ok & b;\n            Strings.Extract(src, 6, 4, tmp);\n            Convert.StringToInt(tmp, year, b);\n            ok := ok & b;\n        ELSIF (src[4] = \"-\") & (src[7] = \"-\") THEN\n            ok := TRUE;\n            Strings.Extract(src, 0, 4, tmp);\n            Convert.StringToInt(tmp, year, b);\n            ok := ok & b;\n            Strings.Extract(src, 5, 2, tmp);\n            Convert.StringToInt(tmp, month, b);\n            ok := ok & b;\n            Strings.Extract(src, 8, 2, tmp);\n            Convert.StringToInt(tmp, day, b);\n            ok := ok & b;\n        ELSE\n            ok := FALSE;\n        END;\n    END;\n    RETURN ok\nEND ParseDate;\n\n(* ParseTime -- procedure for parsing time strings into hour,\nminute, second. Returns TRUE on successful parse, FALSE otherwise *)\nPROCEDURE ParseTime*(inline : ARRAY OF CHAR; VAR hour, minute, second : INTEGER) : BOOLEAN;\nVAR src, tmp : ARRAY MAXSTR OF CHAR; ok : BOOLEAN; cur, pos, l : INTEGER;\nBEGIN\n    Chars.Set(inline, src);\n    Chars.Clear(tmp);\n\tIF IsTimeString(src) THEN\n        ok := TRUE;\n        cur := 0; pos := 0;\n        pos := Strings.Pos(\":\", src, cur);\n        IF pos > 0 THEN\n        (* Get Hour *)\n            Strings.Extract(src, cur, pos - cur, tmp);\n            Convert.StringToInt(tmp, hour, ok);\n            IF ok THEN\n                (* Get Minute *)\n                cur := pos + 1;\n                Strings.Extract(src, cur, 2, tmp);\n                Convert.StringToInt(tmp, minute, ok);\n                IF ok THEN\n                    (* Get second, optional, default to zero *)\n                    pos := Strings.Pos(\":\", src, cur);\n                    IF pos > 0 THEN\n                        cur := pos + 1;\n                        Strings.Extract(src, cur, 2, tmp);\n                        Convert.StringToInt(tmp, second, ok);\n                        cur := cur + 2;\n                    ELSE\n                        second := 0;\n                    END;\n                    (* Get AM/PM, optional, adjust hour if PM *)\n                    l := Strings.Length(src);\n                    WHILE (cur < l) & Chars.IsSpace(src[cur]) DO\n                        cur := cur + 1;\n                    END;\n                    Strings.Extract(src, cur, 2, tmp);\n                    Chars.TrimSpace(tmp);\n                    IF Chars.Equal(tmp, \"PM\") OR Chars.Equal(tmp, \"pm\") THEN\n                        hour := hour + 12;\n                    END;\n                ELSE\n                    ok := FALSE;\n                END;\n            END;\n        ELSE\n            ok := FALSE;\n        END;\n    ELSE\n        ok := FALSE;\n    END;\n    IF ok THEN\n        ok := ((hour >= 0) & (hour <= 23)) &\n            ((minute >= 0) & (minute <= 59)) &\n                ((second >= 0) & (second <= 59));\n    END;\n    RETURN ok\nEND ParseTime;\n\n\n(* Parse accepts a date array of chars in either dates, times\nor dates and times separate by spaces. Date formats supported\ninclude YYYY-MM-DD, MM/DD/YYYY. Time formats include\nH:MM, HH:MM, H:MM:SS, HH:MM:SS with 'a', 'am', 'p', 'pm' \nsuffixes.  Dates and times can also be accepted as JSON \nexpressions with the individual time compontents are specified \nas attributes, e.g. `{\"year\": 1998, \"month\": 12, \"day\": 10,\n\"hour\": 11, \"minute\": 4, \"second\": 3}.\nParse returns TRUE on successful parse, FALSE otherwise.\n\nBUG: Assumes a 4 digit year.\n*) \nPROCEDURE Parse*(inline : ARRAY OF CHAR; VAR dt: DateTime) : BOOLEAN;\nVAR src, ds, ts, tmp : ARRAY SHORTSTR OF CHAR; ok, okDate, okTime : BOOLEAN; \n    pos, year, month, day, hour, minute, second : INTEGER;\nBEGIN\n    dt.year := 0;\n    dt.month := 0;\n    dt.day := 0;\n    dt.hour := 0;\n    dt.minute := 0;\n    dt.second := 0;\n    Chars.Clear(tmp);\n    Chars.Set(inline, src);\n    Chars.TrimSpace(src);\n    (* Split into Date and Time components *)\n    pos := Strings.Pos(\" \", src, 0);\n    IF pos >= 0 THEN\n        Strings.Extract(src, 0, pos, ds);\n        pos := pos + 1;\n        Strings.Extract(src, pos, Strings.Length(src) - pos, ts);\n    ELSE\n        Chars.Set(src, ds);\n        Chars.Set(src, ts);\n    END;\n    ok := FALSE;\n    IF IsDateString(ds) THEN\n        ok := TRUE;\n        okDate := ParseDate(ds, year, month, day);\n        SetDate(year, month, day, dt);\n        ok := ok & okDate;\n    END;\n    IF IsTimeString(ts) THEN\n        ok := ok OR okDate;\n        okTime := ParseTime(ts, hour, minute, second);\n        SetTime(hour, minute, second, dt);\n        ok := ok & okTime;\n    END;\n    RETURN ok\nEND Parse;\n\nBEGIN\n    Chars.Set(\"January\", Months[0]);\n    Chars.Set(\"February\", Months[1]);\n    Chars.Set(\"March\", Months[2]);\n    Chars.Set(\"April\", Months[3]);\n    Chars.Set(\"May\", Months[4]);\n    Chars.Set(\"June\", Months[5]);\n    Chars.Set(\"July\", Months[6]);\n    Chars.Set(\"August\", Months[7]);\n    Chars.Set(\"September\", Months[8]);\n    Chars.Set(\"October\", Months[9]);\n    Chars.Set(\"November\", Months[10]);\n    Chars.Set(\"December\", Months[11]);\n\n    Chars.Set(\"Sunday\", Days[0]);\n    Chars.Set(\"Monday\", Days[1]);\n    Chars.Set(\"Tuesday\", Days[2]);\n    Chars.Set(\"Wednesday\", Days[3]);\n    Chars.Set(\"Thursday\", Days[4]);\n    Chars.Set(\"Friday\", Days[5]);\n    Chars.Set(\"Saturday\", Days[6]);\n\n    DaysInMonth[0] := 31; (* January *)\n    DaysInMonth[1] := 28; (* February *)\n    DaysInMonth[2] := 31; (* March *)\n    DaysInMonth[3] := 30; (* April *)\n    DaysInMonth[4] := 31; (* May *)\n    DaysInMonth[5] := 30; (* June *)\n    DaysInMonth[6] := 31; (* July *)\n    DaysInMonth[7] := 31; (* August *)\n    DaysInMonth[8] := 30; (* September *)\n    DaysInMonth[9] := 31; (* October *)\n    DaysInMonth[10] := 30; (* November *)\n    DaysInMonth[11] := 31; (* December *)\n\nEND Dates.\n\n~~~\n\n\n",
      "data": {
        "title": "Dates"
      },
      "url": "posts/2020/11/27/Dates.json"
    },
    {
      "content": "\nClock\n=====\n\nThis is a C time library wrapper for getting system time\nto support Dates.Mod. The procedures are read only as\nsetting time is non-standard on many Unix-like systems[^1].\nThe two procedures follow the A2 style procedure signatures\nadjusted for Oberon-07.\n\n\n[^1]: Eric Raymond discusses time functions, http://www.catb.org/esr/time-programming/\n\n\n\nSource code for **Clock.Mod**\n-----------------------------\n\n~~~\nMODULE Clock;\n\nPROCEDURE GetRtcTime*(VAR second, minute, hour, day, month, year : INTEGER);\nBEGIN\nEND GetRtcTime;\n\nPROCEDURE Get*(VAR time, date : INTEGER);\nBEGIN\nEND Get;\n\nEND Clock.\n\n~~~\n\n\nThe C Source generated by OBNC then modified for this module.\n\n~~~\n/*GENERATED BY OBNC 0.16.1*/\n\n#include \".obnc/Clock.h\"\n#include <obnc/OBNC.h>\n#include <time.h>\n\n#define OBERON_SOURCE_FILENAME \"Clock.Mod\"\n\nvoid Clock__GetRtcTime_(OBNC_INTEGER *second_, OBNC_INTEGER *minute_, OBNC_INTEGER *hour_, OBNC_INTEGER *day_, OBNC_INTEGER *month_, OBNC_INTEGER *year_)\n{\n    time_t now;\n    struct tm *time_info;\n    now = time(NULL);\n    time_info = localtime(&now);\n    *second_ = time_info->tm_sec;\n    *minute_ = time_info->tm_min;\n    *hour_ = time_info->tm_hour;\n    *day_ = time_info->tm_mday;\n    *month_ = time_info->tm_mon;\n    *year_ = (time_info->tm_year) + 1900;\n}\n\n\nvoid Clock__Get_(OBNC_INTEGER *time_, OBNC_INTEGER *date_)\n{\n\tOBNC_INTEGER second_, minute_, hour_, day_, month_, year_;\n\n\tClock__GetRtcTime_(&second_, &minute_, &hour_, &day_, &month_, &year_);\n\t(*time_) = ((hour_ * 4096) + (minute_ * 64)) + second_;\n\t(*date_) = ((year_ * 512) + (month_ * 32)) + day_;\n}\n\n\nvoid Clock__Init(void)\n{\n}\n~~~\n",
      "data": {
        "title": "Clock"
      },
      "url": "posts/2020/11/27/Clock.json"
    },
    {
      "content": "\n\nPandoc & Metadata \n=================\n\nPandoc supports three ways of providing metadata to its template\nengine. \n\n1. Front matter\n2. Command line optional metadata\n3. A JSON metadata file.\n\nFront matter\n------------\n\nFront matter is a community term that comes from physical world\nof paper books and articles.  It is the information that comes \nbefore the primary content.  This information might be things \nlike title, author, publisher and publication date. These days \nit'll also include things like identifiers like ISSN, ISBN possibly \nnewer identifiers like DOI or ORCID. In the library and programming\ncommunity we refer to this type of structured information as\nmetadata.  Data about the publication or article.\n\nMany publication systems like TeX/LaTeX support provided means of \nincorporating metadata into the document.  When simple markup formats \nlike Markdown, Textile and Asciidoc became popular the practice was \ncontinued by including the metadata in some sort of structured encoding\nat the beginning of the document. The community adopted the term from\nthe print world, \"front matter\". \n\nPandoc provides for several ways of working with metadata and supports\none format of front matter encoding called [YAML](https://yaml.org/). \nOther markup processors support other encoding of front matter. Two\npopular alternatives of encoding are [TOML](https://toml.io/en/) and \n[JSON](https://json.org).  If you use one of the alternative encoding\nfor your front matter then you'll need to split the front matter\nout of your document before processing with Pandoc[^1].  \n\n[^1]: The [MkPage Project](https://caltechlibrary.github.io/mkpage/) provides a tool called [frontmatter](https://caltechlibrary.github.io/mkpage/docs/frontmatter/) that can be easy or your can easily roll your own in Python or other favorite language.\n\n\nIf you provide YAML formatted front matter Pandoc will pass this\nmetadata on and make it available to it's template engine and the\ntemplates you create to render content with Pandoc. See the Pandoc\nUser Guide section [YAML metadata blocks](https://pandoc.org/MANUAL.html#extension-yaml_metadata_block) for more details. If you've used another\nencoding of front matter then the metadata file approach is probably\nthe ticket.\n\nMetadata passed by command line\n-------------------------------\n\nIf you only have a metadata elements you would like to\nmake available to the template (e.g. title, pub date) you\ncan easily add them using the `--metadata` command line option.\nThis is documented in the Pandoc User Guide under the heading\n[Reader Options](https://pandoc.org/MANUAL.html). Here's a simple\nexample where we have a title, \"U. S. Constitution\" and a\npublication date of \"September 28, 1787\".\n\n~~~{.shell}\n    pandoc --metadata \\\n        title=\"U. S. Constitution\" \\\n        pubdate=\"September 28, 1787\" \\\n        --from markdown --to html --template doc1.tmpl \\\n        constitution.txt\n~~~\n\nThe template now has two additional values available as metadata\nin addition to `body`, namely `pubdate` and `title`. Here's an\nexample template [doc1.tmpl](doc1.tmpl).\n\n~~~\n\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>${title}</title>\n   </head>\n   <body>\n      <h1>${title}</h1>\n      <h2>${pubdate}</h2>\n      <p>\n      ${body}\n      <p>\n   </body>\n   </html>\n\n~~~\n\nMore complex metadata is better suited to creating a JSON document\nwith the structure you need to render your template.\n\n\nMetadata file\n-------------\n\nMetadata files can be included with the option `--metadata-file`. This\nlike the `--metadata` option are discussed in the Pandoc User Guide under\nthe [Read Options(https://pandoc.org/MANUAL.html) heading.  The JSON \ndocument should contain an Object where each attribute corresponds to\nthe variable you wish to referenced in template.  Pandoc's template\nengine support both single values but also objects and arrays. In this\nway you can structure the elements you wish to include even elements\nwhich are iterative (e.g. a list of links or topics). Below is a\nJSON data structure that includes the page title as well as links\nfor the navigation.  The nav attribute holds a list of objects \nwith attributes of href and label containing data that will be used\nto render a list of anchor elements in the template.\n\n\n~~~{.json}\n\n    {\n        \"title\": \"U. S. Constitution\",\n        \"pubdate\": \"September 28, 1787\",\n        \"nav\": [\n            {\"label\": \"Pandoc Metadata\", \"href\": \"Pandoc-Metadata.html\" },\n            {\"label\": \"Magnacarta\", \"href\": \"magnacarta.html\" },\n            {\"label\": \"Declaration of Independence\", \"href\": \"independence.html\" },\n            {\"label\": \"U. S. Constitution\", \"href\": \"constitution.html\"}\n        ]\n    }\n\n~~~\n\nHere's a revised template to include the navigation,\nsee [doc2.tmpl](doc2.tmpl).\n\n~~~\n\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>${title}</title>\n   </head>\n   <body>\n      <nav>\n      ${for(nav)}<a href=\"${nav.href}\">${nav.label}</a>${sep}, ${endfor}\n      </nav>\n      <h1>${title}</h1>\n      ${if(pubdate)}<h2>${pubdate}</h2>${endif}\n      <p>\n      ${body}\n      <p>\n   </body>\n   </html>\n\n~~~\n\n\nCombining Techniques\n--------------------\n\nIt is worth noting that these approaches can be mixed and matched.\nIn the following example I use the same [metadata.json](metadata.json)\nfile which has title and pubdate attributes but override them\nusing the command line `--metadata` option. In this way I can use that \nfile along with [doc2.tmpl](doc2.tmpl) and render each \nTo render the constitution page from a Markdown version of the \nU. S. Constitution you could use the following Pandoc command:\n\n~~~{.shell}\n\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"Magna Carta\" \\\n\t\t--metadata pubdate=\"1215\" \\\n\t\t-o magnacarta.html \\\n\t\tmagnacarta.txt\n\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"The Declaration of Indepenence\" \\\n\t\t--metadata pubdate=\"July 4, 1776\" \\\n        -o independence.html \\\n        independence.txt\n\n\tpandoc --from markdown --to html --template doc2.tmpl \\\n        --metadata-file metadata.json \\\n        --metadata title=\"U. S. Constitution\" \\\n\t\t--metadata pubdate=\"September 28, 1787\" \\\n        -o constitution.html \\\n        constitution.txt\n\n~~~\n\nSee [Magna Carta](magnacarta.html), [The Declaration of Independence](independence.html), [U. S. Constitution](constitution.html)\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "keywords": [
          "Pandoc",
          "Metadata",
          "Templates"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 2,
        "series": "Pandoc Techniques",
        "title": "Pandoc & Metadata"
      },
      "url": "posts/2020/11/11/Pandoc-Metadata.json"
    },
    {
      "content": "\n\nPandoc Partial Templates\n========================\n\nMost people know about [Pandoc](https://pandoc.org/) from its\nfantastic ability to convert various markup formats from one to\nanother. A little less obvious is Pandoc can be a template engine\nfor rendering static websites allowing you full control over the\nrendered content.\n\nThe main Pandoc documentation of the template engine can be found\nin the [User Guide](https://pandoc.org/MANUAL.html#templates).\nThe documentation is complete in terms of describing the template\ncapabilities but lacks a tutorial for using as a replacement for more\nambitious rendering systems like [Jekyll](https://jekyllrb.com/) or\n[Hugo](https://gohugo.io/). Pandoc takes a vary direct approach and\ncan be deceptively simple to implement.\n\nUse your own template\n---------------------\n\nFirst thing in this tutorial is to use our own template with Pandoc\nwhen rendering a single webpage. You use the `–-template` option to\nprovide your a template name. I think of this as the page level template.\nThis template, as I will show later, can then call other partial\ntemplates as needed.\n\nExample, render the [Pandoc-Partials.txt](Pandoc-Partials.txt) file using the\ntemplate named [index1.tmpl](index1.tmpl):\n\n~~~{.shell}\n\n    pandoc --from=markdown --to=html \\\n        --template=index1.tmpl Pandoc-Partials.txt > index1.htm\n\n~~~\n\nThis is a simple template page level template.\n\n~~~{.html-code}\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    </head>\n    <body>\n    ${body}\n    </body>\n    </html>\n\n~~~\n\nWhen we run our Pandoc command the file called\n[Pandoc-Partials.txt](Pandoc-Partials.txt) is passed into the template as\nthe \"body\" element where it says `${body}`. See this Pandoc \n[User Guide](https://pandoc.org/MANUAL.html#templates) for the basics.\n\nExample 1 rendered: [index1.htm](index1.htm)\n\nVariables and metadata\n----------------------\n\nPandoc's documentation is good at describing the\nways of referencing a variable or using the built-in\ntemplate functions. Where do the variables get their values?\nThe easiest way I've found is to set the variables values in\na JSON metadata file.  While Pandoc can also use the metadata\ndescribed in YAML front matter Pandoc doesn't support some of the\nother common front matter formats.  If you're using another format\nlike JSON or TOML for front matter there are tools which can split\nthe front matter from the rest of the markdown document. For\nthis example I have created the metadata as JSON in a file\ncalled [metadata.json](metadata.json).\n\nExample [metadata.json](metadata.json):\n\n~~~{.json}\n\n    {\n        \"title\": \"Pandoc Partial Examples\",\n        \"nav\": [\n            {\"label\": \"Pandoc-Partials\", \"href\": \"Pandoc-Partials.html\" },\n            {\"label\": \"Version 1\", \"href\": \"index1.htm\" },\n            {\"label\": \"Version 2\", \"href\": \"index2.htm\" },\n            {\"label\": \"Version 3\", \"href\": \"index3.htm\" }\n        ]\n    }\n\n~~~\n\nLet's modify our initial template to include our simple navigation\nand title.\n\nExample [index2.tmpl](index2.tmpl):\n\n~~~{.html-code}\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n      ${if(title)}<title>${title}</title>${endif}\n    </head>\n    <body>\n    <nav>\n    ${for(nav)}<a href=\"${it.href}\">${it.label}</a>${sep}, ${endfor}\n    </nav>\n    <section>\n    ${body}\n    </section>\n    </body>\n    </html>\n\n~~~\n\nWe would include our navigation metadata with a Pandoc command like\n\n~~~{.shell}\n\n    pandoc --from=markdown --to=html \\\n           --template=index2.tmpl \\\n           --metadata-file=metadata.json Pandoc-Partials.txt > index2.htm\n\n~~~\n\nWhen we render this we now should be able to view a web page\nwith simple navigation driven by the JSON file as well as the\nbody content contained in the Pandoc-Partials.txt file.\n\nExample 2 rendered: [index2.htm](index2.htm)\n\nPartials\n--------\n\nSometimes you have more complex documents. Putting this all in\none template can become tedious. Web designers use a term called\n\"partials\". This usually means a template for a \"part\" of a page.\nIn our initial example we can split our navigation into it's own\ntemplate.\n\nImplementing partials\n---------------------\n\nPandoc will look in the current directory for partials as well\nas in a sub directory called \"templates\" of the current direct.\nIn this example I am going to include my partial template for\nnavigation in the current directory along side my\n[index3.tmpl](index3.tmpl).  My navigation template is called\n[nav.tmpl](nav.tmpl).\n\nHere's my partial template:\n\n~~~{.html-code}\n\n    <nav>\n    ${for(nav)}<a href=\"${it.href}\">${it.label}</a>${sep}, ${endfor}\n    </nav>\n\n~~~\n\nHere's my third iteration of our index template, [index3.tmpl](index3.tmpl).\n\n~~~{.html-code}\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    ${if(title)}<title>${title}</title>${endif}\n    </head>\n    <body>\n    ${if(nav)}\n    ${nav.tmpl()}\n    ${endif}\n    <section>\n    ${body}\n    </section>\n    </body>\n    </html>\n\n~~~\n\nPandoc only requires you to reference the partial by using\nits base name. Many people will name their templates with the\nextension \".html\". I find this problematic as if you're trying\nto list the templates in the directory you can not easily list\nthem separately. I use the \".tmpl\" extension to identify my templates.\nSince I have other documents that share the base name \"nav\" I\nexplicit call my navigation partial using the full filename followed\nby the open and closed parenthesis. I have also chosen to wrap\nthe template in an \"if\" condition. That way if I don't want navigation\non a page I skip defining it in my metadata file.\n\nInside the partial template we inherit the parent metadata object.\nYou can use all the built-in Pandoc template functions and variables\nprovided by Pandoc in your partial templates.\n\nPutting it all together:\n\n~~~{.shell}\n\n    pandoc --from=markdown --to=html \\\n           --template=index3.tmpl \\\n           --metadata-file=metadata.json Pandoc-Partials.txt > index3.htm\n\n~~~\n\nExample 3 rendered: [index3.htm](index3.htm)\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "keywords": [
          "Pandoc",
          "Templates"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 1,
        "series": "Pandoc Techniques",
        "title": "Pandoc Partials"
      },
      "url": "posts/2020/11/09/Pandoc-Partials.json"
    },
    {
      "content": "\n\nOberon to Markdown\n==================\n\nThis is the twelfth post in the [Mostly Oberon](https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.\n\nA nice feature of Oberon\n------------------------\n\nOberon source code has a very nice property in that anything\nafter the closing end statement is ignored by the compiler.\nThis makes it a nice place to write documentation, program\nnotes and other ideas.\n\nI've gotten in the habit of writing up program docs and\nnotes there. When I prep to make a web document I used to\ncopy the source file, doing a cut and paste to re-order\nthe module code to the bottom of the document. I'd follow\nthat with adding headers and code fences. Not hard but\ntedious. Of course if I changed the source code I'd also\nhave to do another cut and paste edit. This program,\n`ObnToMd.Mod` automates that process.\n\nProgram Documentation\n---------------------\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPROGRAM\n\n  ObnToMd\n\nFUNCTION\n\n  This is a simple program that reads Oberon modules\n  from standard in and re-renders that to standard output\n  such that it is suitable to process with Pandoc or other\n  text processing system.\n\nEXAMPLE\n\n  Read the source for this program and render a file\n  called \"blog-post.md\". Use Pandoc to render HTML.\n\n    ObnToMd <ObnToMd.Mod > blog-post.md\n    pandoc -s --metadata title=\"Blog Post\" \\\n        blog-post.md >blog-post.html\n\nBUGS\n\n  It uses a naive line analysis to identify the module\n  name and then the end of module statement. Might be\n  tripped up by comments containing the same strings.\n  The temporary file created is called \"o2m.tmp\" and\n  this filename could potentially conflict with another\n  file.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\nSource code for **ObnToMd.Mod**\n-------------------------------\n\n~~~\n\n(* ObnToMd.Mod - an simple filter process for reading\nan Oberon-07 module source file and rendering a markdown\nfriendly output suitable for piping into Pandoc. The\nfilter reads from standard input and writes to standard\noutput and makes use of a temp file name o2m.tmp which\nit removes after successful rendering.\n\n@Author R. S. Doiel, <rsdoiel@gmail.com>\ncopyright (c) 2020, all rights reserved.\nReleased under the BSD 2-clause license\nSee: https://opensource.org/licenses/BSD-2-Clause\n*)\nMODULE ObnToMd;\n  IMPORT In, Out, Files, Strings;\n\nCONST\n  MAXLENGTH = 1024;\n  LF = CHR(10);\n\nVAR\n  endOfLine : ARRAY 2 OF CHAR;\n\n(*\n * Helper methods\n *)\nPROCEDURE GenTempName(prefix, suffix : ARRAY OF CHAR; VAR name : ARRAY OF CHAR);\nBEGIN\n  name := \"\";\n  Strings.Append(prefix, name);\n  Strings.Append(\".\", name);\n  Strings.Append(suffix, name);\nEND GenTempName;\n\nPROCEDURE GenTempFile(name : ARRAY OF CHAR; VAR r : Files.Rider; VAR f : Files.File);\nBEGIN\n  f := Files.New(name);\n  IF f = NIL THEN\n    Out.String(\"ERROR: can't create \");Out.String(name);Out.Ln();\n    ASSERT(FALSE);\n  END;\n  Files.Register(f);\n  Files.Set(r, f, 0);\nEND GenTempFile;\n\n\nPROCEDURE StartsWith(target, source : ARRAY OF CHAR) : BOOLEAN;\n  VAR res : BOOLEAN;\nBEGIN\n  IF Strings.Pos(target, source, 0) > -1 THEN\n    res := TRUE;\n  ELSE\n    res := FALSE;\n  END;\n  RETURN res\nEND StartsWith;\n\nPROCEDURE ClearString(VAR s : ARRAY OF CHAR);\n  VAR i : INTEGER;\nBEGIN\n  FOR i := 0 TO LEN(s) - 1 DO\n    s[i] := 0X;\n  END;\nEND ClearString;\n\n\nPROCEDURE ProcessModuleDef(VAR r : Files.Rider; VAR modName : ARRAY OF CHAR);\n  VAR\n    line, endStmt : ARRAY MAXLENGTH OF CHAR;\n    start, end : INTEGER;\nBEGIN\n  line := \"\";\n  endStmt := \"\";\n  modName := \"\";\n  (* Find the name of the module and calc the \"END {NAME}.\" statement *)\n  REPEAT\n    ClearString(line);\n    In.Line(line);\n    IF In.Done THEN\n      Files.WriteString(r, line); Files.WriteString(r, endOfLine);\n      (* When `MODULE {NAME};` is encountered extract the module name *)\n      IF StartsWith(\"MODULE \", line) THEN\n        start := 7;\n        end := Strings.Pos(\";\", line, 0);\n        IF (end > -1) & (end > start) THEN\n            Strings.Extract(line, start, end - start, modName);\n            endStmt := \"END \";\n            Strings.Append(modName, endStmt);\n            Strings.Append(\".\", endStmt);\n        END;\n      END;\n    END;\n  UNTIL (In.Done # TRUE) OR (endStmt # \"\");\n\n  (* When `END {NAME}.` is encountered  stop writing tmp file *)\n  REPEAT\n    In.Line(line);\n    IF In.Done THEN\n      Files.WriteString(r, line); Files.WriteString(r, endOfLine);\n    END;\n  UNTIL (In.Done # TRUE) OR StartsWith(endStmt, line);\nEND ProcessModuleDef;\n\nPROCEDURE WriteModuleDef(name : ARRAY OF CHAR; VAR r : Files.Rider; VAR f : Files.File);\n  VAR s : ARRAY MAXLENGTH OF CHAR; res : INTEGER;\nBEGIN\n  Files.Set(r, f, 0);\n  REPEAT\n    Files.ReadString(r, s);\n    IF r.eof # TRUE THEN\n      Out.String(s);\n    END;\n  UNTIL r.eof;\n  Files.Close(f);\n  Files.Delete(name, res);\nEND WriteModuleDef;\n\n\nPROCEDURE OberonToMarkdown();\nVAR\n  tmpName, modName, line : ARRAY MAXLENGTH OF CHAR;\n  f : Files.File;\n  r : Files.Rider;\n  i : INTEGER;\nBEGIN\n  tmpName := \"\"; modName := \"\";  line := \"\";\n  (* Open temp file *)\n  GenTempName(\"o2m\", \"tmp\", tmpName);\n  GenTempFile(tmpName, r, f);\n\n  (* Read the Oberon source from standard input echo the lines tmp file *)\n  ProcessModuleDef(r, modName);\n\n  (* Write remainder of file to standard out *)\n  REPEAT\n    In.Line(line);\n    IF In.Done THEN\n      Out.String(line);Out.Ln();\n    END;\n  UNTIL In.Done # TRUE;\n\n  (* Write two new lines *)\n  Out.Ln(); Out.Ln();\n  (* Write heading `Source code for {NAME}` *)\n  ClearString(line);\n  line := \"Source code for **\";\n  Strings.Append(modName, line);\n  Strings.Append(\".Mod**\", line);\n  Out.String(line); Out.Ln();\n  FOR i := 0 TO Strings.Length(line) - 1 DO\n    Out.String(\"-\");\n  END;\n  Out.Ln();\n  (* Write code fence *)\n  Out.Ln();Out.String(\"~~~\");Out.Ln();\n  (* Reset rider to top of tmp file\n     Write temp file to standard out\n     cleanup demp file *)\n  WriteModuleDef(tmpName, r, f);\n  (* Write code fence *)\n  Out.Ln();Out.String(\"~~~\");Out.Ln();\n  (* Write tailing line and exit procedure *)\n  Out.Ln();\nEND OberonToMarkdown;\n\nBEGIN\n  endOfLine[0] := LF;\n  endOfLine[1] := 0X;\n  OberonToMarkdown();\nEND ObnToMd.\n\n~~~\n\n### Next, Previous\n\n+ Next [Assembling Pages](../../10/19/Assemble-pages.html)\n+ Previous [Portable Oberon-07](../../08/15/Portable-Oberon-07.html)\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-10-03",
        "keywords": [
          "Oberon",
          "portable",
          "markdown",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 12,
        "series": "Mostly Oberon",
        "title": "Oberon to Markdown"
      },
      "url": "posts/2020/10/03/Oberon-to-markdown.json"
    },
    {
      "content": "\n\nAssembling pages\n================\n\nThis is the thirteenth post in the [Mostly Oberon](https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.\n\nPandoc and JSON\n---------------\n\nI use [Pandoc](https://pandoc.org) to process Markdown documents. I like to keep my\nfront matter in JSON rather than Pandoc's YAML. Fortunately Pandoc\ndoes support working with JSON as a metadata file include. Normally I would\nmanually split the JSON front matter and the rest of the markup into two\nseparate files, then process with Pandoc and other tooling like\n[LunrJS](https://lunrjs.com). [AssemblePage](AssemblePage.Mod) automates this\nprocess.\n\nExample shell usage:\n\n~~~\n\n   AssemblePage MyText.txt \\\n      metadata=document.json \\\n      document=document.md\n   pandoc --from markdown --to html \\\n      --metadata-file document.json \\\n      --standalone \\\n      document.md >MyText.html\n\n~~~\n\nSource code for **AssemblePage.Mod**\n------------------------------------\n\n~~~\n\nMODULE AssemblePage;\n  IMPORT Out, Strings, Files, Args := extArgs;\n\nVAR\n  srcName, metaName, docName : ARRAY 1024 OF CHAR;\n\n(* FrontMatter takes a \"read\" Rider, r, and a \"write\" Rider \"w\".\nIf the first character read by r is an opening curly bracket\n(the start of the front matter) it writes it out with w, until\nit finds a matching closing curly bracket or the file ends. *)\nPROCEDURE FrontMatter*(VAR r : Files.Rider; VAR w : Files.Rider);\n  VAR c : BYTE; cCnt : INTEGER;\nBEGIN\n  (* Scan for opening JSON front matter *)\n  cCnt := 0;\n  REPEAT\n    Files.Read(r, c);\n    IF r.eof = FALSE THEN\n      IF c = ORD(\"{\") THEN\n        cCnt := cCnt + 1;\n      ELSIF c = ORD(\"}\") THEN\n        cCnt := cCnt - 1;\n      END;\n      Files.Write(w, c);\n    END;\n  UNTIL (r.eof = TRUE) OR (cCnt = 0);\n  IF cCnt # 0 THEN\n    Out.String(\"ERROR: mis matched '{' and '}' in front matter\");\n    ASSERT(FALSE);\n  END;\nEND FrontMatter;\n\n(* CopyIO copies the characters from a \"read\" Rider to a \"write\" Rider *)\nPROCEDURE CopyIO*(VAR r : Files.Rider; VAR w: Files.Rider);\n  VAR c : BYTE;\nBEGIN\n  REPEAT\n    Files.Read(r, c);\n    IF r.eof = FALSE THEN\n      Files.Write(w, c);\n    END;\n  UNTIL r.eof = TRUE;\nEND CopyIO;\n\nPROCEDURE ProcessParameters(VAR sName, mName, dName : ARRAY OF CHAR);\n  VAR\n    arg : ARRAY 1024 OF CHAR;\n    i, res : INTEGER;\nBEGIN\n  mName := \"document.json\";\n  dName := \"document.txt\";\n  arg := \"\";\n  FOR i := 0 TO (Args.count - 1) DO\n    Args.Get(i, arg, res);\n    IF Strings.Pos(\"metadata=\", arg, 0) = 0 THEN\n      Strings.Extract(arg, 9, Strings.Length(arg), mName);\n    ELSIF Strings.Pos(\"document=\", arg, 0) = 0 THEN\n      Strings.Extract(arg, 9, Strings.Length(arg), dName);\n    ELSE\n      Strings.Extract(arg, 0, Strings.Length(arg), sName);\n    END;\n  END;\nEND ProcessParameters;\n\nPROCEDURE AssemblePage(srcName, metaName, docName : ARRAY OF CHAR);\nVAR\n  src, meta, doc : Files.File;\n  reader, writer : Files.Rider;\nBEGIN\n  src := Files.Old(srcName);\n  IF src # NIL THEN\n    Files.Set(reader, src, 0);\n    IF metaName # \"\" THEN\n      meta := Files.New(metaName);\n      Files.Register(meta);\n      Files.Set(writer, meta, 0);\n      FrontMatter(reader, writer);\n      Files.Close(meta);\n    END;\n    IF docName # \"\" THEN\n      doc := Files.New(docName);\n      Files.Register(doc);\n      Files.Set(writer, doc, 0);\n      CopyIO(reader, writer);\n      Files.Close(doc);\n    END;\n  ELSE\n    Out.String(\"ERROR: Could not read \");Out.String(srcName);Out.Ln();\n    ASSERT(FALSE);\n  END;\n  Files.Close(src);\nEND AssemblePage;\n\nBEGIN\n  ProcessParameters(srcName, metaName, docName);\n  AssemblePage(srcName, metaName, docName);\nEND AssemblePage.\n\n~~~\n\n### Next, Previous\n\n+ Next [Dates & Clock](../../11/27/Dates-and-Clock.html)\n+ Previous [Oberon To Markdown](../../10/03/Oberon-to-markdown.html)\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-10-19",
        "keywords": [
          "Oberon-07",
          "portable",
          "markdown",
          "pandoc",
          "frontmatter"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 13,
        "series": "Mostly Oberon",
        "title": "Assembling Pages"
      },
      "url": "posts/2020/10/19/Assemble-pages.json"
    },
    {
      "content": "\n\nSoftware Tools, Filters\n=======================\n\nOverview\n--------\n\nThis post is the second in a series revisiting the programs\ndescribed in the 1981 book by Brian W. Kernighan and P. J.\nPlauger's called [Software Tools in Pascal](https://archive.org/details/softwaretoolsinp00kern). The book is available from the\n[Open Library](https://openlibrary.org/) and physical copies\nare still (2020) commonly available from used book sellers.\nThe book was an late 20th century text on creating portable\ncommand line programs using ISO standard Pascal of the era.\n\nIn this chapter K & P focuses on developing the idea of filters.\nFilters are programs which typically process standard input, do\nsome sort of transformation or calculation and write to standard\noutput.  They are intended to work either standalone or in a pipeline\nto solve more complex problems. I like to think of filters as\nsoftware [LEGO](https://en.wikipedia.org/wiki/Lego).\nFilter programs can be \"snapped\" together creating simple shapes\ndata shapes or combined to for complex compositions.\n\nThe programs from this chapter include:\n\n+ **entab**, respecting tabstops, convert strings of spaces to tabs\n+ **overstrike**, this is probably not useful anymore, it would allow \"overstriking\" characters on devices that supported it. From [wikipedia](https://en.wikipedia.org/wiki/Overstrike), \"In typography, overstrike is a method of printing characters that are missing from the printer's character set. The character was created by placing one character on another one — for example, overstriking \"L\" with \"-\" resulted in printing a \"Ł\" (L with stroke) character.\"\n+ **compress**, an early UNIX style compress for plain text files\n+ **expand**, an early UNIX style expand for plain text files, previously run through with **compress**\n+ **echo**, write echo's command line parameters to standard output, introduces working with command line parameters\n+ **translit**, transliterate characters using a simple from/to substitution with a simple notation to describe character sequences and negation. My implementation diverges from K & P\n\nImplementing in Oberon-07\n------------------------\n\nWith the exception of **echo** (used to introduce command line parameter processing) each program increases in complexity.  The last program **translit**is the most complex in this chapter.  It introducing what we a \"domain specific language\" or \"DSL\".  A DSL is a notation allowing us to describe something implicitly rather than explicitly. All the programs except **translit** follow closely the original Pascal translated to Oberon-07.  **translit** book implementation is very much a result of the constraints of Pascal of the early 1980s as well as the minimalist assumption that could be made about the host operating system. I will focus on revising that program in particular bring the code up to current practice as well as offering insights I've learned.\n\n\nThe program **translit** introduces what is called a \"Domain Specific Language\".Domain specific languages or DSL for short are often simple notations to describe how to solve vary narrow problems.  If you've used any of the popular spreadsheet programs where you've entered a formula to compute something you've used a domain specific language.  If you've ever search for text in a document using a regular expression you've used a domain specific language.  By focusing a notation on a small problem space you can often come up with simple ways of expressing or composing programmatic solutions to get a job done.\n\nIn **translit** the notation let's us describe what we want to translate. At the simplest level the **translit** program takes a character and replaces it with another character. What make increases **translit** utility is that it can take a set of characters and replace it with another.  If you want to change all lower cases letters and replace them with uppercase letters. This \"from set\" and \"to set\" are easy to describe as two ranges, \"a\" to \"z\" and \"A\" to \"Z\".  Our domain notation allows us to express this as \"a-z\" and \"A-Z\".  K & P include several of features in there notation including characters to exclude from a translation as well as an \"escape notation\" for describing characters like new lines, tabs, or the characters that describe a range and exclusion (i.e. dash and caret).\n\n\n\n2.1 Putting Tabs Back\n=====================\n\n[Page 31](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/31/mode/1up)\n\nImplementing **entab** in Oberon-07 is straight forward.\nLike my [Detab](Detab.Mod) implementation I am using\na second modules called [Tabs](Tabs.Mod). This removes\nthe need for the `#include` macros used in the K & P version.\nI have used the same loop structure as K & P this time.\nThere is a difference in my `WHILE` loop. I separate the\ncharacter read from the `WHILE` conditional test.  Combining the\ntwo is common in \"C\" and is consistent with the programming style\nother books by Kernighan.  In Oberon-07 doesn't make sense at all.\nOberon's `In.Char()` is not a function returning as in the Pascal\nprimitives implemented for the K & P book or indeed like in the \"C\"\nlanguage. In Oberon's \"In\" module the status of a read operation is\nexposed by `In.Done`. I've chosen to put the next call to\n`In.Char()` at the bottom of my `WHILE` loop because it is clear\nthat it is the last think done before ether iterating again or\nexiting the loop. Other than that the Oberon version looks much\nlike K & P's Pascal.\n\n\nProgram Documentation\n---------------------\n\n[Page 32](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/32/mode/1up)\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPROGRAM\n\n  entab\tconvert runs of blanks into tabs\n\nUSAGE\n\n  entab\n\nFUNCTION\n\n  entab copies its input to its output, replacing strings of\n  blanks by tabs so the output is visually the same as the\n  input, but contains fewer characters. Tab stops are assumed\n  to be set every four columns (i.e. 1, 5, 9, ...), so that\n  each sequence of one to four blanks ending on a tab stop\n  is replaced by a tab character\n\nEXAMPLE\n\n  Using -> as visible tab:\n\n    entab\n      col  1   2   34  rest\n    ->col->1->2->34->rest\n\nBUGS\n\n  entab is naive about backspaces, virtical motions, and\n  non-printing characters. entab will convert  a single blank\n  to a tab if it occurs at a tab stop. The entab is not an\n  exact inverse of detab.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSource code for **Entab.Mod**\n-----------------------------\n\n~~~\n\nMODULE Entab;\n  IMPORT In, Out, Tabs;\n\nCONST\n  NEWLINE = 10;\n  TAB = 9;\n  BLANK = 32;\n\nPROCEDURE Entab();\nVAR\n  c : CHAR;\n  col, newcol : INTEGER;\n  tabstops : Tabs.TabType;\nBEGIN\n  Tabs.SetTabs(tabstops);\n  col := 1;\n  REPEAT\n    newcol := col;\n    In.Char(c);\n    IF In.Done THEN (* NOTE: We check that the read was successful! *)\n      WHILE (ORD(c) = BLANK) DO\n        newcol := newcol + 1;\n        IF (Tabs.TabPos(newcol, tabstops)) THEN\n          Out.Char(CHR(TAB));\n          col := newcol;\n        END;\n        (* NOTE: Get the next char, check the loop condition\n           and either iterate or exit the loop *)\n        In.Char(c);\n      END;\n      WHILE (col < newcol) DO\n        Out.Char(CHR(BLANK)); (* output left over blanks *)\n        col := col + 1;\n      END;\n      (* NOTE: Since we may have gotten a new char in the first WHILE\n         we need to check again if the read was successful *)\n      IF In.Done THEN\n        Out.Char(c);\n        IF (ORD(c) = NEWLINE) THEN\n          col := 1;\n        ELSE\n          col := col + 1;\n        END;\n      END;\n    END;\n  UNTIL In.Done # TRUE;\nEND Entab;\n\nBEGIN\n  Entab();\nEND Entab.\n\n~~~\n\n\n\n2.2 Overstrikes\n===============\n\n\n[Page 34](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/34/mode/1up)\n\n\nOverstrike isn't a tool that is useful today but I've included it\nsimply to be follow along the flow of the K & P book. It very much\nreflects an error where teletype like devices where still common and\nprinters printed much like typewriters did. On a 20th century\nmanual type writer you could underline a word or letter by backing\nup the carriage then typing the underscore character. Striking out\na word was accomplished by a similar technique. The mid to late\n20th century computers device retained this mechanism though by\n1980's it was beginning to disappear along with manual typewriters.\nThis program relies on the the nature of ASCII character set and\nreflects some of the non-print character's functionality. I\nfound it did not work on today's terminal emulators reliably. Your\nmileage may very nor do I have a vintage printer to test it on.\n\nOur module follows K & P design almost verbatim. The differences\nare those suggested by differences between Pascal and Oberon-07.\nLike in previous examples we don't need to use an ENDFILE constant\nas we can simply check the value of `In.Done` to determine\nif the last read was successful. This simplifies some of\nthe `IF/ELSE` logic and the termination of the `REPEAT/UNTIL`\nloop.  It makes the `WHILE/DO` loop a little more verbose.\n\nOne thing I would like to point out in the original Pascal of the\nbook is a problem often referred to as the \"dangling else\" problem.\nWhile this is usually discussed in the context of compiler\nimplementation I feel like it is a bigger issue for the person\nreading the source code. It is particularly problematic when you\nhave complex \"IF/ELSE\" sequences that are nested.  This is not\nlimited to the 1980's era Pascal. You see it in other languages\nlike C.  It is a convenience for the person typing the source code\nbut a problem for those who maintain it. We see this ambiguity in\nthe Pascal procedure **overstrike** inside the repeat loop\non [page 35](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/35/mode/1up).\nIt is made worse by the fact that K & P have taken advantage of\nomitting the semi-colons where optional. If you type in this\nprocedure and remove the indication if quickly becomes ambiguous\nabout where on \"IF/ELSE\" begins and the next ends. In Oberon-07 it\nis clear when you have a dangling \"IF\" statement. This vintage\nPascal, not so much.\n\nK & P do mention the dangling \"ELSE\" problem later in the text.\nTheir recommend practice was include the explicit final \"ELSE\"\nat a comment to avoid confusion. But you can see how easy an\nomitting the comment is in the **overstrike** program.\n\nLimitations\n-----------\n\nThis is documented \"BUG\" section describes the limitations\nwell, \"**overstrike** is naive about vertical motions and non-\nprinting characters. It produces one over struck line for each\nsequence of backspaces\". But in addition to that most printing\ndevices these days either have their own drivers or expect to work\nwith a standard like Postscript. This limited the usefulness of\nthis program today though controlling character movement in a\n\"vt100\" emulation using old fashion ASCII control codes is\nstill interesting if only for historical reasons.\n\n\nProgram Documentation\n---------------------\n\n[Page 36](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/36/mode/1up)\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPROGRAM\n\n  overstrike    replace overstrikes by multiple-lines\n\nUSAGE\n\n  overstrike\n\nFUNCTION\n\n  overstrike copies in input to its output, replacing lines\n  containing backspaces by multiple lines that overstrike\n  to print the same as input, but containing no backspaces.\n  It is assumed that the output is to be printed on a device\n  that takes the first character of each line as a carriage\n  control; a blank carriage control causes normal space before\n  print, while a plus sign '+' suppresses space before print\n  and hence causes the remainder of the line to overstrike\n  the previous line.\n\nEXAMPLE\n\n  Using <- as a visible backspace:\n\n    overstrike\n    abc<-<-<-___\n     abc\n    +___\n\nBUGS\n\n  overstrike is naive about vertical motions and non-printing\n  characters. It produces one over struck line for each sequence\n  of backspaces.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nSource code for **Overstrike.Mod**\n----------------------------------\n\n~~~\n\nMODULE Overstrike;\nIMPORT In, Out;\n\nCONST\n  NEWLINE = 10;\n  BLANK = 32;\n  PLUS = 43;\n  BACKSPACE = 8;\n\nPROCEDURE Max(x, y : INTEGER) : INTEGER;\nVAR max : INTEGER;\nBEGIN\n  IF (x > y) THEN\n    max := x\n  ELSE\n    max := y\n  END;\n  RETURN max\nEND Max;\n\nPROCEDURE Overstrike;\nCONST\n  SKIP = BLANK;\n  NOSKIP = PLUS;\nVAR\n  c : CHAR;\n  col, newcol, i : INTEGER;\nBEGIN\n  col := 1;\n  REPEAT\n    newcol := col;\n    In.Char(c);\n    (* NOTE We check In.Done on each loop evalution *)\n    WHILE (In.Done = TRUE) & (ORD(c) = BACKSPACE) DO (* eat the backspaces *)\n      newcol := Max(newcol, 1);\n      In.Char(c);\n    END;\n    (* NOTE: We check In.Done again, since we may have\n       additional reads when eating the backspaces. If\n       the previous while loop has taken us to the end of file.\n       this will be also mean In.Done = FALSE. *)\n    IF In.Done THEN\n      IF (newcol < col) THEN\n        Out.Char(CHR(NEWLINE)); (* start overstrike line *)\n        Out.Char(CHR(NOSKIP));\n        FOR i := 0 TO newcol DO\n          Out.Char(CHR(BLANK));\n        END;\n        col := newcol;\n      ELSIF (col = 1) THEN (* NOTE: In.Done already check for end of file *)\n        Out.Char(CHR(SKIP)); (* normal line *)\n      END;\n      (* NOTE: In.Done already was checked so we are in mid line *)\n      Out.Char(c);    (* normal character *)\n      IF (ORD(c) = NEWLINE) THEN\n        col := 1\n      ELSE\n        col := col + 1\n      END;\n    END;\n  UNTIL In.Done # TRUE;\nEND Overstrike;\n\nBEGIN\n  Overstrike();\nEND Overstrike.\n\n~~~\n\n\n2.3 Text Compression\n====================\n\n[Page 37](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/37/mode/1up)\n\nIn 20th century computing everything is expensive, memory,\npersistent storage computational ability in CPU.  If you were\nprimarily working with text you still worried about running out of\nspace in your storage medium. You see it in the units\nof measurement used in that era such as bytes, kilobytes, hertz and\nkilohertz. To day we talk about megabytes, gigabytes, terabytes and\npetabytes. Plain text files are a tiny size compared to must\ndigital objects today but in the late 20th century\ntheir size in storage was still a concern.  One way to solve this\nproblem was to encode your plain text to use less storage space.\nEarly attempts at file compression took advantage of repetition to\nsave space. Many text documents have repeated characters\nwhether spaces or punctuation or other formatting. This is what\ninspired the K & P implementation of **compress** and **expand**.\nToday we'd use other approaches to save space whether we were\nstoring text or a digital photograph.\n\n\nProgram Documentation\n---------------------\n\n[Page ](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/40/mode/1up)\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPROGRAM\n\n    compress    compress input by encoding repeated characters\n\nUSAGE\n\n    compress\n\nFUNCTION\n\n    compress copies its input to its output, replacing strings\n    of four or more identical characters by a code sequence so\n    that the output generally contains fewer characters than the\n    input. A run of x's is encoded as -nx, where the count n is\n    a character: 'A' calls for a repetition of one x, 'B' a\n    repetition of two x's, and so on. Runs longer than 26 are\n    broken into several shorter ones. Runs of -'s of any length\n    are encoded.\n\nEXAMPLE\n\n    compress\n    Item     Name           Value\n    Item-D Name-I Value\n    1       car             -$7,000.00\n    1-G car-J -A-$7,000.00\n    <ENDFILE>\n\nBUGS\n\n    The implementation assumes 26 legal characters beginning with A.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nSource code for **Compress.Mod**\n--------------------------------\n\n~~~\n\nMODULE Compress;\nIMPORT In, Out;\n\nCONST\n    TILDE = \"~\";\n    WARNING = TILDE;    (* ~ *)\n\n(* Min -- compute minimum of two integers *)\nPROCEDURE Min(x, y : INTEGER) : INTEGER;\nVAR min : INTEGER;\nBEGIN\n    IF (x < y) THEN\n        min := x\n    ELSE\n        min := y\n    END;\n    RETURN min\nEND Min;\n\n(* PutRep -- put out representation of run of n 'c's *)\nPROCEDURE PutRep (n : INTEGER; c : CHAR);\nCONST\n    MAXREP = 26;    (* assuming 'A' .. 'Z' *)\n    THRESH = 4;\nVAR i : INTEGER;\nBEGIN\n    WHILE (n >= THRESH) OR ((c = WARNING) & (n > 0)) DO\n        Out.Char(WARNING);\n        Out.Char(CHR((Min(n, MAXREP) - 1) + ORD(\"A\")));\n        Out.Char(c);\n        n := n - MAXREP;\n    END;\n    FOR i := n TO 1 BY (-1) DO\n        Out.Char(c);\n    END;\nEND PutRep;\n\n(* Compress -- compress standard input *)\nPROCEDURE Compress();\nVAR\n    c, lastc : CHAR;\n    n : INTEGER;\nBEGIN\n    n := 1;\n    In.Char(lastc);\n    WHILE (In.Done = TRUE) DO\n        In.Char(c);\n        IF (In.Done = FALSE) THEN\n            IF (n > 1) OR (lastc = WARNING) THEN\n                PutRep(n, lastc)\n            ELSE\n                Out.Char(lastc);\n            END;\n        ELSIF (c = lastc) THEN\n            n := n + 1\n        ELSIF (n > 1) OR (lastc = WARNING) THEN\n            PutRep(n, lastc);\n            n := 1\n        ELSE\n            Out.Char(lastc);\n        END;\n        lastc := c;\n    END;\nEND Compress;\n\n\nBEGIN\n    Compress();\nEND Compress.\n\n~~~\n\n\n\n2.4 Text Expansion\n==================\n\n[Page 41](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/41/mode/1up)\n\nOur procedures map closely to the original Pascal with a few\nsignificant differences.  As previously I've chosen a\n`REPEAT ... UNTIL` loop structure because we are always attempting\nto read at least once. The `IF THEN ELSIF ELSE` logic is a little\ndifferent. In the K & P version they combine retrieving\na character and testing its value.  This is a style common in\nlanguages like C. As previous mentioned I split the read of the\ncharacter from the test.  Aside from the choices imposed by the\n\"In\" module I also feel that retrieving the value, then testing is\na simpler statement to read. There is little need to worry about a\nside effect when you separate the action from the test. It does\nchange the structure of the inner and outer `IF` statements.\n\n\n\nProgram Documentation\n---------------------\n\n[Page 43](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/43/mode/1up)\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPROGRAM\n\n    expand  expand compressed input\n\nUSAGE\n\n    expand\n\nFUNCTION\n\n    expand copies its input, which has presumably been encoded by\n    compress, to its output, replacing code sequences -nc by the\n    repeated characters they stand for so that the text output\n    exactly matches that which was originally encoded. The\n    occurrence of the warning character - in the input means that\n    which was originally encoded. The occurrence of the warning\n    character - in the input means that the next character is a\n    repetition count; 'A' calls for one instance of the following\n    character, 'B' calls for two, and so on up to 'Z'.\n\nEXAMPLE\n\n    expand\n    Item~D Name~I Value\n    Item    Name        Value\n    1~G car~J ~A~$7,000.00\n    1       car         -$7,000.00\n    <ENDFILE>\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nSource code for **Expand.Mod**\n------------------------------\n\n~~~\nMODULE Expand;\nIMPORT In, Out;\n\nCONST\n    TILDE = \"~\";\n    WARNING = TILDE;    (* ~ *)\n    LetterA = ORD(\"A\");\n    LetterZ = ORD(\"Z\");\n\n(* IsUpper -- true if c is upper case letter *)\nPROCEDURE IsUpper (c : CHAR) : BOOLEAN;\nVAR res : BOOLEAN;\nBEGIN\n    IF (ORD(c) >= LetterA) & (ORD(c) <= LetterZ) THEN\n        res := TRUE;\n    ELSE\n        res := FALSE;\n    END\n    RETURN res\nEND IsUpper;\n\n(* Expand -- uncompress standard input *)\nPROCEDURE Expand();\nVAR\n    c : CHAR;\n    n, i : INTEGER;\nBEGIN\n    REPEAT\n        In.Char(c);\n        IF (c # WARNING) THEN\n            Out.Char(c);\n        ELSE\n            In.Char(c);\n            IF IsUpper(c) THEN\n                n := (ORD(c) - ORD(\"A\")) + 1;\n                In.Char(c);\n                IF (In.Done) THEN\n                    FOR i := n TO 1 BY -1 DO\n                        Out.Char(c);\n                    END;\n                ELSE\n                    Out.Char(WARNING);\n                    Out.Char(CHR((n - 1) + ORD(\"A\")));\n                END;\n            ELSE\n                Out.Char(WARNING);\n                IF In.Done THEN\n                    Out.Char(c);\n                END;\n            END;\n        END;\n    UNTIL In.Done # TRUE;\nEND Expand;\n\nBEGIN\n    Expand();\nEND Expand.\n\n~~~\n\n\n2.5 Command Arguments\n=====================\n\n[Page 44](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/44/mode/1up)\n\n\nProgram Documentation\n---------------------\n\n[Page 45](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/45/mode/1up)\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPROGRAM\n\n    echo    echo arguments to standard output\n\nUSAGE\n\n    echo [ argument ... ]\n\nFUNCTION\n\n    echo copies its command line arguments to its output as a line\n    of text with one space\n    between each argument. IF there are no arguments, no output is\n    produced.\n\nEXAMPLE\n\n    To see if your system is alive:\n\n        echo hello world!\n        hello world!\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nSource code for **Echo.Mod**\n----------------------------\n\n~~~\n\nMODULE Echo;\nIMPORT Out, Args := extArgs;\n\nCONST\n    MAXSTR = 1024; (* or whatever *)\n    BLANK = \" \";\n\n(* Echo -- echo command line arguments to output *)\nPROCEDURE Echo();\nVAR\n    i, res : INTEGER;\n    argstr : ARRAY MAXSTR OF CHAR;\nBEGIN\n    i := 0;\n    FOR i := 0 TO (Args.count - 1) DO\n        Args.Get(i, argstr, res);\n        IF (i > 0) THEN\n            Out.Char(BLANK);\n        END;\n        Out.String(argstr);\n    END;\n    IF Args.count > 0 THEN\n        Out.Ln();\n    END;\nEND Echo;\n\nBEGIN\n    Echo();\nEND Echo.\n\n~~~\n\n\n2.6 Character Transliteration\n=============================\n\n[Page 47](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/47/mode/1up)\n\n\n**translit** is the most complicated program so far in the book.\nMost of the translation process from Pascal to Oberon-07 has\nremained similar to the previous examples.\n\nMy implementation of **translit** diverges from the K & P\nimplementation at several points. Much of this is a result of\nOberon evolution beyond Pascal. First Oberon counts arrays from\nzero instead of one so I have opted to use -1 as a value to\nindicate the index of a character in a string was not found.\nEqually I have simplified the logic in `xindex()` to make it clear\nhow I am handling the index lookup described in `index()` of the\nPascal implementation. K & P implemented `makeset()` and `dodash()`.\n`dodash()` particularly looked troublesome. If you came across the\nfunction name `dodash()` without seeing the code comments\n\"doing a dash\" seems a little obscure.  I have chosen to name\nthat process \"Expand Sequence\" for clarity. I have simplified the\ntask of making sets of characters for translation into three cases\nby splitting the test conditions from the actions. First check to\nsee if we have an escape sequence and if so handle it. Second check\nto see if we have an expansion sequence and if so handle it else\nappend the char found to the end of the set being assembled. This\nresulted in `dodash()` being replaced by `IsSequence()` and\n`ExpandSequence()`.  Likewise `esc()` was replaced with `IsEscape()`\nand `ExpandEscape()`. I renamed `addchar()` to `AppendChar()`\nin the \"Chars\" module as that seemed more specific and clearer.\n\nI choose to advance the value used when expanding a set description\nin the loop inside of my `MakeSet()`. I minimized the side effects\nof the expand functions to the target destination.  It is clearer\nwhile in the `MakeSet()` loop to see the relationship of the test\nand transformation and how to advance through the string. This also\nallowed me to use fewer parameters to procedures which tends to\nmake things more readable as well as simpler.\n\nI have included an additional procedure not included in the K & P\nPascal of this program. `Error()` displays a string and halts.\nK & P provide this as part of their Pascal environment. I have\nchosen to embed it here because it is short and trivial.\n\nTranslit suggested the \"Chars\" module because of the repetition in\nprevious programs. In K & P the approach to code reuse is to create\na separate source file and to included via a pre-processor. In\nOberon we have the module concept.\n\nMy [Chars](Chars.Mod) module provides a useful set of test\nprocedures like `IsAlpha(c)`, `IsUpper(c)`, `IsLower()` in addition\nto the `CharInRange()` and `IsAlphaNum()`.  It also includes\n`AppendChar()` which can be used to append a single character value\nto an end of an array of char.\n\n\nProgram Documentation\n---------------------\n\n[Page 56](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/56/mode/1up)\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPROGRAM\n\n    translit    transliterate characters\n\nUSAGE\n\n    translit    [^]src [dest]\n\nFUNCTION\n\n    translit maps its input, on a character by character basis, and\n    writes the translated version to its output.In the simplest case,\n    each character is the argument src is translated to the\n    corresponding character is the argument dest; all other characters\n    are copies as is. Both the src and dest may contain substrings of\n    the form c1 - c2 as shorthand for all the characters in the range\n    c1..c2 and c2 must both be digits, or both be letter of the same\n    case. If dest is absent, all characters represented by src are\n    deleted. Otherwise, if dest is shorter than src, all characters\n    is src that would map to or beyond the last character in\n    dest are mapped to the last character in dest; moreover adjacent\n    instances of such characters in the input are represented in the\n    output by a single instance of the last character in dest. The\n\n        translit 0-9 9\n\n    converts each string of digits to the single digit 9.\n    Finally, if src is precedded by ^, then all but the characters\n    represented by src are taken as the source string; i.e., they are\n    all deleted if dest is absent, or they are all collapsed if the\n    last character in dest is present.\n\nEXAMPLE\n\n    To convert upper case to lower:\n\n        translit A-Z a-z\n\n    To discard punctualtion and isolate words by spaces on each line:\n\n        translit ^a-zA-Z@n \" \"\n        This is a simple-minded test, i.e., a test of translit.\n        This is a simple minded test i e a test of translit\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPascal Source\n-------------\n\n[translit.p, Page 48](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/48/mode/1up)\n\n[makeset.p, Page 52](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/52/mode/2up)\n\n\n[addstr.p, Page 53](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/53/mode/1up)\n\n[dodash.p, Page 53](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/53/mode/1up)\n\n[isalphanum.p, Page 54](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/54/mode/1up)\n\n[esc.p, Page 55](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/55/mode/1up)\n\n\n[length.p, Page 46](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/46/mode/1up)\n\n\nThe impacts of having a richer language than 1980s ISO Pascal and\nevolution in practice suggest a revision in the K & P approach. I\nhave attempted to keep the spirit of their example program while\nreflecting changes in practice that have occurred in the last four\ndecades.\n\n\nSource code for **Translit.Mod**\n--------------------------------\n\n~~~\nMODULE Translit;\nIMPORT In, Out, Args := extArgs, Strings, Chars;\n\nCONST\n    MAXSTR = 1024; (* or whatever *)\n    DASH = Chars.DASH;\n    ENDSTR = Chars.ENDSTR;\n    ESCAPE = \"@\";\n    TAB* = Chars.TAB;\n\n(* Error -- write an error string to standard out and\n   halt program *)\nPROCEDURE Error(s : ARRAY OF CHAR);\nBEGIN\n    Out.String(s);Out.Ln();\n    ASSERT(FALSE);\nEND Error;\n\n(* IsEscape - this procedure looks to see if we have an\nescape sequence at position in variable i *)\nPROCEDURE IsEscape*(src : ARRAY OF CHAR; i : INTEGER) : BOOLEAN;\nVAR res : BOOLEAN; last : INTEGER;\nBEGIN\n  res := FALSE;\n  last := Strings.Length(src) - 1;\n  IF (i < last) & (src[i] = ESCAPE) THEN\n    res := TRUE;\n  END;\n  RETURN res\nEND IsEscape;\n\n(* ExpandEscape - this procedure takes a source array, a\n   position and appends the escaped value to the destintation\n   array.  It returns TRUE on successuss, FALSE otherwise. *)\nPROCEDURE ExpandEscape*(src : ARRAY OF CHAR; i : INTEGER; VAR dest : ARRAY OF CHAR) : BOOLEAN;\nVAR res : BOOLEAN; j : INTEGER;\nBEGIN\n res := FALSE;\n j := i + 1;\n IF j < Strings.Length(src)  THEN\n    res := Chars.AppendChar(src[j], dest)\n END\n RETURN res\nEND ExpandEscape;\n\n(* IsSequence - this procedure looks at position i and checks\n   to see if we have a sequence to expand *)\nPROCEDURE IsSequence*(src : ARRAY OF CHAR; i : INTEGER) : BOOLEAN;\nVAR res : BOOLEAN;\nBEGIN\n  res := Strings.Length(src) - i >= 3;\n  (* Do we have a sequence of alphumeric character\n     DASH alpanumeric character? *)\n  IF res & Chars.IsAlphaNum(src[i]) & (src[i+1] = DASH) &\n            Chars.IsAlphaNum(src[i+2]) THEN\n      res := TRUE;\n  END;\n  RETURN res\nEND IsSequence;\n\n(* ExpandSequence - this procedure expands a sequence x\n   starting at i and append the sequence into the destination\n   string. It returns TRUE on success, FALSE otherwise *)\nPROCEDURE ExpandSequence*(src : ARRAY OF CHAR; i : INTEGER; VAR dest : ARRAY OF CHAR) : BOOLEAN;\nVAR res : BOOLEAN; cur, start, end : INTEGER;\nBEGIN\n  (* Make sure sequence is assending *)\n  res := TRUE;\n  start := ORD(src[i]);\n  end := ORD(src[i+2]);\n  IF start < end THEN\n    FOR cur := start TO end DO\n      IF res THEN\n        res := Chars.AppendChar(CHR(cur), dest);\n      END;\n    END;\n  ELSE\n    res := FALSE;\n  END;\n  RETURN res\nEND ExpandSequence;\n\n\n(* makeset -- make sets based on src expanded into destination *)\nPROCEDURE MakeSet* (src : ARRAY OF CHAR; start : INTEGER; VAR dest : ARRAY OF CHAR) : BOOLEAN;\nVAR i : INTEGER; makeset : BOOLEAN;\nBEGIN\n    i := start;\n    makeset := TRUE;\n    WHILE (makeset = TRUE) & (i < Strings.Length(src)) DO\n        IF IsEscape(src, i) THEN\n            makeset := ExpandEscape(src, i, dest);\n            i := i + 2;\n        ELSIF IsSequence(src, i) THEN\n            makeset := ExpandSequence(src, i, dest);\n            i := i + 3;\n        ELSE\n            makeset := Chars.AppendChar(src[i], dest);\n            i := i + 1;\n        END;\n    END;\n    RETURN makeset\nEND MakeSet;\n\n\n(* Index -- find position of character c in string s *)\nPROCEDURE Index* (VAR s : ARRAY OF CHAR; c : CHAR) : INTEGER;\nVAR\n    i, index : INTEGER;\nBEGIN\n    i := 0;\n    WHILE (s[i] # c) & (s[i] # ENDSTR) DO\n        i := i + 1;\n    END;\n    IF (s[i] = ENDSTR) THEN\n        index := -1; (* Value not found *)\n    ELSE\n        index := i; (* Value found *)\n    END;\n    RETURN index\nEND Index;\n\n(* XIndex -- conditionally invert value found in index *)\nPROCEDURE XIndex* (VAR inset : ARRAY OF CHAR; c : CHAR;\n    allbut : BOOLEAN; lastto : INTEGER) : INTEGER;\nVAR\n    xindex : INTEGER;\nBEGIN\n    (* Uninverted index value *)\n    xindex := Index(inset, c);\n    (* Handle inverted index value *)\n    IF (allbut = TRUE) THEN\n        IF (xindex = -1)  THEN\n            (* Translate as an inverted the response *)\n            xindex := 0; (* lastto - 1; *)\n        ELSE\n            (* Indicate no translate *)\n            xindex := -1;\n        END;\n    END;\n    RETURN xindex\nEND XIndex;\n\n(* Translit -- map characters *)\nPROCEDURE Translit* ();\nCONST\n    NEGATE = Chars.CARET; (* ^ *)\nVAR\n    arg, fromset, toset : ARRAY MAXSTR OF CHAR;\n    c : CHAR;\n    i, lastto : INTEGER;\n    allbut, squash : BOOLEAN;\n    res : INTEGER;\nBEGIN\n    i := 0;\n    lastto := MAXSTR - 1;\n    (* NOTE: We are doing low level of string manimulation. Oberon\n       strings are terminated by 0X, but Oberon compilers do not\n       automatically initialize memory to a specific state. In the\n       OBNC implementation of Oberon-07 assign \"\" to an assignment\n       like `s := \"\";` only writes a 0X to position zero of the\n       array of char. Since we are doing position based character\n       assignment and can easily overwrite a single 0X.  To be safe\n       we want to assign all the positions in the array to 0X so the\n       memory is in a known state.  *)\n    Chars.Clear(arg);\n    Chars.Clear(fromset);\n    Chars.Clear(toset);\n    IF (Args.count = 0) THEN\n        Error(\"usage: translit from to\");\n    END;\n    (* NOTE: I have not used an IF ELSE here because we have\n       additional conditions that lead to complex logic.  The\n       procedure Error() calls ASSERT(FALSE); which in Oberon-07\n       halts the program from further execution *)\n    IF (Args.count > 0) THEN\n        Args.Get(0, arg, res);\n        allbut := (arg[0] = NEGATE);\n        IF (allbut) THEN\n            i := 1;\n        ELSE\n            i := 0;\n        END;\n        IF MakeSet(arg, i, fromset) = FALSE THEN\n            Error(\"from set too long\");\n        END;\n    END;\n    (* NOTE: We have initialized our array of char earlier so we only\n       need to know if we need to update toset to a new value *)\n    Chars.Clear(arg);\n    IF (Args.count = 2) THEN\n        Args.Get(1, arg, res);\n        IF MakeSet(arg, 0, toset) = FALSE THEN\n            Error(\"to set too long\");\n        END;\n    END;\n\n    lastto := Strings.Length(toset);\n    squash := (Strings.Length(fromset) > lastto) OR (allbut);\n    REPEAT\n        In.Char(c);\n        IF In.Done THEN\n            i := XIndex(fromset, c, allbut, lastto);\n            IF (squash) & (i>=lastto) & (lastto>0) THEN (* translate *)\n                Out.Char(toset[lastto]);\n            ELSIF (i >= 0) & (lastto > 0) THEN    (* translate *)\n                Out.Char(toset[i]);\n            ELSIF i = -1 THEN                        (* copy *)\n              (* Do not translate the character *)\n              Out.Char(c);\n              (* NOTE: No else clause needed as not writing out\n\t\t\t     a cut value is deleting *)\n            END;\n        END;\n    UNTIL (In.Done # TRUE);\nEND Translit;\n\nBEGIN\n    Translit();\nEND Translit.\n\n~~~\n\n\n\nIn closing\n==========\n\nIn this chapter we interact with some of the most common features\nof command line programs available on POSIX systems. K & P have given\nus a solid foundation on which to build more complex and ambitious\nprograms. In the following chapters the read will find an\naccelerated level of complexity bit also programs that are\nsignificantly more powerful.\n\nOberon language evolved with the Oberon System which had a very\ndifferent rich text user interface when compared with POSIX.\nFortunately Karl's OBNC comes with a set of modules that make\nOberon-07 friendly for building programs for POSIX operating systems.\nI've taken advantage of his `extArgs` module much in the way\nthat K & P relied on a set of primitive tools to provide a common\nprogramming environment. K & P's version of\n[implementation of primitives](https://archive.org/details/softwaretoolsinp00kern/page/315/mode/1up)\nlisted in their appendix. Karl's OBNC extensions modules are\ndescribed on [website](https://miasap.se/obnc/obncdoc/ext/).\nOther Oberon compilers provide similar modules though implementation\nspecific. A good example is Spivey's [Oxford Oberon-2 Compiler](https://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler).\nK & P chose to target multiple Pascal implementations, I have the\nluxury of targeting one Oberon-07 implementation. That said if you\nadded a pre-processor like K & P did you could also take their approach\nto allow you Oberon-07 code to work across many Oberon compiler\nimplementations. I leave that as an exercise for the reader.\n\nI've chosen to revise some of the code presented in K & P's book. I\nbelieve the K & P implementations still contains wisdom in their\nimplementations. They had different constraints and thus made\ndifferent choices in implementation. Understand the trade offs and\nchallenges to writing portable code capable of running in very\ndivergent set of early 1980's operating systems remains useful today.\n\nCompiling with OBNC:\n\n~~~\n\n    obnc -o entab Entab.Mod\n    obnc -o overstrike Overstrike.Mod\n    obnc -o compress Compress.Mod\n    obnc -o expand Expand.Mod\n    obnc -o echo Echo.Mod\n    obnc -o translit Translit.Mod\n\n~~~\n\n+ [Entab](Entab.Mod)\n    + [Tabs](Tabs.Mod), this one visited this one in last installment.\n+ [Overstrike](Overstrike.Mod)\n+ [Compress](Compress.Mod)\n+ [Expand](Expand.Mod)\n+ [Echo](Echo.Mod)\n+ [Translit](Translit.Mod)\n\t+ [Chars](Chars.Mod)\n\n<!--\nNext and Previous\n-----------------\n\n+ Next: [Files]()\n-->\n\nPrevious\n--------\n\n+ Previous: [Getting Started](../../09/29/Software-Tools-1.html)\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "keywords": [
          "Oberon",
          "Pascal",
          "Programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 2,
        "series": "Software Tools",
        "title": "Software Tools, Filters"
      },
      "url": "posts/2020/10/31/Filters.json"
    },
    {
      "content": "\n\n# Procedures in records\n\nBy R. S. Doiel, 2020-07-07\n\nThis is the tenth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.\nMostly Oberon documents my exploration of the Oberon Language, Oberon System and the \nvarious rabbit holes I will inevitably fall into.\n\nIn my last post I looked at how Oberon-07 supports the passing of procedures as parameters in a procedure. In this one I am looking at how we can\ninclude procedures as a part of an Oberon RECORD. \n\nLet's modify our module name [Noises.Mod](Noises.Mod) to explore this.\nCopy \"Noises.Mod\" to \"Creatures.Mod\". Replace the \"MODULE Noises;\" line with\n\"MODULE Creatures;\" and the final \"END Noises.\" statement with \"END Creatures.\".\n\n\n~~~\n\n    MODULE Creatures;\n    \n    (* rest of code here *)\n\n    END Creatures.\n\n~~~\n\n\nThe key to supporting records with procedures as record attributes is once again Oberon's type system.  The type `Noise` we created in the previous post can also be used to declare a record attribute similar to how we use this new type to pass the procedure. In this exploration will create a linked list of \"Creature\" types which include a \"MakeNoise\" attribute.\n\nFirst let's define our \"Creature\" as a type as well as a \n`CreatureList`. Add the following under our `TYPE` \ndefinition in [Creatures.Mod](Creatures.Mod).\n\n\n~~~\n\n    Creature = POINTER TO CreatureDesc;\n    CreatureDesc = RECORD\n                     name : ARRAY 32 OF CHAR;\n                     noises : Noises;\n                   END;\n\n~~~\n\n\nLet's create a new `MakeCreature` procedure that will create\na populate a single `Creature` type record.\n\n\n~~~\n\n    PROCEDURE MakeCreature(name : ARRAY OF CHAR; noise : Noise; VAR creature : Creature);\n    BEGIN\n      NEW(creature);\n      creature.name := name;\n      creature.noise := noise;\n    END MakeCreature;\n\n~~~\n\n\nNow lets modify `MakeNoise` to accept the `Creature` type RECORD\nrather than a name and a noise procedure parameter.\n\n\n~~~\n\n    PROCEDURE MakeNoise(creature : Creator);\n    BEGIN\n      creature.noise(creature.name);\n    END MakeNoise;\n\n~~~\n\n\nHow does this all work?  The two \"Noise\" procedures \n\"BarkBark\" and \"ChirpChirp\" remain as in our original \n\"Noises\" module. But our new `MakeNoise` procedure\nlooks takes a `Creature` record rather than accepting a\nname and procedure as parameters. This makes the code \na little more concise as well as lets you evolve the\ncreature record type using an object oriented approach.\n\nOur revised module should look like this.\n\n\n~~~\n\n    MODULE Noises;\n      IMPORT Out;\n    \n    TYPE \n      Noise = PROCEDURE(who : ARRAY OF CHAR);\n\n      Creature = RECORD\n                   name : ARRAY 32 OF CHAR;\n                   noises : Noises;\n                 END;\n    \n    VAR\n      dog, bird : Creature;\n\n    PROCEDURE BarkBark(who : ARRAY OF CHAR);\n    BEGIN\n      Out.String(who);\n      Out.String(\": Bark, bark\");Out.Ln();\n    END BarkBark;\n    \n    PROCEDURE ChirpChirp(who : ARRAY OF CHAR);\n    BEGIN\n      Out.String(who);\n      Out.String(\": Chirp, chirp\");Out.Ln();\n    END ChirpChirp;\n    \n    PROCEDURE MakeNoise(creature : Creature);\n    BEGIN\n      (* Call noise with the animal name *)\n      creature.noise(creature.name);\n    END MakeNoise;\n\n    PROCEDURE MakeCreature(name : ARRAY OF CHAR; noise : Noise; VAR creature : Creature);\n    BEGIN\n      NEW(creature);\n      creature.name := name;\n      creature.noise := noise;\n    END MakeCreaturel\n    \n    BEGIN\n      MakeCreature(\"Fido\", BarkBark, dog);\n      MakeCreature(\"Tweety\", ChirpChirp, bird);\n      MakeNoise(dog);\n      MakeNoise(bird);\n    END Noises.\n\n~~~\n\n\nWhere to go from here? Think about evolving [Creatures](Creatures.Mod) so\nthat you can create a dynamic set of creatures that mix and match their\nbehaviors. Another idea would be to add a \"MutateCreature\" procedure\nthat would let you change the noise procedure to something new.\n\n\n### Next and Previous \n\n+ Next [Portable Oberon-07](../../08/15/Portable-Oberon-07.html)\n+ Previous [Procedures as parameters](../../06/20/Procedures-as-parameters.html) \n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-07-07",
        "keywords": [
          "Oberon",
          "procedures",
          "record procedures",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 10,
        "series": "Mostly Oberon",
        "title": "Procedures in records"
      },
      "url": "posts/2020/07/07/Procedures-in-records.json"
    },
    {
      "content": "\n\n# Words Matter\n\nBy R. S. Doiel, 2020-07-08\n\nUPDATE (2020-08-15, RSD): When I added a post today I was VERY pleased to \nto see that GitHub now allows me to publish my blog via the \"main\" branch.\nIt's nice to see the change in the words we use.\n\n**Why does software development use the vocabulary of slavery and\nJim Crow to describe our creations?** What we call things matters.\nThis is especially true of the words we use day to day without thinking.\n\n```shell\n    git pull origin master\n```\n\n\"Naming things is a hard problem in computer science.\" That is\na phrase I remember from my student days. We name variables,\nprograms and algorithms. We name architectures. Naming is a choice.\nThe names convey meaning and intent. Names and terms are a human\ncommunication. They matter.\n\n```shell\n    git push origin master\n```\n\n\n## Names can change\n\nI remember the first time I encountered the terminology \"master/slave\"\ndescribing network and database architecture. I remember cringing at\nthe terms. I accepted the terminology because I was a student and\nnaively assumed that those terms were chosen innocently and did not\nmean what they did. I was wrong.\n\nExample MySQL command:\n\n```sql\n    CHANGE MASTER TO MASTER_HOST=host1,\n    MASTER_PORT=3002 FOR CHANNEL 'channel2';\n```\n\nWhen I did not challenge the use of those terms in computer science\nI became complicit in the status quo of systemic racism. I am not happy\nabout that. Not then and not now.  We need inclusive language\nin engineering. We need real diversity to find solutions to\ntoday's challenges.  In software engineering we very much control what\nwe call things. Software is an explicit form of written human\ncommunication. Words count. Words directly impact culture and our\ncommunity.\n\nExample MySQL commands:\n\n```sql\n    START SLAVE;\n    RESET SLAVE;\n    STOP SLAVE;\n```\n\nAs a direct benefactor of white male privilege I find the\nterminology of \"master/slave\" offensive.  I am certain those\nwords caused injury to those who did not benefit from the same white\nmale privilege.  Using \"master/slave\" terminology to describe database,\nreplication, network architectures or as used with version control\nsystems like Git is like polishing statues that glorify slavery.\nIt endorses inhumanity in a subtle and casual way.\n\nWe have a choice about how we communicate and what we communicate\nto convey meaning.  Let's use better words. It is time to change\nsome.\n\n\n## Practice Change\n\n**To change our community's vocabulary we need to thoughtfully choose terms**.\nMy friends and colleagues introduced me to using the term \"main\" as\na better descriptive word than \"master\" in Git repositories. When\nI started making the branch name changes in my Git repositories I ran\nacross a problem at GitHub.\n\n\n## Note the problem\n\nRecently GitHub made it possible to easily change the default branch.\nFor a number of years you could change the published documentation\nbranch from \"gh-pages\" to something you prefer.\nWhat you can't do is change the name of the branch used to publish\npersonal and group websites.  **GitHub explicitly states that the\npublication branch must be named \"master\".** I tested this and\nconfirmed the documentation is accurate as of today (2020-07-08, morning).\n\nWith the recent improvements in GitHub to allow default branches to\nbe named better it seems odd that you still have to publish\npersonal and group pages to \"master\" in order to publish a website. It\nnever made sense to me that person and group pages didn't use the default\nof \"gh-pages\" in the first place.\n\n\n## Taking action\n\nMorning (2020-07-08): I submitted a ticket to GitHub asking to have\nthe option of using another word besides \"master\" for the publication\nbranch in publishing my personal GitHub pages (i.e. this blog).\nUnfortunately the ticket doesn't have a public URL. I don't know how many\nother people have submitted similar requests. If only a few people\nhave requested this recently it will not be changed. Such is the nature\nof systemic problems.\n\nPlease help improve the words and names we use in software.\nI believe it can make a difference in creating a more inclusive and\nequitable community and profession. Raise the issue when it comes to\nyour attention. Silence becomes acceptance with systemic problems.\n\n## A reply\n\nEvening (2020-07-08): I got a reply today from Steve G of customer\nsupport. Not sure if the reply is a bot or human.  It was a nice polite\nreply (I wrote a nice polite ticket).  Steve mentioned that CEO Nat\nFriedman had addressed this on twitter and to follow the GitHub blog\nnews.  Steve said dropping master was a priority for GitHub but there\nis no time line for implementation.\n\nI am not sure how you can develop software with a priority in mind and\nnot have a sense of time it takes to implement it.  I mentioned that in my\nresponse to Steve G.\n\nAfter some Duck Duck searching I found a [BBC article](https://www.bbc.com/news/technology-53050955) dated June 15th, 2020 where Nat made the\nannouncement about Microsoft's GitHub making the change away from \"master\".\nNext week is July 15th. It will be interesting to see how much of an unscheduled priority this change is.\n\nI am skeptical.  If Steve G had indicated that they are actively working\nthe problem and provided a general time range I would be more inclined to\ngive Nat, GitHub and Microsoft the benefit of the doubt.  Given the rest\nof the content I read on Nat's twitter feed I don't think this is a priority\nbeyond press, publicity and stock price.\n\n\n## Where to go from here?\n\nJust as many sites have adopted more gender neutral terms in documentation\npractice we should encourage better descriptive terms for our algorithms,\nand architectures. If you run into terms perpetuating exclusion please\nspeak up.  Most of the web runs on web servers and databases.  Like GitHub\nthose software projects frequently use the terminology of \"master/slave\".\nIt is especially prevalent in documentation about replication. Blindly\nperpetuating the \"master/slave\" terminology to describe distributed\nsoftware and architectures is like polishing a statue to the old\nConfederacy. It can and should be change. We can communicate better\nwithout perpetuating the vocabulary of Jim Crow, segregation, slavery\nand oppression.\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-07-08",
        "keywords": [
          "civil rights",
          "diversity",
          "equality"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Words Matter"
      },
      "url": "posts/2020/07/08/words-matter.json"
    },
    {
      "content": "\n\n# Software Tools, Getting Started\n\n## Overview\n\nThis post is the first in a series revisiting the\nprograms described in the 1981 book by Brian W. Kernighan and\nP. J. Plauger's called [Software Tools in Pascal](https://archive.org/details/softwaretoolsinp00kern).\nThe book is available from the [Open Library](https://openlibrary.org/)\nand physical copies are still (2020) commonly available from used book\nsellers.  The book was an early text on creating portable command\nline programs.  \n\nIn this series I present the K & P (i.e. Software Tools in Pascal)\nprograms re-implemented in Oberon-07. I have testing my implementations\nusing Karl Landström's [OBNC](http://miasap.se/obnc/)\ncompiler and his implementation of the Oakwood Guide's modules\nfor portable Oberon programs. Karl also provides a few additional\nmodules for working in a POSIX environment (e.g. BSD, macOS, Linux,\nWindows 10 with Linux subsystem). I have also tested these\nprograms with Mike Spivey's [Oxford Oberon Compiler](http://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler) an aside\nfrom the differences file extensions that both compilers use\nthe source code works the same. \n\nNOTE: OBNC compiler is the work of Karl Langström, it is portable across many systems where the C tool chain is available.\n\nNOTE: POSIX defines a standard of compatibility inspired by [UNIX](https://en.wikipedia.org/wiki/Unix), see <https://en.wikipedia.org/wiki/POSIX>\n\n\n## Getting Started.\n\nChapter one in K & P is the first chapter that presents code. It introduces\nsome challenges and constraints creating portable Pascal suitable for use\nacross hardware architectures and operating systems. In 1981 this included\nmainframes, minicomputers as well as the recent evolution of the microcomputer.\nThe programs presented build up from simple to increasingly complex as\nyou move through the book.  They provide example documentation and discuss\ntheir implementation choices. It is well worth reading the book for those\ndiscussions, while specific to the era, mirror the problems program authors\nface today in spite of the wide spread success of the POXIS model, the\nconsolidation of CPU types and improvements made in development tools in\nthe intervening decades.\n\nThrough out K & P you'll see the bones of many POSIX commands we have today.\n\nPrograms from this chapter include:\n\n1. **copyprog**, this is like \"cat\" in a POSIX system\n2. **charcount**, this is like the \"wc\" POSIX command using the \"-c\" option\n3. **linecount**, this is like the \"wc\" POSIX command using the \"-l\" option\n4. **wordcount**, this is like the \"wc\" POSIX command using the \"-w\" option\n5. **detab**, converts tabs to spaces using tab stops every four characters in a line\n\nAll programs in this chapter rely solely on standard input and output.\nToday's reader will notice an absence to common concepts in today's\ncommand line programs.  First is the lack of interaction with command line\nparameters, the second is no example take advantage of environment variables.\nThese operating system features were not always available across\noperating systems of the early 1980s. Finally I'd like to point out a\nreally nice feature included in the book. It is often left out as a topic\nin programming books.  K & P provide example documentation. It's structure\nlike an early UNIX man page. It very clear and short. This is something\nI wish all programming texts at least mentioned. Documentation is important\nto the program author because it clarifies scope of the problem being\ntackled and to the program user so they understand what they are using.\n\n\n### [1.1. File Copying](https://archive.org/details/softwaretoolsinp00kern/page/7/mode/1up)\n\nHere's how K & P describe \"copyprog.pas\" (referred to as \"copy\" in\nthe documentation).\n\n\n~~~\n\nPROGRAM\n\n    copy    copy input to output\n\nUSAGE\n\n    copy\n\nFUNCTION\n\n    copy copies its input to its output unchanged. It is useful for copying\n    from a terminal to a file, from file to file, or even from terminal to\n    terminal. It may be used for displaying the contents of a file, without\n    interpretation or formatting, by copying from the file to terminal.\n\nEXAMPLE\n\n    To echo lines type at your terminal.\n\n    copy\n    hello there, are you listening?\n    **hello there, are you listening?**\n    yes, I am.\n    **yes, I am.**\n    <ENDFILE>\n\n~~~\n\nThe source code for \"copyprog.pas\" is shown on\n[page 9](https://archive.org/details/softwaretoolsinp00kern/page/9/mode/1up)\nof K & P.  First the authors introduce the __copy__ procedure\nthen a complete the section introducing it in context of the complete Pascal\nprogram. After this first example K & P leave implementation of the full\nprogram up to the reader.\n\nThe body of the Pascal program invokes a procedure called\n[copy](https://archive.org/details/softwaretoolsinp00kern/page/8/mode/1up)\nwhich reads from standard input character by character and writes\nto standard output character by character without modification.  Two\nsupporting procedures are introduced, \"getc\" and \"putc\". These are shown\nin the complete program listing on page 9. They are repeatedly used\nthrough out the book. One of the really good aspects of this simple\nprogram is relying on the idea of standard input and output. This makes\n\"copyprog.pas\" a simple filter and template for writing many of the programs\nthat follow. K & P provide a good explanation for this simple approach.\nAlso note K & P's rational for working character by character versus\nline by line.\n\nMy Oberon-07 version takes a similar approach. The module looks remarkably\nsimilar to the Pascal but is shorter because reading and writing characters are\nprovided for by Oberon's standard modules \"In\" and \"Out\".\nI have chosen to use a \"REPEAT/UNTIL\" loop over the \"WHILE\"\nloop used by K & P is the attempt to read from standard input needs to happen\nat least once. Note in my \"REPEAT/UNTIL\" loop's terminating condition.\nThe value of `In.Done` is true on successful read and false\notherwise (e.g. you hit an end of the file). That means our loop must\nterminate on `In.Done # TRUE` rather than `In.Done = TRUE`. This appears\ncounter intuitive unless you keep in mind our loop stops when we having\nnothing more to read, rather than when we can continue to read.\nIt `In.Done` means the read was successful and does not\nmean \"I'm done and can exit now\". Likewise before writing out the character\nwe read, it is good practice to check the `In.Done` value. If `In.Done` is\nTRUE, I know can safely display the character using `Out.Char(c);`.\n\n~~~\n\nMODULE CopyProg;\nIMPORT In, Out;\n\nPROCEDURE copy;\nVAR\n  c : CHAR;\nBEGIN\n  REPEAT\n    In.Char(c);\n    IF In.Done THEN\n        Out.Char(c);\n    END;\n  UNTIL In.Done # TRUE;\nEND copy;\n\nBEGIN\n  copy();\nEND CopyProg.\n\n~~~\n\n#### Limitations\n\nThis program only works with standard input and output. A more generalized\nversion would work with named files.\n\n### [1.2 Counting Characters](https://archive.org/details/softwaretoolsinp00kern/page/13/mode/1up)\n\n~~~\n\nPROGRAM\n\n  charcount count characters in input\n\nUSAGE\n\n  charcount\n\nFUNCTION\n\n  charcount counts the characters in its input and writes the total\n  as a single line of text to the output. Since each line of text is\n  internally delimited by a NEWLINE character, the total count is the\n  number of lines plus the number of characters within each line.\n\nEXAMPLE\n\n  charcount\n  A single line of input.\n  <ENDFILE>\n  24\n\n~~~\n\n[On page 13](https://archive.org/details/softwaretoolsinp00kern/page/13/mode/1up)\nK & P introduces their second program, **charcount**. It is based on a single\nprocedure that reads from standard input and counts up the number of\ncharacters encountered then writes the total number found to standard out\nfollowed by a newline. In the text only the procedure is shown, it is\nassumed you'll write the outer wrapper of the program yourself as\nwas done with the **copyprog** program. My Oberon-07 version is very similar\nto the Pascal. Like in the our first \"CopyProg\" we will make use of the\n\"In\" and \"Out\" modules. Since we will\nneed to write an INTEGER value we'll also use \"Out.Int()\" procedure which\nis very similar to K & P's \"putdec()\". Aside from the counting this is very\nsimple  like our first program.\n\n~~~\n\nMODULE CharCount;\nIMPORT In, Out;\n\nPROCEDURE CharCount;\nVAR\n  nc : INTEGER;\n  c : CHAR;\nBEGIN\n  nc := 0;\n\n  REPEAT\n    In.Char(c);\n    IF In.Done THEN\n      nc := nc + 1;\n    END;\n  UNTIL In.Done # TRUE;\n  Out.Int(nc, 1);\n  Out.Ln();\nEND CharCount;\n\nBEGIN\n  CharCount();\nEND CharCount.\n\n~~~\n\n#### Limitations\n\nThe primary limitation in counting characters is most readers are\ninterested in visible character count. In our implementation\neven non-printed characters are counted. Like our first program\nthis only works on standard input and output. Ideally this should\nbe written so it works on any file including standard input and\noutput. If the reader implements that it could become part of a\npackage on statistical analysis of plain text files.\n\n### [1.3 Counting Lines](https://archive.org/details/softwaretoolsinp00kern/page/14/mode/1up)\n\n~~~\n\nPROGRAM\n\n  linecount count lines in input\n\nUSAGE\n\n  linecount\n\nFUNCTION\n\n  linecount counts the lines in its input and write the total as a\n  line of text to the output.\n\nEXAMPLE\n\n  linecount\n  A single line of input.\n  <ENDFILE>\n  1\n\n~~~\n\n**linecount**, from [page 15](https://archive.org/details/softwaretoolsinp00kern/page/15/mode/1up)\nis very similar to **charcount** except adding a\nconditional count in the loop for processing the file. In\nour Oberon-07 implementation we'll check if the `In.Char(c)`\ncall was successful but we'll add a second condition to see if the\ncharacter read was a NEWLINE. If it was I increment\nour counter variable.\n\n~~~\n\nMODULE LineCount;\nIMPORT In, Out;\n\nPROCEDURE LineCount;\nCONST\n  NEWLINE = 10;\n\nVAR\n  nl : INTEGER;\n  c : CHAR;\nBEGIN\n  nl := 0;\n  REPEAT\n    In.Char(c);\n    IF In.Done & (ORD(c) = NEWLINE) THEN\n      nl := nl + 1;\n    END;\n  UNTIL In.Done # TRUE;\n  Out.Int(nl, 1);\n  Out.Ln();\nEND LineCount;\n\nBEGIN\n  LineCount();\nEND LineCount.\n\n~~~\n\n#### Limitations\n\nThis program assumes that NEWLINE is ASCII value 10. Line delimiters\nvary between operating systems.  If your OS used carriage returns\nwithout a NEWLINE then this program would not count lines correctly.\nThe reader could extend the checking to support carriage returns,\nnew lines, and carriage return with new lines and cover most versions\nof line endings.\n\n\n### [1.4 Counting Words](https://archive.org/details/softwaretoolsinp00kern/page/14/mode/1up)\n\n~~~\n\nPROGRAM\n\n  wordcount count words in input\n\nUSAGE\n\n  wordcount\n\nFUNCTION\n\n  wordcount counts the words in its input and write the total as a\n  line of text to the output. A \"word\" is a maximal sequence of characters\n  not containing a blank or tab or newline.\n\nEXAMPLE\n\n  wordcount\n  A single line of input.\n  <ENDFILE>\n  5\n\nBUGS\n\n  The definition of \"word\" is simplistic.\n\n~~~\n\n[Page 17](https://archive.org/details/softwaretoolsinp00kern/page/17/mode/1up)\nbrings us to the **wordcount** program. Counting words can be\nvery nuanced but here K & P have chosen a simple definition\nwhich most of the time is \"good enough\" for languages like English.\nA word is defined simply as an run of characters separated by\na space, tab or newline characters.  In practice most documents\nwill work with this minimal definition. It also makes the code\nstraight forward.  This is a good example of taking the simple\nroad if you can. It keeps this program short and sweet.\n\nIf you follow along in the K & P book note their rational\nand choices in arriving at there solutions. There solutions\nwill often balance readability and clarity over machine efficiency.\nWhile the code has progressed from \"if then\" to \"if then else if\"\nlogical sequence, the solution's modeled remains\nclear. This means the person reading the source code can easily verify\nif the approach chosen was too simple to meet their needs or it was\n\"good enough\".\n\nMy Oberon-07 implementation is again very simple. Like in previous programs\nI still have an outer check to see if the read worked (i.e. \"In.Done = TRUE\"),\notherwise the conditional logic is the same as the Pascal implementation.\n\n~~~\n\nMODULE WordCount;\nIMPORT In, Out;\n\nPROCEDURE WordCount;\nCONST\n  NEWLINE = 10;\n  BLANK = 32;\n  TAB = 9;\n\nVAR\n  nw : INTEGER;\n  c : CHAR;\n  inword : BOOLEAN;\nBEGIN\n  nw := 0;\n  inword := FALSE;\n  REPEAT\n    In.Char(c);\n    IF In.Done THEN\n      IF ((ORD(c) = BLANK) OR (ORD(c) = NEWLINE) OR (ORD(c) = TAB)) THEN\n        inword := FALSE;\n      ELSIF (inword = FALSE) THEN\n        inword := TRUE;\n        nw := nw + 1;\n      END;\n    END;\n  UNTIL In.Done # TRUE;\n  Out.Int(nw, 1);\n  Out.Ln();\nEND WordCount;\n\nBEGIN\n  WordCount();\nEND WordCount.\n\n~~~\n\n## [1.5 Removing Tabs](https://archive.org/details/softwaretoolsinp00kern/page/20/mode/1up)\n\n~~~\n\nPROGRAM\n\n  detab convert tabs into blanks\n\nUSAGE\n\n  detab\n\nFUNCTION\n\n  detab copies its input to its output, expanding the horizontal\n  tabs to blanks along the way, so that the output is visually\n  the same as the input, but contains no tab characters. Tab stops\n  are assumed to be set every four columns (i.e. 1, 5, 9, ...), so\n  each tab character is replaced by from one to four blanks.\n\nEXAMPLE\n\n  Usaing \"->\" as a visible tab:\n\n  detab\n  ->col 1->2->34->rest\n      col 1   2   34  rest\n\nBUGS\n\n  detab is naive about backspaces, vertical motions, and\n  non-printing characters.\n\n~~~\n\nThe source code for \"detab\" can be found on\n[page 24](https://archive.org/details/softwaretoolsinp00kern/page/24/mode/1up)\nin the last section of chapter 1. **detab** removes\ntabs and replaces them with spaces. Rather than a simple \"tab\"\nreplaced with four spaces **detab** preserves a concept found on\ntypewriters called \"tab stops\". In 1981 typewrites were still widely\nused though word processing software would become common. Supporting the\n\"tab stop\" model means the program works with what office workers would\nexpect from older tools like the typewriter or even the computer's\nteletype machine. I think this shows an important aspect of writing\nprograms. Write the program for people, support existing common concepts\nthey will likely know.\n\nK & P implementation includes separate source files\nfor setting tab stops and checking a tab stop.  The Pascal K & P\nwrote for didn't support separate source files or program modules. Recent Pascal\nversions did support the concept of modularization (e.g. UCSD Pascal). Since\nand significant goal of K & P was portability they needed to come up\nwith a solution that worked on the \"standard\" Pascal compilers available on\nminicomputers and mainframes and not write their solution to a specific\nPascal system like UCSD Pascal (see Appendix, \"IMPLEMENTATION\nPRIMITIVES [page 315](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/315/mode/1up)).\nModularization facilitates code reuse and like information hiding is an\nimport software technique. Unfortunately the preprocessor approach doesn't\nsupport information hiding.\n\nTo facilitate code reuse the K & P book includes a preprocessor as part\nof the Pascal development tools (see [page 71](https://archive.org/stream/softwaretoolsinp00kern?ref=ol#page/71/mode/1up)\nfor implementation). The preprocessor written\nin Pascal was based on the early versions of the \"C\" preprocessor\nthey had available in the early UNIX systems. Not terribly Pascal\nlike but it worked and allowed the two files to be shared between\nthis program and one in the next chapter.\n\nOberon-07 of course benefits from all of Wirth's language improvements\nthat came after Pascal. Oberon-07 supports modules and as such\nthere is no need for a preprocessor.  Because of Oberon-07's module\nsupport I've implemented the Oberon version using two files\nrather than three. My main program file is \"Detab.Mod\",\nthe supporting library module is \"Tabs.Mod\". \"Tabs\" is where I\ndefine our tab stop data structure as well as the\nprocedures that operating on that data structure.\n\nLet's look at the first part, \"Detab.Mod\". This is the module\nthat forms the program and it features an module level \"BEGIN/END\" block.\nIn that block I call \"Detab();\" which implements the program's functionality.\nI import \"In\", \"Out\" as before but I also import \"Tabs\" which I will show next.\nLike my previous examples I validate the read was successful before proceeding\nwith the logic presented in the original Pascal and deciding\nwhat to write to standard output.\n\n~~~\n\nMODULE Detab;\n  IMPORT In, Out, Tabs;\n\nCONST\n  NEWLINE = 10;\n  TAB = 9;\n  BLANK = 32;\n\nPROCEDURE Detab;\nVAR\n  c : CHAR;\n  col : INTEGER;\n  tabstops : Tabs.TabType;\nBEGIN\n  Tabs.SetTabs(tabstops); (* set initial tab stops *)\n  col := 1;\n  REPEAT\n    In.Char(c);\n    IF In.Done THEN\n      IF (ORD(c) = TAB) THEN\n        REPEAT\n          Out.Char(CHR(BLANK));\n          col := col + 1;\n        UNTIL Tabs.TabPos(col, tabstops);\n      ELSIF (ORD(c) = NEWLINE) THEN\n        Out.Char(c);\n        col := 1;\n      ELSE\n        Out.Char(c);\n        col := col + 1;\n      END;\n    END;\n  UNTIL In.Done # TRUE;\nEND Detab;\n\nBEGIN\n  Detab();\nEND Detab.\n\n~~~\n\nOur second module is \"Tabs.Mod\". It provides the supporting procedures\nand definition of the our \"TabType\" data structure. For us this\nis the first time we write a module which \"exports\" procedures\nand type definitions. If you are new to Oberon, expected constants,\nvariables and procedures names have a trailing \"*\". Otherwise the\nOberon compiler will assume a local use only. This is a very\npowerful information hiding capability and what allows you to\nevolve a modules' internal implementation independently of the\nprograms that rely on it.\n\n~~~\n\nMODULE Tabs;\n\nCONST\n  MAXLINE = 1000; (* or whatever *)\n\nTYPE\n  TabType* = ARRAY MAXLINE OF BOOLEAN;\n\n(* TabPos -- return TRUE if col is a tab stop *)\nPROCEDURE TabPos*(col : INTEGER; VAR tabstops : TabType) : BOOLEAN;\n  VAR res : BOOLEAN;\nBEGIN\n  res := FALSE; (* Initialize our internal default return value *)\n  IF (col >= MAXLINE) THEN\n    res := TRUE;\n  ELSE\n    res := tabstops[col];\n  END;\n  RETURN res\nEND TabPos;\n\n(* SetTabs -- set initial tab stops *)\nPROCEDURE SetTabs*(VAR tabstops: TabType);\nCONST\n  TABSPACE = 4; (* 4 spaces per tab *)\nVAR\n  i : INTEGER;\nBEGIN\n  (* NOTE: Arrays in Oberon start at zero, we want to\n     stop at the last cell *)\n  FOR i := 0 TO (MAXLINE - 1) DO\n    tabstops[i] := ((i MOD TABSPACE) = 0);\n  END;\nEND SetTabs;\n\nEND Tabs.\n\n~~~\n\nNOTE: This module is used by \"Detab.Mod\" and \"Entab.Mod\"\nand provides for common type definitions and code reuse.\nWe exported `TabType`, `TabPos` and `SetTabs`. Everything else\nis private to this module.\n\n## In closing\n\nThis post briefly highlighted ports of the programs\npresented in Chapter 1 of \"Software Tools in Pascal\".\nBelow are links to my source files of the my\nimplementations inspired by the K & P book. Included\nin each Oberon module source after the module definition\nis transcribed text of the program documentation as well\nas transcribed text of the K & P Pascal implementations.\nEach file should compiler without modification using the\nOBNC compiler.  By default the OBNC compiler will use the\nmodule's name as the name of the executable version. I\nI have used mixed case module names, if you prefer lower\ncase executable names use the \"-o\" option with the OBNC\ncompiler.\n\n~~~\n\n    obnc -o copy CopyProg.Mod\n    obnc -o charcount CharCount.Mod\n    obnc -o linecount LineCount.Mod\n    obnc -o wordcount WordCount.Mod\n    obnc -o detab Detab.Mod\n\n~~~\n\nIf you happen to be using The [Oxford Oberon Compiler](http://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler)\nyou need to rename the files ending in \".Mod\" to \".m\" \nand you can compiler with the following command.\n\n~~~\n    obc -07 -o copyprog CopyProg.m\n    obc -07 -o charcount CharCount.m\n    obc -07 -o linecount LineCount.m\n    obc -07 -o wordcount WordCount.m\n    obc -07 -o detab Tabs.m Detab.m\n~~~\n\nNote the line for compiling \"Detab\" with **obc**, your\nlocal modules need to become before the module calling them.\n\n\n+ [CopyProg](CopyProg.Mod)\n+ [CharCount](CharCount.Mod)\n+ [LineCount](LineCount.Mod)\n+ [WordCount](WordCount.Mod)\n+ [Detab](Detab.Mod)\n    + [Tabs](Tabs.Mod), this one we'll revisit in next installment.\n\n\n# Next\n\n+ [Filters](../../10/31/Filters.html)\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-09-29",
        "keywords": [
          "Oberon",
          "Pascal",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 1,
        "series": "Software Tools",
        "title": "Software Tools, Getting Started"
      },
      "url": "posts/2020/09/29/Software-Tools-1.json"
    },
    {
      "content": "\n\n# Portable Oberon-07\n\n## using OBNC modules\n\nThis is the eleventh post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.\nMostly Oberon documents my exploration of the Oberon Language, Oberon System and the\nvarious rabbit holes I will inevitably fall into.\n\n## Working with standard input\n\nBy R. S. Doiel, 2020-08-15 (updated: 2020-09-05)\n\nKarl Landström's [OBNC](https://miasap.se/obnc/), Oberon-07 compiler,\ncomes with an Oberon-2 inspired set of modules\ndescribed in the Oakwood Guidelines as well as\nseveral very useful additions making Oberon-07 suitable for\nwriting programs in a POSIX environment.  We're going to\nexplore three of the Oakwood modules and two of Karl's own additions\nin this post as we create a program called [SlowCat](SlowCat.Mod).\nI am using the term \"portable\" to mean the code can be compiled\nusing OBNC on macOS, Linux, and Raspberry Pi OS and Windows 10\n(i.e. wherever OBNC is available). The Oakwood Guideline modules\nfocus on portability between an Oberon System and other systems.\nI'll leave that discussion along with\n[POW!](http://www.fim.uni-linz.ac.at/pow/pow.htm)\nto the end of this post.\n\n\n### SlowCat\n\nRecently while I was reviewing logs at work using [cat](https://en.wikipedia.org/wiki/Cat_(Unix)), [grep](https://en.wikipedia.org/wiki/Grep)\nand [more](https://en.wikipedia.org/wiki/More_(command)) it\nstruck me that it would have been nice if **cat**\nor **more** came with a time delay so you could use them like a\nteleprompter. This would let you casually watch the file scroll\nby while still being able to read the lines. The program we'll build\nin this post is \"SlowCat\" which accepts a command line parameter\nindicating the delay in seconds between display each line read from\nstandard input.\n\n## Working with Standard Input and Output\n\nThe Oakwood guides for Oberon-2 describe two modules\nparticularly useful for working with standard input and output.\nThey are appropriately called `In` and `Out`. On many Oberon Systems\nthese have been implemented such that your code could run under Unix\nor Oberon System with a simple re-compile.  We've used `Out` in our\nfirst program of this series, \"Hello World\". It provides a means to\nwrite Oberon system base types to standard out.  We've used `In`\na few times too. But `In` is worth diving into a bit more.\n\n### In\n\nThe [In](http://miasap.se/obnc/obncdoc/basic/In.def.html) module provides\na mirror of inputs to those of [Out](http://miasap.se/obnc/obncdoc/basic/Out.def.html). In Karl's implementation we are interested in one procedure\nand module status variable.\n\n+ `In.Line(VAR line: ARRAY OF CHAR)` : Read a sequence of characters from standard input from the current position in the file to the end of line.\n+ `In.Done` : Is a status Boolean variable, if the last call to an procedure in `In` was successful then it is set TRUE, otherwise FALSE (e.g. we're at the end of a file)\n\nWe use Karl's `In.Line()` extension to the standard `In` implementation\nbefore and will do so again as it simplifies our code and keeps things\neasily readable.\n\nThere is one nuance with `In.Done` that is easy to get tripped up on.\n`In.Done` indicates if the last operation was successful.\nSo if you're using `In.Line()` then `In.Done`\nshould be true if reading the line was successful. If you hit the end of\nthe file then `In.Done` should be false.  When you write your loop\nthis can be counter intuitive.  Here is a example of testing `In.Done`\nwith a repeat until loop.\n\n\n~~~\n\n    REPEAT\n      In.Line(text);\n      IF In.Done THEN\n        Out.String(text);Out.Ln();\n      END;\n    UNTIL In.Done = FALSE;\n\n~~~\n\n\nSo when you read this it is easy to think of `In.Done` as you're\ndone reading from standard input but actually we need to check for `FALSE`.\nThe value of `In.Done` was indicating the success of reading our line.\nAn unsuccessful line read, meaning we're at the end of the file, sets\n`In.Done` to false!\n\n### Out\n\nAs mention `Out` provides our output functions. We'll be using\ntwo procedure from `Out`, namely `Out.String()` and `Out.Ln()`.\nWe've seen both before.\n\n### Input\n\n\"SlowCat\" needs to calculate how often to write a line of\ntext to standard output with the `Out` module.  To do that\nI need access to the system's current time.  There isn't an\nOakwood module for time. There is a module called \n`Input` which provides a \"Time\" procedure. As a result\nI need to import `Input` as well as `In` even though\nI am using `In` to manage reading the file I am processing\nwith \"SlowCat\".\n\nA note about Karl's implementation.  `Input` is an Oakwood\nmodule that provides access to three system resources -- \nmouse, keyboard and system time.  Karl \nprovides two versions `Input` and `Input0`, the first is\nintended to be used with the `XYPlane` module for graphical\napplications the second for POSIX shell based application.\nIn the case of \"SlowCat\" I've stuck with `Input` as I am \nonly accessing time I've stuck with `Input` to make my source\ncode more portable if you're using another Oberon compiler.\n\n## Working with Karl's extensions\n\nThis is the part of my code which is not portable\nbetween compiler implementations and with Oberon Systems.\nKarl provides a number of extension module wrapping various\nPOSIX calls.  We are going to use two,\n[extArgs](http://miasap.se/obnc/obncdoc/ext/extArgs.def.html)\nwhich provides access to command line arguments and\n[extConvert](http://miasap.se/obnc/obncdoc/ext/extConvert.def.html)\nwhich provides a means of converting strings to integers.\nIf you are using another Oberon compiler you'll need to \nfind their equivalents and change my code example. I\nuse `extArgs` to access the command line parameters\nincluded in my POSIX shell invocation and I've used\n`extConvert` to convert the string presentation of the\ndelay to an integer value for my delay.\n\n\n## Our Approach\n\nTo create \"SlowCat\" we need four procedures and one\nglobal variable.\n\n`Usage()`\n: display a help text if parameters don't make sense\n\n`ProcessArgs()`\n: to get our delay time from the command line\n\n`Delay(count : INTEGER)`\n: a busy wait procedure\n\n`SlowCat(count : INTEGER)`\n: take standard input and display like a teleprompter\n\n`count`\n: is an integer holding our delay value (seconds of waiting) which is set by ProcessArgs()\n\n### Usage\n\nUsage just wraps helpful text and display it to standard out.\n\n## ProcessArgs()\n\nThis a functional procedure. It uses two of Karl's extension\nmodules. It uses `extArgs` to retrieve the command line parameters\nand `extConvert` the string value retrieved into an integer.\n`ProcessArgs()` returns TRUE if we can successful convert the\ncommand line parameter and set the value of count otherwise return\nFALSE.\n\n## Delay(VAR count : INTEGER)\n\nThis procedure uses `Input0` to fetch the current epoch time\nand counts the number of seconds until we've reached our delay\nvalue. It's a busy loop which isn't ideal but does keep the\nprogram simple.\n\n## SlowCat(VAR count: INTEGER);\n\nThis is the heart of our command line program. It reads\na line of text from standard input, if successful writes it\nto standard out and then waits using delay before repeating\nthis process. The delay is only invoked when a reading a\nline was successful.\n\n## Putting it all together\n\nHere's a \"SlowCat\" program.\n\n\n~~~\n\n    MODULE SlowCat;\n      IMPORT In, Out, Input, Args := extArgs, Convert := extConvert;\n\n    CONST\n      MAXLINE = 1024;\n\n    VAR\n      count: INTEGER;\n\n    PROCEDURE Usage();\n    BEGIN\n      Out.String(\"USAGE:\");Out.Ln();\n      Out.Ln();\n      Out.String(\"SlowCat outputs lines of text delayed by\");Out.Ln();\n      Out.String(\"a number of seconds. It takes one parameter,\");Out.Ln();\n      Out.String(\"an integer, which is the number of seconds to\");Out.Ln();\n      Out.String(\"delay a line of output.\");Out.Ln();\n      Out.String(\"SlowCat works on standard input and output.\");Out.Ln();\n      Out.Ln();\n      Out.String(\"EXAMPLE:\");\n      Out.Ln();\n      Out.String(\"    SlowCat 15 < README.md\");Out.Ln();\n      Out.Ln();\n    END Usage;\n\n    PROCEDURE ProcessArgs() : BOOLEAN;\n      VAR i : INTEGER; ok : BOOLEAN; arg : ARRAY MAXLINE OF CHAR;\n          res : BOOLEAN;\n    BEGIN\n      res := FALSE;\n      IF Args.count = 1 THEN\n        Args.Get(0, arg, i);\n        Convert.StringToInt(arg, i, ok);\n        IF ok THEN\n           (* convert seconds to microseconds of clock *)\n           count := (i * 1000);\n           res := TRUE;\n        END;\n      END;\n      RETURN res\n    END ProcessArgs;\n\n    PROCEDURE Delay*(count : INTEGER);\n      VAR start, current, delay : INTEGER;\n    BEGIN\n       start := Input.Time();\n       REPEAT\n         current := Input.Time();\n         delay := (current - start);\n       UNTIL delay >= count;\n    END Delay;\n\n    PROCEDURE SlowCat(count : INTEGER);\n      VAR text : ARRAY MAXLINE OF CHAR;\n    BEGIN\n      REPEAT\n        In.Line(text);\n        IF In.Done THEN\n          Out.String(text);Out.Ln();\n          (* Delay by count *)\n          Delay(count);\n        END;\n      UNTIL In.Done = FALSE;\n    END SlowCat;\n\n    BEGIN\n      count := 0;\n      IF ProcessArgs() THEN\n        SlowCat(count);\n      ELSE\n        Usage();\n      END;\n    END SlowCat.\n\n~~~\n\n\n## Compiling and trying it out\n\nTo compile our program and try it out reading\nour source code do the following.\n\n\n~~~\n\n    obnc SlowCat.Mod\n    # If successful\n    ./SlowCat 2 < SlowCat.Mod\n\n~~~\n\n\n\n## Oakwood Guidelines and POW!\n\nOberon and Oberon-2 were both used in creating and enhancing the\nOberon System(s) as well as for writing programs on other operating\nsystems (e.g. Apple's Mac and Microsoft Windows).\nImplementing Oberon compilers on non Oberon Systems required clarification\nbeyond the specification. The Oakwood Guidelines were an agreement\nbetween some of the important Oberon-2 compiler implementers which\nattempted to fill in that gap while encouraging portability in\nsource code between operating systems. Portability was desirable\nbecause it allowed programmers (e.g. students) to compile\nand run their Oberon programs with minimal modification in any\nenvironment where an Oakwood compliant compiler was available.\n\nCitation for Oakwood can be found in [Oberon-2 Programming with Windows](https://archive.org/details/oberonprogrammin00mhlb/page/n363/mode/2up?q=Oakwood+Guidlines).\n\n> Kirk B.(ed): The Oakwood Guidelines for Oberon-2 Compiler Developers. Available via FTP from ftp.fim.uni-linz.ac.at, /pub/soft/pow-oberon/oakwood\n\nThe FTP machine doesn't exist any more and does not appear to have been included in JKU's preservation plans. Fortunately the POW! website has been preserved.\n\n[POW!](http://www.fim.uni-linz.ac.at/pow/pow.htm) was a\ndifferent approach. It was a compiler and IDE targeting\nother than Oberon Systems (e.g. Windows and later Java). It was\nintended to be used in a hybrid development environment and to\nfacilitate leveraging non-Oberon resources (e.g. Java classes,\nnative Windows API).  POW project proposed \"Opal\" which was a\nsuper set of modules that went beyond Oakwood. Having skimmed\n\"Oberon-2 Programming with Windows\" some may seem reasonable to\nport to Oberon-07, others less so.\n\nWhy Oakwood and POW? These efforts are of interest to Oberon-07\ndevelopers as a well worn path to write code that is easy to\ncompile on POSIX systems and on systems that are based on the\nmore recent [Project Oberon 2013](http://www.projectoberon.com/).\nIt enhances the opportunity to bring forward well written modules\nfrom prior systems like [A2](https://en.wikibooks.org/wiki/Oberon/A2)\nbut implemented for the next generation of Oberon Systems\nlike [Integrated Oberon](https://github.com/io-core/io).\n\n### Oakwood PDF\n\nFinding a PDF of the original Oakwood guidelines is going to become\ntricky in the future. It was created by Robinson Associates and the\ncopy I've read from 1995 includes a page saying not for distribution.\nWhich sorta makes sense in the era of closed source software\ndevelopment. It is problematic for those of us who want to explore\nhow systems evolved.  The term \"Oakwood Guidelines\" is bandied about\nafter 1993 and several of the modules have had influence on the language\nuse via book publications.  I was able to find a PDF of the 1995\nversion of the guidelines at\n[http://www.math.bas.bg/bantchev/place/oberon/oakwood-guidelines.pdf](http://www.math.bas.bg/bantchev/place/oberon/oakwood-guidelines.pdf).\n\nHere's a typical explanation of Oakwood from \n[http://www.edm2.com/index.php/The_Oakwood_Guidelines_for_Oberon-2_Compiler_Developers#The_Oakwood_Guidelines](http://www.edm2.com/index.php/The_Oakwood_Guidelines_for_Oberon-2_Compiler_Developers#The_Oakwood_Guidelines)\nfor a description of Oakwood.\n\n> __The Oakwood Guidelines for the Oberon-2 Compiler Developers /These guidelines have been produced by a group of Oberon-2 compiler developers, including ETH developers, after a meeting at the Oakwood Hotel in Croydon, UK in June 1993__\n\n[http://www.edm2.com/index.php/The_Oakwood_Guidelines_for_Oberon-2_Compiler_Developers#The_Oakwood_Guidelines](http://www.edm2.com/index.php/The_Oakwood_Guidelines_for_Oberon-2_Compiler_Developers#The_Oakwood_Guidelines)  \n(an OS/2 developer website) was helpful for providing details about Oakwood.\n\nIt would have been nice if the Oakwood document had made its way\ninto either ETH's or JKU's research libraries.\n\nLeveraging prior art opens doors to the past and future. Karl has\ndone with this with the modules he provides with his OBNC compiler\nproject.\n\n### Next and Previous\n\n+ Next [Oberon to Markdown](../../10/03/Oberon-to-markdown.html)\n+ Previous [Procedures in records](../..//07/07/Procedures-in-records.html)\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-08-15",
        "keywords": [
          "Oberon",
          "portable",
          "stdin"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 11,
        "series": "Mostly Oberon",
        "title": "Portable Oberon-07"
      },
      "url": "posts/2020/08/15/Portable-Oberon-07.json"
    },
    {
      "content": "\n\n# Procedures as parameters\n\nBy R. S. Doiel, 2020-06-20\n\nThis is the ninth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.\nMostly Oberon documents my exploration of the Oberon Language, Oberon System and the \nvarious rabbit holes I will inevitably fall into.\n\nOberon-07 supports the passing of procedures as parameters in a procedure. \nLet's create a module name [Noises.Mod](Noises.Mod) to explore this.\n\nThe key to supporting this is Oberon's type system.  We need to decide what our \ngeneric procedure will look like first. In our case our procedures that will display \nan animal noise will include the name of the animal speaking.  We'll call this type \nof procedure \"Noise\". It'll accept an ARRAY OF CHAR for the name as a parameter \nthen use the standard Out module to display the animal name and noise they make.\n\n\n~~~\n\n    TYPE\n      Noise = PROCEDURE (who : ARRAY OF CHAR);\n\n~~~\n\n\nThe two \"Noise\" procedures will be \"BarkBark\" and \"ChirpChirp\". They will\nimplement the same parameter signature as describe in the \"Noise\" type.\n\n\n~~~\n\n    PROCEDURE BarkBark(who : ARRAY OF CHAR);\n    BEGIN\n      Out.String(who);\n      Out.String(\": Bark, bark\");Out.Ln();\n    END BarkBark;\n\n    PROCEDURE ChirpChirp(who : ARRAY OF CHAR);\n    BEGIN\n      Out.String(who);\n      Out.String(\": Chirp, chirp\");Out.Ln();\n    END ChirpChirp;\n\n~~~\n\n\nWe'll also create a procedure, MakeNoise, that accepts the animal name and\nour \"Noise\" procedure name and it'll call the \"Noise\" type procedure \npassing in the animal name.\n\n\n~~~\n\n    PROCEDURE MakeNoise(name : ARRAY OF CHAR; noise : Noise);\n    BEGIN\n      (* Call noise with the animal name *)\n      noise(name);\n    END MakeNoise;\n\n~~~\n\n\nIf we invoke MakeNoise with our animal name and pass the name of the \nprocedure we want to do the MakeNoise procedure will generate our\nnoise output. Here' is what is looks like all together.\n\n\n~~~\n\n    MODULE Noises;\n      IMPORT Out;\n    \n    TYPE \n      Noise = PROCEDURE(who : ARRAY OF CHAR);\n    \n    PROCEDURE BarkBark(who : ARRAY OF CHAR);\n    BEGIN\n      Out.String(who);\n      Out.String(\": Bark, bark\");Out.Ln();\n    END BarkBark;\n    \n    PROCEDURE ChirpChirp(who : ARRAY OF CHAR);\n    BEGIN\n      Out.String(who);\n      Out.String(\": Chirp, chirp\");Out.Ln();\n    END ChirpChirp;\n    \n    PROCEDURE MakeNoise(name : ARRAY OF CHAR; noise : Noise);\n    BEGIN\n      (* Call noise with the animal name *)\n      noise(name);\n    END MakeNoise;\n    \n    BEGIN\n      MakeNoise(\"Fido\", BarkBark);\n      MakeNoise(\"Tweety\", ChirpChirp);\n      MakeNoise(\"Fido\", ChirpChirp);\n      MakeNoise(\"Tweety\", BarkBark);\n    END Noises.\n\n~~~\n\n\nNote when we pass the procedures we include their name **without** parenthesis.\nOur type definition tells the compiler that the procedure can be a parameter,\nany procedure with the same signature, e.g. `who : ARRAY OF CHAR` as the\nonly parameter will be treated as a \"Noise\" type procedures. \n\n### Next and Previous \n\n+ Next [Procedures in Records](../../07/07/Procedures-in-records.html)\n+ Previous [Dynamic types](../../05/25/Dynamic-types.html) \n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-06-20",
        "keywords": [
          "Oberon",
          "procedures",
          "passing procedures as parameters",
          "programming"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 9,
        "series": "Mostly Oberon",
        "title": "Procedures as parameters"
      },
      "url": "posts/2020/06/20/Procedures-as-parameters.json"
    },
    {
      "content": "\n\nSetting up a RetroFlag GPi Case\n===============================\n\nBy R. S. Doiel, 2020-12-24\n\nThese are my notes for setting up a RetroFlag GPi case using Recalbox\ndistribution for retro gaming.\n\n+ RetroFlag GPi Case Kit (including a Raspberry Pi Zero W and blank SD Card)\n+ A computer to setup the SD Card  and the Raspberry Pi Imager v1.5\n\nWe will be installing [Recalbox](https://www.recalbox.com/ \"the all-in-one retro gaming console\")\nv7.7.x for Raspberry Pi Zero W and GPi case.  Recalbox which is a Retro\nGaming Linux distribution.\n\nSteps\n=====\n\nPreparing the 32 GiB SD Card\n---------------------------\n\n1. Download the appropriate Raspberry Pi Imager 1.5 from \n   https://www.raspberrypi.org/software/ for your system\n2. Install and launch the Raspberry Pi Imager\n3. Click \"Operating System\"\n  a. Select \"Emulation and game OS\"\n  b. Select \"Recalbox\"\n  c. Select \"Recalbox 7.1.1-Reloaded (Pi 0/1/GPi Case)\"\n4. Click \"SD Card\" \", then select the bank 32 GiB SD Card\n5. Click \"Write\"\n6. You will be asked remove the SD Card when done, do so and and exit \n   Raspberry Pi Imager\n\nNOTE: The current release of Recalbox (7.7.1) doesn't require patching\nwith \"GPI_Case_patch.zip\" or installing the shutdown scripts as suggested\non the RetroFlag website. Applying the patches will prevent the GPi\nfrom booting. The website instructions appear to be for an earlier release\nof Recalbox.\n\n\nInstalling the Raspberry Pi Zero W in the GPi Case\n--------------------------------------------------\n\nThe RetroFlag comes with instructions to install the Raspberry Pi Zero W\nin the case. I found the pictorial instructions confusing. Doing a search\nfor \"RetroFlag GPi Case Setup\" yielded a link to [Howchoo's YouTube\nvideo](https://www.youtube.com/watch?v=NyJUlNifN1I&feature=youtu.be \"RetroFlag GPi CASE Setup and Usage\"),  This video also talks about setting up Retro Pi software,\nGPi case patches. Skip these. The instructions are now for software that\nis out of date (the video dates back to 2019). \n\nNOTE: Howchoo describes installing RetroPie not Recalbox. Don't install a\n\"wpa_supplicant.conf\" file or \"ssh\" file on the SD Card as suggested.\nIt is not needed and will cause problems.\n\nThe GPi case looks very much like a Game Boy. It includes a \"Game Pack\"\ntype module which will hold our Raspberry Pi once installed. I found the\nassembly instructions confusing but searching YouTube for \"RetroFlag GPi\nCase Setup\" listed several videos which describe the process of putting\nthe case together as well as how to install RetroPie or\nRecalbox Linux Distributions.\n\nBooting the Pi Zero W with the SD Card\n--------------------------------------\n\n1. Make sure the GPi Zero Case **IS NOT CONNECTED TO POWER**\n  a. the switch the case off\n  b. Disconnect the barrel to USB cable from a power source\n2. Remove the \"game pack\" element where you've installed the Raspberry Pi Zero W\n3. Insert the SD Card into the SD Card slot under the soft cover on the side of\n   the Game Pack case\n4. Re-insert \"Game Pack\" into side of the GPi case\n5. Plug the barrel USB cable into a USB Power supply , \n6. Turn the power switch to \"ON\" on the top of the GPi case\n7. Wait patiently, it's going to take several minutes to boot the first time\n\n\n\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2020-12-24",
        "keywords": [
          "raspberry pi",
          "retro games",
          "case"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "RetroFlag GPi Case Setup"
      },
      "url": "posts/2020/12/24/gpi-case-setup.json"
    },
    {
      "content": "\n\n# Accessing Go from Julia\n\nBy R. S. Doiel, 2018-03-11\n\nThe problem: I've started exploring Julia and I would like to leverage existing\ncode I've written in Go. Essentially this is a revisit to the problem in my\nlast post [Go based Python Modules](https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.html) \nbut with the language pairing of Go and Julia.\n\n\n## Example 1, libtwice.go, libtwice.jl and libtwice_test.jl\n\nIn out first example we send an integer value from\nJulia to Go and back via a C shared library (written in Go). While Julia doesn't\nrequire type declarations I will be using those for clarity. Like in my previous post\nI think this implementation this is a good starting point to see how Julia interacts with\nC shared libraries. Like before I will present our Go code, an explanation \nfollowed by the Julia code and commentary.\n\nOn the Go side we create a _libtwice.go_ file with an empty `main()` \nfunction.  Notice that we also import the *C* package and use \na comment decoration to indicate the function we are exporting\n(see https://github.com/golang/go/wiki/cgo and \nhttps://golang.org/cmd/cgo/\nfor full story about Go's _C_ package and _cgo_).\nPart of the what _cgo_ and the *C* package does is use the \ncomment decoration to build the signatures for the function calls\nin the shared C library.  The Go toolchain does all the heavy \nlifting in making a *C* shared library based on comment \ndirectives like \"//export\". We don't need much for our twice\nfunction.\n\n```Go\n    package main\n    \n    import (\n    \t\"C\"\n    )\n    \n    //export twice\n    func twice(i int) int {\n    \treturn i * 2\n    }\n    \n    func main() {}\n```\n\nLike in our previous Python implementation we need to build the C shared\nlibrary before using it from Julia. Here are some example Go build commands\nfor Linux, Windows and Mac OS X. You only need to run the one that applies\nto your operating system.\n\n```shell\n    go build -buildmode=c-shared -o libtwice.so libtwice.go\n    go build -buildmode=c-shared -o libtwice.dll libtwice.go\n    go build -buildmode=c-shared -o libtwice.dynlib libtwice.go\n```\n\nUnlike the Python implementation our Julia code will be split into two files. _libtwice.jl_ will\nhold our module definition and _libtwice_test.jl_ will hold our test code. In the\ncase of _libtwice.jl_ we will access the C exported function via a function named *ccall*. \nJulia doesn't require a separate module to be imported in order to access a C shared library.\nThat makes our module much simpler. We still need to be mindful of type conversion.  Both \nGo and Julia provide for rich data types and structs.  But between Go and Julia we have C \nand C's basic type system.  On the Julia side *ccall* and Julia's type system help us\nmanaging C's limitations.\n\nHere's the Julia module we'll call _libtwice.jl_.\n\n```Julia\n    module libtwice\n            \n    # We write our Julia idiomatic function\n    function twice(i::Integer)\n        ccall((:twice, \"./libtwice\"), Int32, (Int32,), i)\n    end\n\n    end\n```\n\nWe're will put the test code in a file named _libtwice\\_test.jl_. Since this isn't\nan establish \"Package\" in Julia we will use Julia's *include* statement to get bring the\ncode in then use an *import* statement to bring the module into our current name space.\n\n```Julia\n    include(\"libtwice.jl\")\n    import libtwice\n    # We run this test code for libtwice.jl\n    println(\"Twice of 2 is \", libtwice.twice(2))\n```\n\nOur test code can be run with\n\n```shell\n    julia libtwice_test.jl\n```\n\nNotice the amount of lifting that Julia's *ccall* does. The Julia code is much more compact\nas a result of not having to map values in a variable declaration. We still have the challenges \nthat Julia and Go both support richer types than C. In a practical case we should consider \nthe over head of running to two runtimes (Go's and Julia's) as well as whether or not \nimplementing as a shared library even makes sense. But if you want to leverage existing \nGo based code this approach can be useful.\n\nExample 1 is our base recipe. The next examples focus on handling\nother data types but follow the same pattern.\n\n\n## Example 2, libsayhi.go, libsayhi.jl and libsayhi_test.jl\n\nLike Python, passing strings passing to or from Julia and Go is nuanced. Go is expecting \nUTF-8 strings. Julia also supports UTF-8 but C still looks at strings as a pointer to an\naddress space that ends in a null value. Fortunately in Julia the *ccall* function combined with\nJulia's rich type system gives us straight forward ways to map those value. \nGo code remains unchanged from our Python example in the previous post. \nIn this example we use Go's *fmt* package to display the string. In the next example\nwe will round trip our string message.\n\n```go\n    package main\n    \n    import (\n    \t\"C\"\n    \t\"fmt\"\n    )\n    \n    //export say_hi\n    func say_hi(msg *C.char) {\n    \tfmt.Println(C.GoString(msg))\n    }\n    \n    func main() { }\n```\n\nThe Go source is the similar to our first recipe. No change from our\nprevious posts' Python example. It will need to be compiled to create our\nC shared library just as before. Run the go build line that applies to\nyour operating system (i.e., Linux, Windows and Mac OS X).\n\n```shell\n    go build -buildmode=c-shared -o libsayhi.so libsayhi.go\n    go build -buildmode=c-shared -o libsayhi.dll libsayhi.go\n    go build -buildmode=c-shared -o libsayhi.dylib libsayhi.go\n```\n\nOur Julia module looks like this.\n\n```julia\n    module libsayhi\n\n    # Now write our Julia idiomatic function using *ccall* to access the shared library\n    function say_hi(txt::AbstractString)\n        ccall((:say_hi, \"./libsayhi\"), Int32, (Cstring,), txt)\n    end\n\n    end\n```\n\nThis code is much more compact than our Python implementation.\n\nOur test code looks like\n\n```julia\n    include(\"./libsayhi.jl\")\n    import libsayhi\n    libsayhi.say_hi(\"Hello again!\")\n```\n\nWe run our tests with\n\n```shell\n    julia libsayhi_test.jl\n```\n\n\n## Example 3, libhelloworld.go and librhelloworld.cl and libhelloworld_test.jl\n\nIn this example we send a string round trip between Julia and Go. \nMost of the boiler plate we say in Python is gone due to Julia's type system. In\naddition to using Julia's *ccall* we'll add a *convert* and *bytestring* function calls\nto bring our __Cstring__ back to a __UTF8String__ in Julia.\n\nThe Go implementation remains unchanged from our previous Go/Python implementation. \nThe heavy lifting is done by the *C* package and the comment \n`//export`. We are using `C.GoString()` and `C.CString()` to flip between \nour native\nGo and C datatypes.\n\n```go\n    package main\n    \n    import (\n    \t\"C\"\n    \t\"fmt\"\n    )\n    \n    //export helloworld\n    func helloworld(name *C.char) *C.char {\n    \ttxt := fmt.Sprintf(\"Hello %s\", C.GoString(name))\n    \treturn C.CString(txt)\n    }\n    \n    func main() { }\n```\n\nAs always we must build our C shared library from the Go code. Below is\nthe go build commands for Linux, Windows and Mac OS X. Pick the line that\napplies to your operating system to build the C shared library.\n\n```shell\n    go build -buildmode=c-shared -o libhelloworld.so libhelloworld.go\n    go build -buildmode=c-shared -o libhelloworld.dll libhelloworld.go\n    go build -buildmode=c-shared -o libhelloworld.dylib libhelloworld.go\n```\n\nIn our Julia, _libhelloworld.jl_, the heavy lifting of type conversion\nhappens in Julia's type system and in the *ccall* function call. Additionally we need\nto handle the conversion from __Cstring__ Julian type to __UTF8String__ explicitly\nin our return value via a functions named *convert* and *bytestring*.\n\n```julia\n    module libhelloworld\n\n    # Now write our Julia idiomatic function\n    function helloworld(txt::AbstractString)\n        value = ccall((:helloworld, \"./libhelloworld\"), Cstring, (Cstring,), txt)\n        convert(UTF8String, bytestring(value))\n    end\n\n    end\n```\n\nOur test code looks similar to our Python test implementation.\n\n```julia\n    include(\"libhelloworld.jl\")\n    import libhelloworld\n \n    if length(ARGS) > 0\n        println(libhelloworld.helloworld(join(ARGS, \" \")))\n    else\n        println(libhelloworld.helloworld(\"World\"))\n    end\n```\n\nAs before we see the Julia code is much more compact than Python's.\n\n\n## Example 4, libjsonpretty.go, libjsonpretty.jl and libjsonpretty_test.jl\n\nIn this example we send JSON encode text to the Go package,\nunpack it in Go's runtime and repack it using the `MarshalIndent()`\nfunction in Go's JSON package before sending it back to Julia\nin C string form.  You'll see the same encode/decode patterns as \nin our *libhelloworld* example.\n\nGo code\n\n```go\n    package main\n    \n    import (\n    \t\"C\"\n    \t\"encoding/json\"\n    \t\"fmt\"\n    \t\"log\"\n    )\n    \n    //export jsonpretty\n    func jsonpretty(rawSrc *C.char) *C.char {\n    \tdata := new(map[string]interface{})\n    \terr := json.Unmarshal([]byte(C.GoString(rawSrc)), &data)\n    \tif err != nil {\n    \t\tlog.Printf(\"%s\", err)\n    \t\treturn C.CString(\"\")\n    \t}\n    \tsrc, err := json.MarshalIndent(data, \"\", \"    \")\n    \tif err != nil {\n    \t\tlog.Printf(\"%s\", err)\n    \t\treturn C.CString(\"\")\n    \t}\n    \ttxt := fmt.Sprintf(\"%s\", src)\n    \treturn C.CString(txt)\n    }\n    \n    func main() {}\n```\n\nBuild commands for Linux, Windows and Mac OS X are as before, pick the one that matches\nyour operating system.\n\n```shell\n    go build -buildmode=c-shared -o libjsonpretty.so libjsonpretty.go\n    go build -buildmode=c-shared -o libjsonpretty.dll libjsonpretty.go\n    go build -buildmode=c-shared -o libjsonpretty.dylib libjsonpretty.go\n```\n\nOur Julia module code\n\n```Julia\n    module libjsonpretty\n\n    # Now write our Julia idiomatic function\n    function jsonpretty(txt::AbstractString)\n        value = ccall((:jsonpretty, \"./libjsonpretty\"), Cstring, (Cstring,), txt)\n        convert(UTF8String, bytestring(value))\n    end\n    \n    end\n```\n\nOur Julia test code\n\n```Julia\n    include(\"./libjsonpretty.jl\")\n    import libjsonpretty\n\n    src = \"\"\"{\"name\":\"fred\",\"age\":25,\"height\":75,\"units\":\"inch\",\"weight\":\"239\"}\"\"\"\n    println(\"Our origin JSON src\", src)\n    value = libjsonpretty.jsonpretty(src)\n    println(\"And out pretty version\\n\", value)\n```\n\nAs before you can run your tests with `julia libjsonpretty_test.jl`.\n\nIn closing I would like to note that to use these examples I am assuming your\nJulia code is in the same directory as your shared C library. Julia, like Python3,\nhas a feature rich module and Package system. If you are creating a serious Julia\nproject then you need to be familiar with how Julia's package and module system works\nand place your code and shared libraries appropriately.\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2018, R. S. Doiel",
        "date": "2018-03-11",
        "keywords": [
          "Golang",
          "Julia",
          "shared libraries"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Accessing Go from Julia"
      },
      "url": "posts/2018/03/11/accessing-go-from-julia.json"
    }
  ]
}