{
  "page": 3,
  "total_pages": 5,
  "has_more": true,
  "next_page": "posts/all/page-4.json",
  "values": [
    {
      "content": "\nRosette Notes\n=============\n\nBy R. S. Doiel, 2022-08-19\n\n> A dance around two relational databases, piecing together similarities as with the tiny mosaic tiles of a guitar's rosette\n\nWhat follows are my preliminary notes learning Postgres 12 and 14.\n\nPostgres & MySQL\n----------------\n\nThis is a short comparison of some administrative commands I commonly use. The first column describes the task followed by the SQL to execute for Postgres 14.5 and then MySQL 8. The presumption is you're using `psql` to access Postgres and `mysql` to  access MySQL. Values between `<` and `>` should be replaced with an appropriate value.\n\n| Task                    | Postgres 14.5                     | MySQL 8           |\n|-------------------------|------------------------------------|-------------------|\n| show all databases      | `SELECT datname FROM pg_database;` | `SHOW DATABASES;` |\n| select a database       | `\\c <dbname>`                      | `USE <dbname>`    |\n| show tables in database | `\\dt`                              | `SHOW TABLES;`    |\n| show columns in table   | `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '<table_name>';` | `SHOW COLUMNS IN <table_name>` |\n\nReflections\n-----------\n\nThe Postgres shell, `psql`, provides the functionality of showing a list of tables via a short cut while MySQL choose to add the `SHOW TABLES` query. For me `SHOW ...` feels like SQL where as `\\d` or `\\dt` takes me out of SQL space. On the other hand given Postgres metadata structure the shortcut is appreciated and I often query for table names as I forget them. `\\dt` quickly becomes second nature and is shorter to type than `SHOW TABLES`. \n\nConnecting to a database with `\\c` in `psql` is like calling an \"open\" in programming language. The \"connection\" in `psql` is open until explicitly closed or the shell is terminated.  Like `USE ...` in the MySQL shell it make working with multiple database easy.  The difference are apparent when you execute a `DROP DATABASE ...` command. In `psql` you need to `CLOSE` the database first or the `DROP` will fail.  The MySQL shell will happily let you drop the current database you are currently using.\n\nThe challenge I've experienced learning `psql` after knowing MySQL is my lack of familiarity with the metadata Postgres maintains about databases and structures.  On the other hand everything I've learned about standards base SQL applies to managing Postgres once remember the database/table I need to work with.  A steeper learning curve from MySQL's `SHOW` but it also means writing external programs for managing Postgres databases and tables is far easier because everything is visible because that is how you manage Postgres. MySQL's `SHOW` is very convenient but at the cost of hiding some of its internal structures.\n\nBoth MySQL and Postgres support writing programs in SQL. They also support stored procedures, views and triggers. They've converged in the degree in which they have both implemented SQL language standards.  The differences are mostly in approach to managing databases.  There are some differences, necessitated by implementation choices, in the `CREATE DATABASE`, `CREATE TABLE` or `ALTER` statements but you can often use the basic form described in ANSI SQL and get the results you need. When doing performance tuning the dialect differences are more important.\n\nDump & Restore\n--------------\n\nBoth Postgres and MySQL provide command line programs for dumping a database. MySQL provides a single program where as Postgres splits it in two. Check the man pages (or website docs) for details in their options. Both sets of programs are highly configurable allowing you to dump just schema, just data or both with different expectations.\n\n| Postgres 14.5      | MySQL 8                         |\n|--------------------|---------------------------------|\n| `pg_dumpall`       | `mysqldump --all-databases`     |\n| `pg_dump <dbname>` | `mysqldump --database <dbname>` |\n\nThe `pg_dumpall` tool is designed to restore an entire database instance. It includes account and ownership information. `pg_dump` just focuses on the database itself. If you are taking a snapshot production data to use in a test `pg_dump` output is easier to work with. It captures the specific database with out entangling things like the `template1` database or database user accounts and ownership.\n\nYou can restore a database dump in both Postgres and MySQL. The tooling is a little different.\n\n| Postgres 14.5                   | MySQL 8                                      |\n|---------------------------------|----------------------------------------------|\n| `dropdb <dbname>`               | `mysql -execute 'DROP DATABASE <dbname>;'`   |\n| `createdb <dbname>`             | `mysql -execute 'CREATE DATABASE <dbname>;'` |\n| `psql -f <dump_filename>`       |`mysql <dbname> < <dump_filename>`            |\n\nNOTE: These instructions work for a database dumped with `pg_dump` for the Postgres example. In principle it is the same way you can restore from `pg_dumpall` but if you Postgres instance already exists then you're going to run into various problems, e.g. errors about `template1` db.\n\nLessons learned along the way\n-----------------------------\n\n2022-08-22\n\n8:00 - 11:30; SQL; Postgres; Three things have turned out to be challenges in the SQL I write, first back ticks is a MySQL-ism for literal quoting of table and column names, causes problems in Postgres. Second issue is \"REPLACE\" is a none standard extension I picked up from MySQL [it wraps a DELETE and INSERT together](https://dev.mysql.com/doc/refman/8.0/en/extensions-to-ansi.html), should be using UPDATE more than I have done in the past. The third is parameter replacement in SQL statement. This appears to be [db implementation specific](http://go-database-sql.org/prepared.html). I've used \"?\" with SQLite and MySQL but with Postgres I need to use \"$1\", \"$2\", etc. Challenging to write SQL once and have it work everywhere. Beginning to understand why GORM has traction.\n\n\n2022-08-24\n\n11:00 - 12:00; SQL; Postgres; I miss `SHOW TABLES` it's just muscle memory from MySQL, the SQL to show tables is `SELECT tablename FROM pg_catalog.pg_tables WHERE tablename NOT LIKE 'pg_%';`. I could write a SHOWTABLE in PL/pgSQL procedure implementing MySQL's \"SHOW TABLES\". Might be a good way to learn PL/pgSQL. I could then do one for MySQL and compare the PL/SQL language implementations.\n\n2022-08-26\n\n9:30 - 10:30; SQL; Postgres; If you are looking for instructions on installing Postgres 14 under Ubuntu 22.04 LTS I found DigitalOcean [How To Install PostgreSQL on Ubuntu 22.04 \\[Quickstart\\]](https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-22-04-quickstart), April 25, 2022 by Alex Garnett helpful.\n\n2022-09-19\n\n10:30 - 12:30; SQL; Postgres; Setting up postgres 14 on Ubuntu shell script, see [https://www.postgresql.org/download/linux/ubuntu/](https://www.postgresql.org/download/linux/ubuntu/), see [https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-22-04-quickstart](https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-22-04-quickstart) for setting up initial database and users\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "byline": "R. S. Doiel, 2022-08-19",
        "keywords": [
          "postgres",
          "mysql",
          "sql",
          "psql"
        ],
        "number": 2,
        "pubDate": "2022-08-19",
        "series": "SQL Reflections",
        "title": "Rosette Notes: Postgres and MySQL",
        "updated": "2022-09-19"
      },
      "url": "posts/2022/08/19/rosette-notes.json"
    },
    {
      "content": "\nPttk and STN\n============\n\nBy R. S. Doiel, started 2022-08-15\n(updated: 2022-09-26, pdtk was renamed pttk)\n\nThis log is a proof of concept in using [simple timesheet notation](https://rsdoiel.github.io/stngo/docs/stn.html) as a source for very short blog posts. The tooling is written in Golang (though eventually I hope to port it to Oberon-07).  The implementation combines two of my personal projects, [stngo](https://github.com/rsdoiel/stngo) and my experimental writing tool [pttk](https://github.com/rsdoiel/pttk). Updating the __pttk__ cli I added a function to the \"blogit\" action that will translates the simple timesheet notation (aka STN) to a short blog post.  My \"short post\" interest is a response to my limited writing time. What follows is the STN markup. See the [Markdown](https://raw.githubusercontent.com/rsdoiel/rsdoiel.github.io/main/blog/2022/08/15/golang-development.md) source for the unprocessed text.\n\n2022-08-15\n\n16:45 - 17:45; Golang; ptdk, stngo; Thinking through what a \"post\" from an simple timesheet notation file should look like. One thing occurred to me is that the entry's \"end\" time is the publication date, not the start time. That way the post is based on when it was completed not when it was started. There is an edge case of where two entries end at the same time on the same date. The calculated filename will collide. In the `BlogSTN()` function I could check for potential file collision and either issue a warning or append. Not sure of the right action. Since I write sequentially this might not be a big problem, not sure yet. Still playing with formatting before I add this type of post to my blog. Still not settled on the title question but I need something to link to from my blog's homepage and that \"title\" is what I use for other posts. Maybe I should just use a command line option to provide a title?\n\n2022-08-14\n\n14:00 - 17:00; Golang; pdtk, stngo; Today I started an experiment. I cleaned up stngo a little today, still need to implement a general `Parse()` method that works on a `io.Reader`. After a few initial false starts I realized the \"right\" place for rendering simple timesheet notation as blog posts is in the the \"blogit\" action of [pdtk](https://rsdoiel.github.io/pttk). I think this form might be useful for both release notes in projects as well as a series aggregated from single paragraphs. The limitation of the single paragraph used in simple timesheet notation is intriguing. Proof of concept is working in v0.0.3 of pdtk. Still sorting out if I need a title and if so what it should be.\n\n2022-08-12\n\n16:00 - 16:30; Golang; stngo; A work slack exchange has perked my interest in using [simple timesheet notation](https://rsdoiel.github.io/stngo/docs/stn.html) for very short blog posts. This could be similar to Dave Winer title less posts on [scripting](http://scripting.com). How would this actually map? Should it be a tool in the [stngo](https://rsdoiel.githubio/stngo) project?\n\n2022-09-26\n\n6:30 - 7:30; Golang; pttk; renamed \"pandoc toolkit\" (pdtk) to \"plain text toolkit\" (pttk) after adding gopher support to cli. This project is less about writing tools specific to Pandoc and more about writing tools oriented around plain text.\n",
      "data": {
        "author": "R. S. Doiel",
        "byline": "R. S. Doiel, 2022-08-15",
        "pubDate": "2022-08-15",
        "title": "PTTK and STN",
        "updated": "2022-09-26"
      },
      "url": "posts/2022/08/15/golang-development.json"
    },
    {
      "content": "\n# 5:45 PM, Golang: ptdk,  stngo\n\nPost: Monday, August 15, 2022, 5:45 PM\n\nThinking through what a \"post\" from an simple timesheet notation file should look like. One thing occurred to me is that the entry's \"end\" time is the publication date, not the start time. That way the post is based on when it was completed not when it was started. There is an edge case of where two entries end at the same time on the same date. The calculated filename will collide. In the `BlogSTN()` function I could check for potential file collision and either issue a warning or append. Not sure of the right action. Since I write sequentially this might not be a big problem, not sure yet. Still playing with formatting before I add this type of post to my blog. Still not settled on the title question but I need something to link to from my blog's homepage and that \"title\" is what I use for other posts. Maybe I should just use a command line option to provide a title?\n\n",
      "data": {
        "keywords": [
          "ptdk",
          "stngo"
        ],
        "no": 4,
        "pubDate": "2022-08-15",
        "series": "Golang",
        "title": "5:45 PM, Golang: ptdk,  stngo"
      },
      "url": "posts/2022/08/15/golang-development-2022-08-15_170545.json"
    },
    {
      "content": "\n# 5:00 PM, Golang: pdtk,  stngo\n\nPost: Sunday, August 14, 2022, 5:00 PM\n\nToday I started an experiment. I cleaned up stngo a little today, still need to implement a general `Parse()` method that works on a `io.Reader`. After a few initial false starts I realized the \"right\" place for rendering simple timesheet notation as blog posts is in the the \"blogit\" action of [pdtk](https://rsdoiel.github.io/pttk). I think this form might be useful for both release notes in projects as well as a series aggregated from single paragraphs. The limitation of the single paragraph used in simple timesheet notation is intriguing. Proof of concept is working in v0.0.3 of pdtk. Still sorting out if I need a title and if so what it should be.\n\n",
      "data": {
        "keywords": [
          "pdtk",
          "stngo"
        ],
        "no": 3,
        "pubDate": "2022-08-14",
        "series": "Golang",
        "title": "5:00 PM, Golang: pdtk,  stngo"
      },
      "url": "posts/2022/08/14/golang-development-2022-08-14_170500.json"
    },
    {
      "content": "\n# 4:30 PM, Golang: stngo\n\nPost: Friday, August 12, 2022, 4:30 PM\n\nA work slack exchange has perked my interest in using [simple timesheet notation](https://rsdoiel.github.io/stngo/docs/stn.html) for very short blog posts. This could be similar to Dave Winer title less posts on [scripting](http://scripting.com). How would this actually map? Should it be a tool in the [stngo](https://rsdoiel.githubio/stngo) project?\n\n",
      "data": {
        "keywords": [
          "stngo"
        ],
        "no": 2,
        "pubDate": "2022-08-12",
        "series": "Golang",
        "title": "4:30 PM, Golang: stngo"
      },
      "url": "posts/2022/08/12/golang-development-2022-08-12_160430.json"
    },
    {
      "content": "",
      "data": {},
      "url": "posts/footer.json"
    },
    {
      "content": "\n\nInstalling Golang from Source on RPi-OS for arm64\n==========================================\n\nBy R. S. Doiel, 2022-02-18\n\nThis are my quick notes on installing Golang from source on the Raspberry Pi OS 64 bit.\n\n1. Get a working compiler\n\ta. go to https://go.dev/dl/ and download go1.17.7.linux-arm64.tar.gz\n\tb. untar the tarball in your home directory (it'll unpack to $HOME/go)\n\tc. `cd go/src` and `make.bash`\n2. Move go directory to go1.17\n3. Clone go from GitHub\n4. Compile with the downloaded compiler\n\ta. `cd go/src`\n\tb. `env GOROOT_BOOTSTRAP=$HOME/go1.17 ./make.bash`\n\tc. Make sure `$HOME/go/bin` is in the path\n\td. `go version`\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2022, R. S. Doiel",
        "date": "2022-02-18",
        "keywords": [
          "raspberry pi",
          "Raspberry Pi OS",
          "arm64"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 1,
        "series": "Raspberry Pi",
        "title": "Installing Golang from source on RPi-OS for arm64"
      },
      "url": "posts/2022/02/18/Installing-Go-from-Source-RPiOS-arm64.json"
    },
    {
      "content": "\nRevealing the Pandoc AST\n========================\n\nI've used Pandoc for a number of years, probably a decade. It's been wonderful\nwatching it grow in capability. When Pandoc started accepting JSON documents as\na support metadata file things really started to click for me. Pandoc became\nmy go to tool for rendering content in my writing and documentation projects.\n\nRecently I've decided I want a little bit more from Pandoc. I've become curious\nabout prototyping some document conversion via Pandoc's filter mechanism. To do\nthat you need to understand the AST, aka abstract syntax tree. \nHow is the AST structure? \n\nIt turns out I just wasn't thinking simply enough (or maybe just not paying\nenough attention while I skimmed Pandoc's documentation). Pandoc's processing\nmodel looks like\n\n```\n\tINPUT --reader--> AST --filter AST --writer--> OUTPUT\n```\n\nI've \"known\" this forever. The missing piece for me was understanding \nthe AST can be an output format.  Use the `--to` option with the value\n\"native\" you get the Haskell representation of the AST. It's that simple.\n\n```\n\tpandoc --from=markdown --to=native \\\n\t   learning-to-write-a-pandoc-filter.md | \\\n\t   head -n 20\n```\n\nOutput\n\n```\n[ Header\n    1\n    ( \"learning-to-write-a-pandoc-filter\" , [] , [] )\n    [ Str \"Learning\"\n    , Space\n    , Str \"to\"\n    , Space\n    , Str \"write\"\n    , Space\n    , Str \"a\"\n    , Space\n    , Str \"Pandoc\"\n    , Space\n    , Str \"filter\"\n    ]\n, Para\n    [ Str \"I\\8217ve\"\n    , Space\n    , Str \"used\"\n    , Space\n```\n\nIf you prefer JSON over Haskell use `--to=json` for similar effect. Here's\nan example piping through [jq](https://stedolan.github.io/jq/).\n\n```\n\tpandoc --from=markdown --to=json \\\n\t   learning-to-write-a-pandoc-filter.md | jq .\n```\n\nWriting filters makes much sense to me now. I can see the AST and see\nhow the documentation describes writing hooks in Lua to process it.\n\n",
      "data": {
        "copyright": "copyright (c) 2022, R. S. Doiel",
        "keywords": [
          "Pandoc",
          "filter"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 4,
        "series": "Pandoc Techniques",
        "title": "Revealing the Pandoc AST"
      },
      "url": "posts/2022/11/17/revealing-pandoc-ast.json"
    },
    {
      "content": "\nArtemis Project Status, 2022\n============================\n\nIt's been a while since I wrote an Oberon-07 post and even longer since I've worked on Artemis. Am I done with Oberon-07 and abandoning Artemis?  No. Life happens and free time to just hasn't been available. I don't know when that will change.\n\nWhat's the path forward?\n------------------------\n\nSince I plan to continue working Artemis I need to find a way forward in much less available time. Time to understand some of my constraints. \n\n1. I work on a variety of machines, OBNC is the only compiler I've consistently been able to use across all my machines\n2. Porting between compilers takes energy and time, and those compilers don't work across all my machines\n3. When I write Oberon-07 code I quickly hit a wall for the things I want to do, this is what original inspired Artemis, so there is still a need for a collection of modules\n4. Oberon/Oberon-07 on Wirth RISC virtual machine is not sufficient for my development needs\n5. A2, while very impressive, isn't working for me either (mostly because I need to work on ARM CPUs)\n\nThese constraints imply Artemis is currently too broadly scoped. I think I need to focus on what works in OBNC for now. Once I have a clear set of modules then I can revisit portability to other compilers.\n\nWhat modules do I think I need? If I look at my person projects I tend to work allot with text, often structured text (e.g. XML, JSON, CSV). I also tend to be working with network services. Occasionally I need to interact with database (e.g. SQLite3, MySQL, Postgres).  Artemis should provide modules to make it easy to write code in Oberon-07 that works in those areas. Some of that I can do by wrapping existing C libraries. Some I can simply write from scratch in Oberon-07 (e.g. a JSON encoder/decoder). That's going to me my focus as my hobby time becomes available and then.\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2022, R. S. Doiel",
        "date": "2022-07-27",
        "keywords": [
          "Oberon",
          "Oberon-07",
          "Artemis"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 22,
        "series": "Mostly Oberon",
        "title": "Artemis Project Status, 2022"
      },
      "url": "posts/2022/07/27/Artemis-Status-Summer-2022.json"
    },
    {
      "content": "\nTurbo Oberon, the dream\n=======================\n\nby R. S. Doiel, 2022-07-30\n\nSometimes I have odd dreams and that was true last night through early this morning. The dream was set in the future. I was already retired. It was a dream about \"Turbo Oberon\".\n\n\"Turbo Oberon\" was an Oberon language. The language compiler was named \"TO\" in my dream. A module's file extension was \".tom\", in honor of Tom Lopez (Meatball Fulton) of ZBS. There were allot of ZBS references in the dream.\n\n\"TO\" was very much a language in the Oberon-07 tradition with minor extensions when it came to bringing in modules. It allowed for a multi path search for module names. You could also express a Module import as a string allowing providing paths to the imported module.\n\nCompilation was similar to Go. Cross compilation was available out of the box by setting a few environment variables. I remember answering questions about the language and its evolution. I remember mentioning in the conversation about how I thought Go felling into the trap of complexity like Rust or C/C++ before it. The turning point for Go was generics. Complexity was the siren song to be resisted in \"Turbo Oberon\". Complexity is seductive to language designers and implementers. I was only an implementer.\n\nEvolution wise \"TO\" was built initially on the Go tool chain. As a result it featured easily cross-compiled binaries and had a rich standard set of Modules like Go but also included portable libraries for implementing graphic user interfaces. \"Turbo Oberon\" evolved as a conversation between Go and the clean simplicity of Oberon-07. Two example applications \"shipped\" with the \"TO\" compiler. They were an Oberon like Operating System (stand alone and hosted) and a Turbo Pascal like IDE. The IDE was called \"toe\" for Turbo Oberon Editor. I don't remember the name of the OS implementation but it might have been \"toos\". I remember \"TO\" caused problems for search engines and catalog systems.\n\nI remember remarking in the dream that programming in \"Turbo Oberon\" was a little like returning to my roots when I first learned to program in Turbo Pascal. Except I could run my programs regardless of the operating system or CPU architecture. \"\"TO\" compiler supported cross compilation for Unix, macOS, Windows on ARM, Intel, RISC-V. The targets were inherited from Go implementation roots.\n\nIn my dream I remember forking Go 1.18 and first replacing the front end of the compiler. I remember it was a challenge understanding the implementation and generate a Go compatible AST. The mapping between Oberon-07 and Go had its challenges. I remember first sticking to a strict Oberon-07 compiler targeting POSIX before enhancing module imports. I remember several failed attempts at getting module imports \"right\". I remember being on the fence about a map data type and going with a Maps module.  I don't remember how introspection worked but saying it was based on an ETH paper for Oberon 2.  I remember the compiler, like Go, eventually became self hosting. It supported a comments based DSL to annotating RECORD types making encoding and decoding convenient, an influence of Go and it's tool chain.\n\nI believe the \"Turbo Oberon Editor\" came first and that was followed by the operating system implementation.\n\nI remember talking about a book that influenced me called, \"Operating Systems through compilers\" but don't know who wrote it. I remember a discussion about the debt owed to Prof. Wirth. I remember that the book showed how once you really understood building the compile you could then build the OS. There was a joke riffing on the old Lisp joke but rephrased, \"all applications evolve not to a Lisp but to an embedded OS\".\n\nIt was a pleasant dream, in the dream I was older and already retired but still writing \"TO\" code and having fun with computers. I remember a closing video shot showing me typing away at what looked like the old Turbo Pascal IDE. As Mojo Sam said in **Somewhere Next Door to Reality**, \"it was a sorta a retro future\".\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "byline": "R. S. Doiel",
        "copyright": "copyright (c) 2020, R. S. Doiel",
        "date": "2022-07-30",
        "keywords": [
          "Oberon",
          "Wirth",
          "ETH",
          "dreams",
          "compilers",
          "operating systems"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Turbo Oberon, the dream"
      },
      "url": "posts/2022/07/30/Turbo-Oberon.json"
    },
    {
      "content": "\n# Two missing features from HTML5, an enhanced form.enctype and a list input type\n\n## Robert's wish list for browsers and web forms handling\n\nBy R. S. Doiel, 2024-02-23\n\nI wish the form element supported a `application/json` encoding type and there was such a thing as a `list-input` element.\n\nI've been thinking about how we can get back to basic HTML documents and move away from JavaScript required to render richer web forms. When web forms arrived on scene in the early 1990s they included a few basic input types. Over the years a few have been added but by and large the data model has remained relatively flat. The exception being the select element with `multiple` attribute set. I believe we are being limited by the original choice of urlencoding web forms and then resort to JavaScript to address it's limitations.\n\nWhat does the encoding of a web form actually look like?  The web generally encodes the form using urlencoding. It presents a stream of key value pairs where the keys are the form's input names and the values are the value of the input element. With a multi-select element the browser simply repeats the key and adds the next value in the selection list to that key.  In Go you can describe this simple data structure as a `map[string][]string`[^1]. Most of the time a key points to a single element array of string but sometimes it can have multiple elements using that key and then the array expands to accommodate. Most of the time we don't think about this as web developers. The library provided with your programming language decodes the form into a more programmer friendly representation. But still I believe this simple urlencoding has held us back. Let me illustrate the problem through a series of simple form examples.\n\n[^1]: In English this could be described as \"a map using a string to point at a list of strings\" with \"string\" being a sequence of letters or characters.\n\nHere's an example of a simple form with a multi select box. It is asking for your choice of ice cream flavors.\n\n~~~html\n<form method=\"POST\">\n  <label for=\"ice-cream-flavors\">Choose your ice cream flavors:</label>\n  <select id=\"ice-cream-flavors\" name=\"ice-cream-flavors\" multiple >\n    <option value=\"Chocolate\">Chocolate</option>\n    <option value=\"Coconut\">Cocunut</option>\n    <option value=\"Mint\">Mint</option>\n    <option value=\"Strawberry\">Strawberry</option>\n    <option value=\"Vanilla\">Vanilla</option>\n    <option value=\"Banana\">Banana</option>\n    <option value=\"Peanut\">Peanut</option>\n  </select>\n  <p>\n  <input type=\"submit\"> <input type=\"reset\">\n</form>\n~~~\n\nBy default your web browser will packaged this up and send it using \"application/x-www-form-urlencoded\". If you select \"Coconut\" and \"Strawberry\" then the service receiving your data will get an encoded document that looks like this.\n\n~~~urlencoding\nice-cream-flavors=Coconut&ice-cream-flavors=Strawberry\n~~~\n\nThe ampersands separate the key value pairs. The fact that \"ice-cream-flavors\" name repeats means that the key \"ice-cream-flavors\" will point to an array of values.  In pretty printed JSON representation is a little clearer.\n\n~~~json\n{\n    \"ice-cream-flavors\": [ \"Coconut\", \"Strawberry\" ]\n}\n~~~\n\nSo far so good. Zero need to enhance the spec. It works and has worked for a very long time. Stability is a good thing. Let's elaborate a little further.  I've added a dish choice for the ice cream, \"Sugar Cone\" and \"Waffle Bowl\". That web form looks like.\n\n~~~html\n<form method=\"POST\">\n<label for=\"ice-cream-flavors\">Select the flavor for each scoop of ice cream:</label>\n<select id=\"ice-cream-flavors\" name=\"ice-cream-flavors\" multiple>\n  <option value=\"Chocolate\">Chocolate</option>\n  <option value=\"Coconut\">Cocunut</option>\n  <option value=\"Mint\">Mint</option>\n  <option value=\"Strawberry\">Strawberry</option>\n  <option value=\"Vanilla\">Vanilla</option>\n  <option value=\"Banana\">Banana</option>\n  <option value=\"Peanut\">Peanut</option>\n</select>\n<p>\n<fieldset>\n  <legend>Pick your delivery dish</legend>\n  <div>\n    <input type=\"radio\" id=\"sugar-cone\" name=\"ice-cream-dish\" value=\"sugar-cone\" />\n    <label for=\"sugar-cone\">Sugar Cone</label>\n  </div>\n  <div>\n    <input type=\"radio\" id=\"waffle-bowl\" name=\"ice-cream-dish\" value=\"waffle-bowl\" />\n    <label for=\"waffle-bowl\">Waffle Bowl</label>\n  </div>\n</fieldset>\n<input type=\"submit\"> <input type=\"reset\">\n</form>\n~~~\n\nIf we select \"Banana\" and \"Peanut\" flavors served in a \"Waffle Bowl\" the encoded document would reach the web service looking something like this.\n\n~~~urlencoded\nice-cream-flavors=Banana&ice-cream-flavors=Peanut&ice-cream-dish=waffle-cone\n~~~\n\nThat's not too bad. Again this is the state of web form for ages now. In JSON it could be represented as the following.\n\n~~~json\n{\n    \"ice-cream-flavors\": [ \"Banana\", \"Peanut\" ],\n    \"ice-cream-dish\": \"waffle-cone\"\n}\n~~~\n\nThis is great we have a simple web form that can collect a single ice cream order.  But what if we want to actually place several individual ice cream orders as one order? Today we have two choices, multiple web forms that accumulate the orders (circa 2000) or use JavaScript create a web UI that can handle list of form elements. Both have their drawbacks.\n\nIn the case of the old school approach changing web pages just to update an order can be slow and increase uncertainty about your current order. That is why the JavaScript approach has come to be more common. But that JavaScript approach comes at a huge price. It's much more complex, we've seen a dozens of libraries and frameworks that have come and gone trying to manage that complexity in various ways.\n\nIf we supported JSON encoded from submission directly in the web browser I think we'd make a huge step forward. It could decouple the JavaScript requirement. That would avoid much of the cruft that we ship down to the web browser today because we can't manage lists of things without resorting to JavaScript.\n\nLet's pretend there was a new input element type called \"list-input\". A \"list-input\" element can contain any combination of today's basic form elements. Here's my hypothetical `list-input` based from example. In it we're going to select the ice cream flavors and the dish format (cone, bowl) as before but have them accumulate in a list. That form could be expressed in HTML similar to my mock up below.\n\n~~~html\n<form>\n  <label for=\"ice-cream-order\">Place your next order, press submit when you have all of them.</label>\n  <list-input id=\"ice-cream-order\" name=\"ice-cream-order\">\n    <label for=\"ice-cream-flavor\">Select the flavor for each scoop of ice cream:</label>\n    <select id=\"ice-cream-flavor\" name=\"ice-cream-flavor\" multiple>\n      <option value=\"Chocolate\">Chocolate</option>\n      <option value=\"Coconut\">Cocunut</option>\n      <option value=\"Mint\">Mint</option>\n      <option value=\"Strawberry\">Strawberry</option>\n      <option value=\"Vanilla\">Vanilla</option>\n      <option value=\"Banana\">Banana</option>\n      <option value=\"Peanut\">Peanut</option>\n    </select>\n  <p>\n  <fieldset>\n    <legend>Pick your delivery dish</legend>\n    <div>\n      <input type=\"radio\" id=\"sugar-cone\" name=\"ice-cream-dish\" value=\"sugar-cone\" />\n      <label for=\"sugar-cone\">Sugar Cone</label>\n    </div>\n    <div>\n      <input type=\"radio\" id=\"waffle-bowl\" name=\"ice-cream-dish\" value=\"waffle-bowl\" />\n      <label for=\"waffle-bowl\">Waffle Bowl</label>\n    </div>\n  </fieldset>\n  </list-input>\n  <input type=\"submit\"> <input type=\"reset\">\n</form>\n~~~\n\nWith two additional lines of HTML the input form can now support a list of individual ice cream orders. Assuming only urlencoding is supported then how does that get encoded and sent to the web server? Here is an example set of orders\n\n1. vanilla ice cream with a sugar cone\n2. chocolate with a waffle bowl\n\n~~~urlencoded\nice-cream-flavors=Vanilla&ice-cream-flavors=Chocolate&ice-cream-dish=sugar-cone&ice-cream-dish=waffle-bowl\n~~~\n\nWhich flavor goes with which dish?  That's the problem with urlencoding a list in your web form. We just can't keep the data alignment manageable.  What if the web browser used JSON encoding? \n\n~~~json\n[\n  {\n      \"ice-cream-flavors\": [ \"Vanilla\" ],\n      \"ice-cream-dish\": \"sugar-cone\"\n  },\n  {\n      \"ice-cream-flavors\": [ \"Chocolate\" ],\n      \"ice-cream-dish\": \"waffle-bowl\"\n  }\n~~~\n\nSuddenly the alignment problem goes away. There is precedence for controlling behavior of the web browser submission through the `enctype` attribute. File upload was addressed by adding support for `multipart/form-data`.  In 2024 and for over the last decade it has been common practice in web services to support JSON data submission. I believe it is time that the web browser also supports this directly. This would allow us to decouple the necessity of using JavaScript in browser as we require today. The form elements already map well to a JSON encoding. If JSON encoding was enabled then adding a element like my \"list-input\" would make sense.  Otherwise we remain stuck in a world where hypertext markup language remains very limited and can't live without JavaScript.\n\n",
      "data": {
        "author": "R. S. Doiel",
        "keywords": [
          "html",
          "web forms",
          "encoding"
        ],
        "title": "Two missing features from HTML5, an enhanced form.enctype and a list input type"
      },
      "url": "posts/2024/02/23/enhanced_form_handling.json"
    },
    {
      "content": "",
      "data": {},
      "url": "posts/nav.json"
    },
    {
      "content": "\n# Postgres Quick Notes, take two\n\nBy R. S. Doiel, 2023-11-17\n\nWhat follows is some quick notes to remind me of the things I do when\nI setup a new instance of PostgreSQL on the various machines I work with.\n\n## Installation approach\n\nIf possible I install Postgres with the system's package manager or follow\nthe directions suggested for installation on the [Postgres website](https://postgres.org).\n\n### macOS and Postgres\n\nFor macOS that's not the route I take if possible is to install via [Postgres App](https://postgresapp.com/).\nThis provides a very nice setup of developing with Postgres on macOS and also allows you to easily\ntest multiple versions of Postgres.  It is not as convenient in the Mac Mini headless configuration\nI also use Postgres on macOS in. In that case I use Mac Ports' package manager to install Postgres.\nUnfortunately just using ports command isn't enough to get running. What follows is my notes on the\nadditional steps I've taken to get things working.\n\nInstall the version of Postgres you want (e.g. PostgreSQL 16) via ports\n\n1. install postgresql16, postgresql16-server, postgres_select\n2. make sure the postgres version is selected using the ports command\n3. make a directory for the default postgres db\n4. make sure the default db directory is owned by the postgres user\n5. run the initialization scripts provided by the posts installer\n6. use the ports command to load the plist\n7. start up the server, make sure the log file is writable\n\nHere's the commands I type in the shell\n\n~~~shell\nsudo port install postgresql16-server postgresql16 postgresql_select\n# Answer y to the prompt\n# After the install completes Ports will suggest the following to complete the process.\nsudo port select postgresql postgresql16\nsudo mkdir -p /opt/local/var/db/postgresql16/defaultdb\nsudo chown postgres:postgres /opt/local/var/db/postgresql16/defaultdb\nsudo -u postgres /bin/sh -c 'cd /opt/local/var/db/postgresql16 && /opt/local/lib/postgresql16/bin/initdb -D /opt/local/var/db/postgresql16/defaultdb'\nsudo port load postgresql16-server\nsudo -u postgres /bin/sh -c '/opt/local/lib/postgresql16/bin/pg_ctl -D /opt/local/var/db/postgresql16/defaultdb -l /opt/local/var/log/postgresql16/postgres.log start'\n~~~\n\n## Database users setup\n\nThis applies to most Postgres installations I do because I am using them to\ndevelop software solutions. In a production setting you'd want a more conservative\nsecurity approach.\n\n1. Make sure you can connect as the postgres user\n2.  For each developer\n    a. Use the Postgres createuser tool to create superuser account(s)\n    b. Use the Postgres createdb tool to create databases for those account(s)\n\nHere's the commands I type in the shell\n\n~~~shell\nsudo -u postgres psql\n~~~\n\nWhen in the psql shell you should be able to use the slash commands like\n\n\\\\l\n: list the databases\n\n\\\\dt\n: list the tables in the database\n\n\\\\d TABLE\\_NAME\n: list the schema for TABLE\\_NAME\n\n\\\\q\n: quit the psql shell\n\nAssuming we have a working Postgres I now create superuser accounts for\ndevelopment and databases that match the username.\n\n~~~shell\nsudo -u postgres createuser --interactive $USER\ncreatedb $USER\n~~~\n\nI should now be able to run the psql shell without specifying the\npostgres username.\n\n~~~shell\npsql\n~~~\n",
      "data": {
        "abstract": "A collection of quick notes for setting and Postgres for development.",
        "byline": "R. S. Doiel, 2023-11-17",
        "keywords": [
          "postgres"
        ],
        "title": "Postgres Quick Notes, take two"
      },
      "url": "posts/2023/11/17/PostgreSQL-Quick-Notes.json"
    },
    {
      "content": "\n# RSS and my web experience\n\nby R. S. Doiel, 2023-12-07\n\nI agree with [Dave Winer](http://scripting.com/2023/12/07/140505.html?title=whyWeWantFeedsInBluesky), Blue Sky should support RSS. Most web systems benefit from supporting RSS. RSS is a base level inter-opt for web software like HTML and JSON can be. While I may not be typical I am an example of a web user who experiences much of the web via RSS. I read blog and site content via RSS. I \"follow\" my friends and colleagues via RSS. This is true when they blog or when they post in a Mastodon community.  I track academic repositories content for [ETH Zurich Research](https://www.rc-blog.ethz.ch/en/feed) and [Caltech](https://feeds.library.caltech.edu/recent/combined.html) via RSS feeds. I check the weather via NOAA's [RSS feed](https://www.weather.gov/rss).  News sites often syndicate still via RSS and then Podcasts, if they are actual Podcasts are distributed via RSS.  All this is to say I think RSS is not dead. It remains easy to render can can be easy to consume.  If a website doesn't provide it it is possible to generate it yourself[1] or find a service to use that does[2]. RSS remains key to how I experience and use the web in 2023.\n\n[1]: Go libraries like [Colly](https://go-colly.org/) and [Gofeeds](https://github.com/mmcdole/gofeed) make it possible to roll your own like the one in skimmer\n\n[2]: https://firesky.tv/ is an example of a service that provides RSS for Bluesky via its raw API, [html2rss](https://html2rss.github.io/) is service that producing RSS feeds for popular sites that don't include them\n\nMy personal approach to feeds is very much tailored to me. It's probably overkill for most people but it works with my vision and cognitive limitations. He's the steps I take in feed reading. They essentially decompose a traditional feed reader and allow for more flexibility for my reading pleasure.\n\n1. Maintain a list of feeds in a simple text file\n2. Harvest those feeds with [skimmer](https://rsdoiel.github.io/skimmer), Skimmer stores the items in an [SQLite3](https://sqlite.org)\n3. I filter the items using SQL and SQLite3 or via an interactive mode provided by Skimmer\n4. Render saved items to Markdown with [skim2md](https://rsdoiel.github.io/skimmer/skim2md.1.html)\n5. Use [Pandoc](https://pandoc.org) to render the Markdown and view Firefox\n\nThe nice thing about this approach is that I can easily script it with Bash or even a Windows bat. I can easily maintain separate lists and separate databases for personal and work related material.  A bonus is the database items can also serve as a corpus for a personal search engine too. If you want to save maintain a public reading list this setup is ideal too. Of course the list of curated items can be transformed into their own RSS feed as well.\n\n[Skimmer](https://rsdoiel.github.io/skimmer/skimmer.1.html) is a deconstructed feed reader. Does that make it post modern feed reader?  Skimmer processes a list of feeds I follow and saves the results in an SQLite 3 database. That database can be used to filter the feeds and flag items as \"saved\". Typically I filter by timestamps. Saved items can be processed with `skim2md` to render a markdown document. `skim2md` has an option to include a \"save to pocket\" button for each item in the output. I use Pandoc to render the page then view that result in Firefox. At my leisure I read the web page and press the \"Save to pocket\" button any item I want to read later. It's a very comfortable experience.\n\nSkimmer lead me to think about a personal news page for myself and family. Skimmer lets me curate separate lists organized around themes. These can then be rendered to individual pages like pages of a newspaper. This has been captured in an experimental project I call [Antenna](https://rsdoiel.github.io/antenna). It even includes a feed search feature thanks to [PageFind](https://pagefind.app)\n",
      "data": {
        "abstract": "RSS is alive and kicking and Bluesky should support it too. Explore my recipe for reading web news.",
        "byline": "R. S. Doiel, 2023-12-07",
        "created": "2023-12-07",
        "keywords": [
          "RSS",
          "Feeds",
          "Social Media",
          "news"
        ],
        "numnber": 1,
        "series": "Simplification and the Web",
        "title": "RSS and my web experience"
      },
      "url": "posts/2023/12/07/rss-and-my-web-experience.json"
    },
    {
      "content": "\n# Find Bluesky RSS Feeds\n\nWith the update to [1.60](https://bsky.app/profile/bsky.app/post/3kh5rjl6bgu2i) of Bluesky we can now follow people on Bluesky via RSS feeds. This makes things much more convienient for me. \nThe RSS feed is visible via the HTML markup on a person's profile page (which are now public). E.g. My Bluesky profile page is\nat <https://bsky.app/profile/rsdoiel.bsky.social> and if you look at that pages HTML markup you'll see a link element in the head\n\n```html\n <link rel=\"alternate\" type=\"application/rss+xml\" href=\"/profile/did:plc:nbdlhw2imk2m2yqhwxb5ycgy/rss\">\n```\n\nThat's the RSS feed. So now if you want to follow you can expand the URL to \n\n```\nhttps://bsky.app/profile/did:plc:nbdlhw2imk2m2yqhwxb5ycgy/rss\n```\n\nAnd use if via your feed reader. This is a sweat feature. It allows me to move my reading from visiting the website\nto getting updates via my feed reader.\n\n\n",
      "data": {
        "byline": "R. S. Doiel, 2023-12-23",
        "keywords": [
          "bluesky",
          "rss"
        ],
        "title": "Finding Bluesky RSS feeds"
      },
      "url": "posts/2023/12/23/finding-blue-sky-rss-feeds.json"
    },
    {
      "content": "\n\n# NodeJS, NPM, Electron\n\nBy R. S. Doiel 2017-10-20\n\nElectron is an app platform leveraging web technologies. Conceptually it is a\nmashup of NodeJS and Chrome browser. [Electron](https://electron.atom.io/) site\nhas a nice starter app. It displays a window with Electron version info and\n'hello world'.\n\nBefore you can get going with _Electron_ you need to have a\nworking _NodeJS_ and _NPM_. I usually compile from source and this\nwas my old recipe (adjusted for v8.7.0).\n\n```shell\n    cd\n    git clone https://github.com/nodejs/node.git\n    cd node\n    git checkout v8.7.0\n    ./configure --prefix=$HOME\n    make && make install\n```\n\nTo install an _Electron Quick Start_ I added the additional steps.\n\n```shell\n    cd\n    git clone https://github.com/electron/electron-quick-start\n    cd electron-quick-start\n    npm install\n    npm start\n```\n\nNotice _Electron_ depends on a working _node_ and _npm_.  When I\ntried this recipe it failed on `npm install` with errors regarding\ninternal missing node modules.\n\nAfter some fiddling I confirmed my node/npm install failed because\nI had install the new version of over a partially installed previous\nversion. This causes the node_modules to be populated with various\nconflicting versions of internal modules.\n\nSorting that out allowed me to test the current version of\n*electron-quick-start* cloned on 2017-10-20 under _NodeJS_ v8.7.0.\n\n## Avoiding Setup Issues in the future\n\nThe *Makefile* for _NodeJS_ includes an 'uninstall' option. Revising\nmy _NodeJS_ install recipe above I now do the following to setup a machine\nto work with _NodeJS_ or _Electron_.\n\n```shell\n    git clone git@github.com:nodejs/node.git\n    cd node\n    ./configure --prefix=$HOME\n    make uninstall\n    make clean\n    make -j 5\n    make install\n```\n\nIf I am on a device with a multi-core CPU (most of the time) you can speed\nup the make process using a `-j CPU_CORE_COUNT_PLUS_ONE` option (e.g. `-j 5`\nfor my 4 core x86 laptop).\n\nOnce _node_ and _npm_ were working normally the instructions in the\n*electron-quick-start* worked flawlessly on my x86.\n\nI have tested the node install recipe change on my Pine64 Pinebook, on \nseveral Raspberry Pi 3s as well as my x86 Ubuntu Linux laptop.\n\nI have not gotten Electron up on my Pine64 Pinebook or Raspberry Pi's yet. \n`npm install` outputs errors suggesting that it is expecting an x86 architecture.\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2017, R. S. Doiel",
        "date": "2017-10-20",
        "keywords": [
          "Javascript",
          "NodeJS",
          "Electron"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "NodeJS, NPM, Electron"
      },
      "url": "posts/2017/10/20/node-npm-electron.json"
    },
    {
      "content": "\n\n# Cross compiling Go 1.8.3 for Pine64 Pinebook\n\nBy R. S. Doiel 2017-06-16\n\nPine64's Pinebook has a 64-bit Quad-Core ARM Cortex A53 which is \nnot the same ARM processor found on a Raspberry Pi 3. As a \nresult it needs its own compiled version of Go. Fortunately cross \ncompiling Go is very straight forward. I found two helpful Gists\non GitHub discussing compiling Go for a 64-Bit ARM processor. \n\n+ [conoro's gist](https://gist.github.com/conoro/4fca191fad018b6e47922a21fab499ca)\n+ [truedat101's gist](https://gist.github.com/truedat101/5898604b1f7a1ec42d65a75fa6a0b802)\n\nI am using a Raspberry Pi 3, raspberrypi.local, as my cross compile \nhost. Go 1.8.3 is already compiled and available.  Inspired by the \ngists I worked up with this recipe to bring a Go 1.8.3 to my Pinebook.\n\n```shell\n    cd\n    mkdir -p gobuild\n    cd gobuild\n    git clone https://github.com/golang/go.git go1.8.3\n    cd go1.8.3\n    git checkout go1.8.3\n    export GOHOSTARCH=arm\n    export GOARCH=arm64\n    export GOOS=linux\n    cd src\n    ./bootstrap.bash\n```\n\nAfter the bootstrap compile is finished I switch to my Pinebook,\ncopy the bootstrap compiler to my Pinebook and use it to compile\na new go1.8.3 for Pine64.\n\n```shell\n    cd\n    scp -r raspberrypi.local:gobuild/*.tbz ./\n    tar jxvf go-linux-arm64-bootstrap.tbz\n    export GOROOT=go-linux-arm64-bootstrap\n    go-linux-arm64-bootstrap/bin/go version\n    unset GOROOT\n    git clone https://github.com/golang/go\n    cd go\n    git checkout go1.8.3\n    export GOROOT_BOOTSTRAP=$HOME/go-linux-arm64-bootstrap\n    cd src\n    ./all.bash\n```\n\n_all.bash_ will successfully compile _go_ and _gofmt_ but fail on \nthe tests. It's not perfect but appears to work as I explore\nbuilding Go applications on my Pinebook. Upcoming Go releases should\nprovide better support for 64 bit ARM.\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2016, R. S. Doiel",
        "date": "2016-06-16",
        "keywords": [
          "Golang",
          "Pine64",
          "ARM"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Cross compiling Go 1.8.3 for Pine64 Pinebook"
      },
      "url": "posts/2017/06/16/cross-compiling-go.json"
    },
    {
      "content": "\n\n# Raspbian Stretch on DELL E4310 Laptop\n\nby R. S. Doiel 2017-12-18\n\nToday I bought a used Dell E4310 laptop. The E4310 is an \"old model\" now\nbut certainly not vintage yet.  It has a nice keyboard and reasonable \nscreen size and resolution. I bought it as a writing machine. I mostly\nwrite in Markdown or Fountain depending on what I am writing these days.\n\n## Getting the laptop setup\n\nThe machine came with a minimal bootable Windows 7 CD and an blank \ninternal drive. Windows 7 installed fine but was missing the network \ndrivers for WiFi.  I had previously copied the new [Raspbian Stretch](https://www.raspberrypi.org/blog/raspbian-stretch/) ISO to a USB drive. While\nthe E4310 didn't support booting from the USB drive Windows 7 does make\nit easy to write to a DVRW. After digging around and finding a blank disc\nI could write to it was a couple of mouse clicks and a bit of waiting \nand I had new bootable Raspbian Stretch CD.\n\nBooting from the Raspbian Stretch CD worked like a charm. I selected \nthe graphical install which worked well though initially the trackpad \nwasn't visible so I just used keyboard navigation to setup the install.\nAfter the installation was complete and I rebooted without the install\ndisc everything worked except the internal WiFi adapter.\n\nI had several WiFi dongles that I use with my Raspberry Pis so I \nborrowed one and with that was able to run the usual `sudo apt update \n&& sudo apt upgrade`.\n\nWhile waiting for the updates I did a little web searching and found \nwhat I needed to know on the Debian Wiki (see\nhttps://wiki.debian.org/iwlwifi?action=show&redirect=iwlagn).  Following\nthe instructions for *Debian 9 \"Stretch\"* ---\n\n```shell\n    sudo vi /etc/apt/sources.list.d/non-free.list \n    # adding the deb source line from the web page\n    sudo apt update && sudo apt install fireware-iwlwifi\n    sudo modprobe -r iwlwifi; sudo modprobe iwlwifi\n    sudo shutdown -r now\n```\n\nAfter that everything came up fine.\n\n## First Impressions\n\nFirst, I like Raspbian Pixel. It was fun on my Pi but on an Intel box\nwith 4Gig RAM it is wicked fast.  Pixel is currently my favorite flavor \nof Debian GNU/Linux. It is simple, minimal with a consistent UI for \nan X based system. Quite lovely. \n\nIf you've got an old laptop you'd like to breath some life into \nRaspbian Stretch is the way to go.\n\n\n### steps for my install process\n\n+ Booted from a minimal Windows 7 CD to get a basic OS minus networking\n+ Used Windows 7 and the internal DVD-RW to create a Raspbian Stretch CD\n+ Booted from the Raspbian Stretch CD and installed Raspbian replacing Windows 7\n+ Used a spare WiFi dongle initially to fetch the non-free iwlwifi modules\n+ Updated my source list, re-run apt update and upgrade\n+ Rebooted and everything came up and is running\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2017, R. S. Doiel",
        "date": "2017-12-18",
        "keywords": [
          "Raspbian",
          "Raspberry Pi OS",
          "amd64",
          "i386",
          "operating systems"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Raspbian Stretch on DELL E4310 Laptop"
      },
      "url": "posts/2017/12/18/raspbian-stretch-on-amd64.json"
    },
    {
      "content": "\n\n# Harvesting my Gists from GitHub\n\nBy R. S. Doiel 2017-12-10\n\nThis is a just quick set of notes on harvesting my Gists on GitHub so I\nhave an independent copy for my own website. \n\n## Assumptions\n\nIn this gist I assume you are using Bash on a POSIX system (e.g. Raspbian \non a Raspberry Pi) with the standard compliment of Unix utilities (e.g. cut, \nsed, curl). I also use Stephen Dolan's [jq](https://github.com/stedolan/jq)\nas well as Caltech Library's [datatools](https://github.com/caltechlibrary/datatools).\nSee the respective GitHub repositories for installation instructions.\nThe gist harvest process was developed against GitHub's v3 API\n(see developer.github.com). \n\nIn the following examples \"USER\" is assumed to hold your GitHub user id \n(e.g. rsdoiel for https://github.com/rsdoiel).\n\n## Getting my basic profile\n\nThis retrieves the public view of your profile.\n\n```shell\n    curl -o USER \"https://api.github.com/users/USER\"\n```\n\n## Find the urL for your gists\n\nGet the gists url from `USER.json.\n\n```shell\n    GISTS_URL=$(jq \".gists_url\" \"USER.json\" | sed -E 's/\"//g' | cut -d '{' -f 1)\n    curl -o gists.json \"${GISTS_URL}\"\n```\n\nNow `gists.json` should hold a JSON array of objects representing your Gists.\n\n## Harvesting the individual Gists.\n\nWhen you look at _gists.json_ you'll see a multi-level JSON structure.  It has been\nformatted by the API so be easy to scrape.  But since this data is JSON and Caltech Library\nhas some nice utilities for working with JSON I'll use *jsonrange* and *jq* to pull out a list\nof individual Gists URLS.\n\n```shell\n    jsonrange -i gists.json | while read I; do \n        jq \".[$I].files\" gists.json | sed -E 's/\"//g'\n    done\n```\n\nExpanding this we can now curl each individual gist metadata to find URL to the raw file.\n\n\n```shell\n    jsonrange -i gists.json | while read I; do \n        jq \".[$I].files\" gists.json | jsonrange -i - | while read FNAME; do\n            jq \".[$I].files[\\\"$FNAME\\\"].raw_url\" gists.json | sed -E 's/\"//g'; \n        done;\n    done\n```\n\nNow that we have URLs to the raw gist files we can use curl again to fetch each.\n\nWhat do we want to store with our harvested gists?  The raw files, metadata\nabout the Gist (e.g. when it was created), the Gist ID. Putting it all together\nwe have the following script.\n\n```shell\n    #!/bin/bash\n    if [[ \"$1\" = \"\" ]]; then\n        echo \"USAGE: $(basename \"$0\") GITHUB_USERNAME\"\n        exit 1\n    fi\n\n    USER=\"$1\"\n    curl -o \"$USER.json\" \"https://api.github.com/users/$USER\"\n    if [[ ! -s \"$USER.json\" ]]; then\n        echo \"Someting went wrong getting https://api.github.cm/users/${USER}\"\n        exit 1\n    fi\n\n    GISTS_URL=$(jq \".gists_url\" \"$USER.json\" | sed -E 's/\"//g' | cut -d '{' -f 1)\n    curl -o gists.json \"${GISTS_URL}\"\n    if [[ ! -s gists.json ]]; then\n        echo \"Someting went wrong getting ${GISTS_URL}\"\n        exit 1\n    fi\n\n    # For each gist harvest our file\n    jsonrange -i gists.json | while read I; do\n        GIST_ID=$(jq \".[$I].id\" gists.json | sed -E 's/\"//g')\n        mkdir -p \"gists/$GIST_ID\"\n        echo \"Saving gists/$GIST_ID/metadata.json\"\n        jq \".[$I]\" gists.json > \"gists/$GIST_ID/metadata.json\"\n        jq \".[$I].files\" gists.json | jsonrange -i - | while read FNAME; do\n            URL=$(jq \".[$I].files[\\\"$FNAME\\\"].raw_url\" gists.json | sed -E 's/\"//g')\n            echo \"Saving gist/$GIST_ID/$FNAME\"\n            curl -o \"gists/$GIST_ID/$FNAME\" \"$URL\"\n        done;\n    done\n```\n\n\n\n\n\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2017, R. S. Doiel",
        "date": "2017-12-10",
        "keywords": [
          "GitHub",
          "Gists",
          "JSON"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Harvesting my Gists from GitHub"
      },
      "url": "posts/2017/12/10/harvesting-my-gists-from-github.json"
    },
    {
      "content": "\n\nFreeDOS to Oberon System 3\n==========================\n\nBy R. S. Doiel, 2019-07-28\n\n>    UPDATE: (2021-02-26, RSD) Under VirtualBox 6.1 these\n>    instructions still fail. My hope is to revise these \n>    instructions when I get it all sorted out.\n>\n>    Many links such as the ftp site at ETH Oberon are \n>    no more. I've updated this page to point at Wayback machine\n>    or included content in here where I cannot find it else where.\n>\n>    UPDATE: (2021-02-19, RSD) Under VirtualBox 6.1 these instructions \n>    fail. For VirtualBox I’ve used FreeDOS 1.3rc3 Live CD installing \n>    the “Plain DOS” without problems.\n>\n>    UPDATE: (2021-03-16, RSD) After reviewing my post, correcting\n>    some mistakes I finally was able to get FreeDOS up and running\n>    on VirtualBox 6.1. This allows NativeOberon 2.3.6 to be brought\n>    up by booting the \"oberon0.dsk\" virtual floppy and following\n>    the instructions included. You need to know how to use\n>    the Oberon mouse and the way commands work in Oberon.\n\nWhat follows are notes on getting a FreeDOS 1.2[^1] and \nthen Native Oberon[^2] running under VirtualBox 6.0. You might \nwonder why these two are together. While it was\neasy to run the Native Oberon installation process that process\nassumes you have a properly partitioned hard disk and VirtualBox\nseems to skip that process. I found taking advantage of FreeDOS\nsimplified things for me.\n\nMy goal was running Oberon System 3, but setting up a Virtual Box\nwith FreeDOS 1.2 gave me a virtual machine that functions like a \n1999 era PC. From there all the steps in the Oberon instructions\njust worked.\n\n## Creating FreeDOS 1.2 Virtual Box\n\nI've been doing a bit if computer history reading and decided to\nbring up some older systems as a means to understand where\nthings were.  The first computers I had access to were 8080, 8086\nmachines running MS DOS based. My first computer programming language\nwas Turbo Pascal. Feeling a bit nostalgic I thought it would be\ninteresting to use it again and see what I remembered from the days\nof old. While PC and MS DOS no longer exist as commercial productions\nan wonderful group of Open Source hackers have brought new life into\nDOS with FreeDOS 1.2[^3]. You'll find many of your old familiar commands\nbut also some nice improvements. You can even run it under VirtualBox\nwhich is what I proceeded to do.\n\n### VirtualBox 6.0 setup\n\nThe [FreeDOS](https://freedos.org) website includes a CD ROM image\nthat you can use to install it. There are couple small hitches though\nto get it working under VirtualBox. First go to the [download](https://freedos.org/download) page and download the [CDROM \"standard\" installer\"](http://www.freedos.org/download/download/FD12CD.iso).\n\nWhile that is downloading you can setup your VirtualBox machine.\nFirst to remember is DOS compared to today's operating systems is\nfrugal in its hardware requirements. As a result I picked very modest\nsettings for my virtual machine. \n\n1. Launch VirtualBox\n2. From the menu, pick Machine then pick new\n3. Name your machine (e.g. \"FreeDOS 1.2\"), select the type: \"Other\" and Operating system of \"DOS\"\n4. Set memory size as you like, I just accepted the default 32MB\n5. Hard disk, pick \"Create a virtual hard disc now\"\n6. Hard disk file type, pick \"VHD (Virtual Hard Disk)\"\n7. Storage on physical hard disk, I picked Dynamically allocated both either is fine\n8. File location and size, I accepted the default location and size\n9. Before starting my FreeDOS box I made a couple of changes using \"settings\" menu icon\n    a. Display, I picked bumped memory up to 128M and picked VBoxSVGA with 33D acceleration (for games)\n    b. Storage, I added a second floppy drive (empty)\n    c. Network, I picked attached to NAT\n10. When looking at my virtual machine's detail page I clicked on the Optical drive (empty), click \"choose disc image\" and pointed at the downloaded installed CD\n11. Click Start.\n12. At \"Welcome to FreeDOS 1.2\" blue screen, hit TAB key\n13. You will see a line that begins with a boot instruction. Add a space than add the word \"raw\" (without quotes) press enter\n14. Follow the install instructions, when you get to \"Drive C: does not appear to be partitioned\" dialog, pick \"Yes - Partition drive C:\"\n15. On the next screen pick \"Yes - Please reboot now\"\n16. When at the \"Welcome to FreeDOS 1.2\" screen hit TAB again\n17. Once again add a space and type \"raw\" to the command then press enter\n18. Pick \"Yes - continue with the installation\"\n19. Pick \"Yes - Please erase and format drive C:\"\n20. At this point its a normal FreeDOS install\n21. When the install is done and reboots \"eject\" the virtual CD form the \"Optical Drive\" in the VirtualBox panel, then choose \"boot from system disk\",you now should have a working FreeDOS on VirtualBox\n\n## Native Oberon System 3 on Virtual Box\n\nNative Oberon can be found at http://www.ethoberon.ethz.ch/native/.\nThere is a related ftp site[^4] where you can download the necessary\nfiles for the stand alone version. \n\nHere's the steps I used in my Mac to download Native Oberon and\ninto a file on my desktop called \"NativeOberon-Standalone\". Open\nthe macOS Terminal application. I assume you've got a Unix\ncommand called [wget](https://en.wikipedia.org/wiki/Wget)\nalready installed[^5].\n\n> NOTE: The ETH ftp server is no more. I've included Web Archive\n> links and links to my own copies of the files needed to\n> install Native Oberon 2.3.6 in the paragraphs that follow.\n> RSD, 2021-03-16\n\n```bash\n\n    cd\n    mkdir -p Desktop/NativeOberon-Standalone\n    cd Desktop/NativeOberon-Standalone\n    wget ftp://ftp.ethoberon.ethz.ch/ETHOberon/Native/StdAlone/\n\n```\n\nClone your FreeDOS Box first. You'll want to do a \"Full Clone\". You'll\nalso want to \"remove\" any optical disks or floppies. You do that from\nthe virtual boxes' detail page and clicking on the drive and picking the\n\"Remove disk from virtual drive\" in the popup menu.\n\nAt this point we have a a virtual machine that is very similar to an \n1999 era PC installed with MS DOS.  [Native Oberon](http://web.archive.org/web/20190929033749/http://www.ethoberon.ethz.ch/native/) Normally you'd\ninstall [Native Oberon via 1.44MB floppy disks](/blog/2019/07/28/NativeOberon-StnAlone-2.3.6.zip \"Zip file of individual floppies\"). \nWe can simulate that with our Virtual machine.\nIn the folder of you downloaded there is disc called \"oberon0.dsk\". That\ncan go in our first floppy drive. But how to we get the rest of the \nfiles onto a virtual floppies? This wasn't obvious to me at first.\n\nThe Oberon install disks were organized as follows\n\n| PACKAGE    | FILENAME     | SIZE  | DSK   |\n| ---------- | ------------ | ----- | ----- |\n| Oberon-0      | [oberon0.dsk](oberon0.dsk \"boot disk\")  |          | 0 | \n| Gadgets       | [gadgets.arc](gadgets1.arc \"a modified gadgets.arc to fit 1.4 floppy\")  | 1.4  2.9 | 1 | \n| Documentation | [docu.arc](docu.arc \"documentation\")     | 1.3  2.5 | 2 | \n| Applications  | [apps.arc](apps.arc \"applications\")     | 1.3  2.8 | 3 | \n| Tutorials     | [tutorial.arc](tutorial.arc \"tutorial\") | 0.3  0.8 | 4 | \n| Pr3Fonts      | [pr3fonts.arc](pr3fonts.arc \"fonts\") | 0.3  0.6 | 4 | \n| Pr6Fonts      | [pr6fonts.arc](pr6fonts.arc \"fonts\") | 0.5  1.8 | 4 | \n| Source1       | [source1.arc](source1.arc \"Source Code\")  | 0.9  2.5 | 5 | \n| Source2       | [source2.arc](source2.arc \"Source Code\")  | 1.2  3.5 | 6 | \n| Source3       | [source3.arc](source3.arc \"Source Code\")  | 0.6  1.7 | 7 | \n\n\nIt turns out you can create 1.44MB Fat16 disc images from the\nVirtual Box 6.0 floppy drive link.  When you click on the floppy\ndrive in the details page you have a choice that includes \"create a new floppy disc\". Select this, find the disc a filename like \"disk1\". Click\non the virtual floppy disk in the Virtual Box and \"remove\"\nthe disc then create disk2, disk3, etc. In each the empty disc image\nfiles places the files from the table above. These image files can then\nbe opened on your host operating system and files copied to them. \nIt's a tedious process but this gives you something the Oberon System \ncan read and install from. Originally I just put all the files into an \nISO CD ROM image but I could not figure out how to mount that from this\nversion of Oberon. Now when you start up your Oberon V3 virtual machine\nyou can install the rest of the software like Gadgets.\n\n\n[^1]: FreeDOS is an Open Source implementation of PC/MS DOC\n\n[^2]: Native Oberon is a 1990's version of Oberon System running on i386\n\n[^3]: Download FreeDOS from http://freedos.org/download\n\n[^4]: Download Native Oberon Stand Alone from [ftp://ftp.ethoberon.ethz.ch/ETHOberon/Native/StdAlone](NativeOberon-StdAlone-2.3.6.zip \"Zip of what used to be available in that directory at ftp.ethoberon.ethz.ch\")\n\n[^5]: wget is easily installed with [HomeBrew](https://brew.sh/) or [Mac Ports](https://www.macports.org/)\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2018, R. S. Doiel",
        "date": "2019-07-28",
        "keywords": [
          "FreeDOS",
          "Oberon System"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "FreeDOS 1.2 to Oberon System 3",
        "updated": "2021-03-16"
      },
      "url": "posts/2019/07/28/freedos-to-oberon-system-3.json"
    },
    {
      "content": "\nETH Oberon System 3 on VirtualBox 6.1\n=====================================\n\nBy R. S. Doiel, 2021-03-17\n\nIn this post I am walking through installing Native Oberon 2.3.7\n(aka ETH Oberon System 3) on a virtual machine running under\nVirtualBox 6.1. It is a follow up to my 2019 post \n[FreeDOS to Oberon System 3](/blog/2019/07/28/freedos-to-oberon-system-3.html \"Link to old blog post for bringing up Oberon System 3 in VirtualBox 6.0 using FreeDOS 1.2\"). To facilitate the install I will first prepare\nmy virtual machine as a FreeDOS 1.2 box. This simplifies getting the\nvirtual machines' hard disk partitioned and formatted correctly.\nWhen Native Oberon was released back in 1990's most Intel flavored\nmachines shipped with some sort Microsoft OS on them.  I believe\nthat is why the tools and instructions for Native Oberon assume\nyou're installing over or along side a DOS partition.\n\nBuilding our machine\n--------------------\n\nRequirements\n------------\n\n1. Install VirtualBox 6.1 installed on your host computer.\n2. Download and install a minimal FreeDOS 1.2 as a virtual machine\n3. Downloaded a copy of Native Oberon 2.3.7 alpha from SourceForge\n3. Familiarized yourself Oberon's Text User Interface\n4. Boot your FreeDOS virtual machine using the Oberon0.Dsk downloaded\nas part of NativeOberon_2.3.7.tar.gz\n5. Mount \"Oberon0.Dsk\" and start installing Native Oberon\n\nBefore you boot \"Oberon0.Dsk\" on your virtual machine make sure\nyou've looked at some online Oberon documentation. This is important.\nOberon is very different from macOS, Windows, Linux, DOS, CP/M or\nUnix. It is easy to read the instructions and miss important details \nlike how you use the three button mouse, particularly the selections\nand execute actions of text instructions.\n\nVirtual Machine Setup\n---------------------\n\nVirtualBox 6.1 can be obtained from [virtualbox.org](https://www.virtualbox.org/).  This involves downloading the installer for your particular host\noperating system (e.g. Linux, macOS or Windows) and follow the instructions\non the VirtualBox website to complete the installation.\n\nOnce VirtualBox is installed, launch VirtualBox.\n\nClick the \"New\" button and name your machine (e.g. \"Native Oberon 2.3.7 Alpha\") and choose type of \"Other\" and version \"DOS\". Click continue. I accepted\nthe default memory size of 32 MB. This is plenty for Oberon.  I clicked on create disk and accepted the default VDI (VirtualBox Disk Image). Press continue. I think accepted \"Dynamically allocated\", press continue. I chose a \"disk size\" of 100.00 MB. Oberon System is tiny. Press create button.\n\nMake sure your new machine is highlight on the left side of the VirtualBox\nmanagement panel. Click on Settings button, it looks like a gear towards\nthe top. Click \"Display\" on the model dialog and bump the Video Memory\nup to 128 MB. I also clicked Enable 3D Acceleration (though I don't think\nOberon uses this).  Before clicking OK click on the Network icon in the \nmodal dialog box. Change \"NAT\" to \"Bridged Adapter\". Now click \"OK\" to\nclose the modal dialog box. \n\nYour VirtualBox is now ready, before pressing \"Start\" we need\nto install FreeDOS 1.2.\n\nMake a FreeDOS 1.2 machine\n---------------------------\n\nDownload the [FD12CD.iso](https://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/1.2/FD12CD.iso) file from the \n[FreeDOS project](https://freedos.org/download).\n\n\"Insert\" the \"FD12CD.ISO\" file into our VirtualBox 6.1\nCD-ROM drive. Go to the VirtualBox management panel. \nIn the area that summarizes storage click the word \"Empty\"\nin the line with \"[Optical Drive]\". Find the \"FD12CD.ISO\"\nyou downloaded and select it.\n\nNow press the green \"Start\" arrow in the VirtualBox management\npanel. This should start your virtual machine and it will boot\nusing the CD-ROM drive.\n\nThis will display a welcome screen with installation options.\nPress your \"tab\" key once. This should cause a boot string to be\ndisplayed. Type a space and then type the word \"raw\" (without quotes).\nPress enter. Next select the language you want to install with\n(e.g. English). Choose \"Yes - Continue with installation\" on the\nnext prompt. You should then be given a dialog box that\nindicates \"Drive C: does not appear to be partitioned.\", select\n\"Yes - Partition drive C:\". Then that completes press\n\"Yes - Please reboot now\". \n\nThis will cause the machine to reboot and you will be faced with\nthe \"Welcome to FreeDOS 1.2\" screen once again. Press the \"tab\"\nAdd a space and type \"raw\" to the boot string as before.\nSelect the language again then select \"Yes - Continue with \ninstallation\". The screen should now say something like\n\"Drive C: does not appear to be formatted\", select \n\"Yes - Please erase and format drive C:\".\n\nWhen done it'll gather some info on the system and ask you\nwhich keyboard you're using. Pick yours (e.g. \"US English (Default)\").\nIt will then give you a choice of what to install. Since we're\ngoing to overwrite this when we install Oberon just select\nthe base package, then select \"Yes - Please install FreeDOS 1.2\"\n\nBefore selecting \"Yes - Please reboot now\" when the install is\nfinished you want to \"eject\" your FD12CD.ISO from the virtual\nCD-ROM drive.  Switch back to your VirtualBox management panel.\nClick the text that says \"FD12CD.iso\" and select \"remove disk\nfrom virtual drive\" in the popup menu. Switch back to your\nVirtual machine and select \"Yes - Please reboot now\"\n\nIf all goes well the machine will boot into FreeDOS 1.2. When\nyou see the \"C:>\" prompt type \"shutdown\" (without the quotes)\nand press enter. We're now ready to start installing Native\nOberon 2.3.7.\n\n\nNative Oberon 2.3.7\n-------------------\n\nNative Oberon used to be hosted at ETH where Oberon and the Oberon\nSystem was first developed as a research and instructional project.\nUnfortunately this seems to no longer be supported by ETH. Prof. Wirth\nhas long been retired now and they no longer choose to use such a \nuseful language or Operating System. \n\nSourceForge has a mirror of the original sources and some of the\nremaining community has put at a \"new\" release of 2.3.7 Alpha \nbringing Native Oberon a little closer to the present. It's this\nversion we'll use. You can read more at the [SourceForge](https://sourceforge.net/projects/nativeoberon/) as well as at the [Oberon Wikibook](https://en.wikibooks.org/wiki/Oberon). ETH also still maintains an email\nlist for Oberon and it is active. It can be found at\nhttps://lists.inf.ethz.ch/mailman/listinfo/oberon. I recommend\nbrowsing the archives of the Email list if you run into problems.\nI've found very helpful information there and the people on the\nlist seem happy to answer a novices question.\n\nWe are going to be downloading files from the Native Oberon Project's\nFiles page at SourceForge.\n\n> https://sourceforge.net/projects/nativeoberon/files/nativeoberon/\n\nIn the Files page download the instructions \n[NativeOberonInstall.pdf](https://sourceforge.net/projects/nativeoberon/files/NativeOberonInstall.pdf/download) \nor or the text version. This document by Pieter Muller (May 1999) explains\nthe installation process. It is good for its overview though I found\nthe actual process simpler than what was described for May 1999. \n\nOn the Files page you'll also see a green button to \"Download Latest Version\", NativeOberon_2.3.7.tar.gz. Click the button and download it.\n\nThe NativeOberon_2.3.7.tar.gz contains the files we'll need to run\nNativeOberon on our VirtualBox. Ungzip and untar the file into\na location that is convenient for you. I put mine\nin `src/NativeOberon-2.3.7` and I had downloaded the file into my\nhome directory's \"Downloads\" folder. \n\n```shell\n    mkdir -p src/NativeOberon-2.3.7\n    cd src/NativeObeorn-2.3.7\n    tar zxvf ~/Downloads/NativeOberon_2.3.7.tar.gz\n```\n\nYou now have the software ready to proceed in installing the system\nin VirtualBox.\n\nNativeOberon in a VirtualBox\n----------------------------\n\nGo back to your VirtualBox management panel. We need to place\nhe boot disk image in the virtual floppy drive. In the files\nwe unpacked (i.e. ungzip and untar) there is a file named\n\"Oberon0.Dsk\".  We want to mount that in the virtual floppy drive.\nClick on the word \"Empty\" next to \"Floppy Device 0:\" in the management\npanel. You are then given a modal dialog box and we want to select \n\"Choose a disk file\". You can then find the files you save and \nselect \"Oberon0.Dsk\". \n\nBooting with Oberon0.Dsk\n------------------------\n\nWe can now click \"Start\" button at the top of the VirtualBox management\npanel. This will boot the virtual machine using \"Oberon0.Dsk\". Oberon\nitself loads completely into memory. \n\nYou now have a running Oberon System but we need to install it\non the virtual hard drive. Fortunately our running system comes with\nbuilt in instructions.  It is here that people how haven't \nused Oberon before are going to run into trouble.\n\nOberon System uses all three buttons of a three button mouse. On\nmost mice I've encountered to day there are two buttons and a\nscroll wheel. The scroll wheel is click able and functions like\nthe middle button on an Oberon mouse.\n\nThe left mount button sets the pointer, the middle button (our\nscroll wheel if your mouse is like mine) is used to execute\ncommands and the right mouse button is used to select text.\nIn our installation instructions displayed on our virtual \nmachine we generally be middle clicking the blue colored text. \n\nIn Native Oberon all text is potentially actionable.  Unlike in\nUnix where you type a command press enter then have to retype\n(or use the command history) to execute the next command we're\ngoing to click on the text and sometimes select text to execute\ncommands.  Before we proceed I highly recommend readying\nand trying a tutorial out before attempting to install Oberon\non your virtual hard drive. There is an [Oberon System 3 - Main Tutorial](https://web.archive.org/web/20171226183816/http://www.ethoberon.ethz.ch/ethoberon/tutorial/) available at the Internet Archive's Wayback machine.\n\nInstalling to our Virtual Hard disk\n----------------------------------\n\nAlong the right side (in the system track) is the text \"Edit.Open Introduction.Text\". Click with your middle button (scroll wheel on my\nmouse) and this will open the text in the \"Edit\" track on the left\nside.  Read this text if you haven't before. Scrolling through\nthe text is a little different than the scroll bars on macOS, Windows,\nX Windows. They are on the left side and the middle mouse button\nsets the scroll position. The left button pages down, the right\npages up.  You can close the \"Introduction.Text\" windows by \nmiddle clicking \"System.Close\" in the upper menu bar.\n\nReview step 1.\n--------------\n\nWe need to configure the hard drive by middle clicking on\n\"Config.Desk Standard ATA/EIDE\"[^1]. In the console viewer above\nyou should see something like\n\n[^1]: This blue text makes it clear the command is actionable, like a link in the web browser. But the actual text is the command not the color.\n\n```\nDisk: Standard ATA/EIDE\nStatic BootLinker for OM Object Files / prk\n linking Native.Bin 255388\n```\n\nReview step 2.\n--------------\n\nMiddle click on \"Edit.Open InstallFiles.Tool\".  A \"Tool\" file\nis like a text file but usually contains instructions and\na sorta menu or recipe of commands.  In fact our instructions\nin the lower viewer of the system track is a \"Tool\" file called\n\"Install.Tool\".  Using \"Edit.Open\" to open the tool or text file\nopens a viewer on the left track, the edit track. If you had\nclicked on \"System.Open Install.Tool\" it would open a viewer\non the right, or systems track. In either track by default\nthe viewers will tile (not overlap).  If you want to close\na view you can click on \"System.Close\" in the viewer's menu\nbar. Now open our InstallFiles.Tool in the edit track.\n\nInstallFiles.Tool\n-----------------\n\nWe now are going to prepare our virtual hard drive. Like\nour \"Install.Tool\" text we have a series of instructions\nwhich commands we can click on (the ones in blue).\n\nMiddle click on \"Partitions.Show ~\". This will open a pain\nshowing the partition information. You should see something\nlike\n\n```\nDisk: Diskette0, GetSize: no media, removable\n\nDisk: IDE0, 99MB, VBOX HARDDISK\nIDE0#00        99MB  --- (Whole disk)\nIDE0#01        99MB  --- (Free)\n\nDisk: IDE2, GetSize: no media, removable, VBOX CD-ROM\n```\n\nThis tells us we have three drives in our VirtualBox\nvisible to Oberon.  The first is the floppy drive.\nIt shows \"no media\". That might seem odd but when you\nread the \"Oberon0.Dsk\" it read that into memory and the\nwhole OS is not running in memory, not from disk! While\nthe disk is still \"in the drive\" as far as VirtualBox\nis concerned it isn't \"mounted\" from the point of view of\nthe operating system.\n\nThe second disk section describes our virtual hard drive.\nThe third describes the virtual CD-ROM drive.\n\nWe're interested in using the disk \"IDE0\" with the\ndevice number of \"01\", we express that as \"IDE0#01\". \n\nIn the \"Partitions.Text\" viewer where we see the\npartitions information we can type the command\ndescribed in \"InstallFiles.Tool\"\n\n```\nPartitions.ChangeType IDE0#01 6 76 ~\n```\n\nWe then middle mouse click on line we just type. This\nshould produce output in the \"System.Log\" view in the\nupper right of the screen that looks like\n\n```\nIDE0#01 changed to type 76\n```\n\nI had to do a modified version of step 3 of \"InstallFiles.Tool\"\nchoosing option \"b\".\n\nIn the output of \"Partitions.show ~\" (i.e. the Partitions.Text\nviewer) want to middle click on the \"I\" of \"IDE0#01\".\nThen right mouse button select \"IDE0#01\". \n\nFrom 3a in the \"InstallFiles.Tool\" viewer middle mouse button\nclick on \"Partitions.Format ↑\". This should result in \nthe \"System.Log\" viewer showing \n\n```\nIDE0#01 format successful\n```\n\nAfter formatting the drive I was able to complete step 3b by\nmiddle clicking the commands as provided in the \"InstallFiles.Tool\"\n\n> NOTE: you may need to scroll that window to see all of step 3\n\nMiddle click on \"Partitions.UpdateBootFile ↑\" \nThe \"Systems.Log\" viewer should show\n\n```\nIDE#00 update successful\n```\n\nMiddle click on \"FilesSystem.Mount DST AosFS ↑\" in 3b. The\n\"System.Log\" viewer should show\n\n```\nDST: mounted\n```\n\nWe are ready for Step 4. This command does the brunt of the\nwork of coping things over. The command \"Configuration.DoCommands\"\ntake a list of Oberon commands and executes them one after the\nother. Middle Mouse click on \"Configuration.DoCommands\".\nThe \"System.Log\" viewer will show many messages that are\na result of each command taken. Make sure there are no errors.\nThe last series of commands renamed files so you should see\nsomething like\n\n```\nSystem.RenameFiles\nDST:Rel.Obeorn.Text => DST:Oberon.Text renaming\nDST:Rel.Network.Tool => DST:Network.Tool renaming\nDST:Rel.DOS.Tool => DST:DOS.Tool renaming\n```\n\nFor step 5 of \"InstallFiles.Tool\" we can close our \"InstallFiles.Tool\"\nviewer by middle clicking on \"System.Close\" in the menu bar. You can\nalso close the \"Partitions.Text\" viewer using its menu bar and\nmiddle clicking \"System.Close\".\n\nRight now we've formatted our hard drive and copied a bunch of \nfiles too it. We still need to configuration our system before\nit is self hosting.\n\nIn the \"Install.Tool\" viewer we want to open our \"Configure.Tool\".\nMiddle click on the \"Edit.Open Configure.Tool\".\n\nConfiguring our Oberon System\n-------------------------------\n\nThe configuration tool breaks configuration into a series of\nparts. First part is configure the display in Part two\nwe make the hard disk bootable.\n\nTo configure out display we want to middle click on the blue text in\n\"Config.DetectVesa (BIOS cal might hang some systems!)\".\nYou will be presented with a list of screen resolutions. I middle\nclicked the blue text in \"Config.Vesa 00000147H 1600 * 1200 * 32\".\nIn the \"System.Log\" viewer this showed\n\n```\nVesa mode 00000147H\n```\n\n> NOTE: You will likely need to scroll down the page using the scroll bar\n\nIn part two we need to decide how we want to boot Oberon. In our case\nI recommend Option 2, boot Oberon directly (non-FAT hosted). Middle\nclick the blue text \"Config.BootParition menu ~\".\nThe \"System.Log\" viewer should output\n\n```\nIDE0#01 config written\n```\n\nMiddle click the blue text \"Partitions.Show ~\". Like in \n\"InstallFiles.Tool\" this will open a new \"Partitions.Text\" \nviewer with content like\n\n```\nDisk: Diskette0, GetSize: no media, removable\n\nDisk: IDE0, 99MB, VBOX HARDDISK\nIDE0#00       99MB  --- (Whole disk)\nIDE0#01       99MB   76 * Native Oberon, Aos\n\nDisk: IDE2, GetSize: no media, removable, VBOX CD-ROM\n```\n\nUsing your right mouse button select \"IDE0#01\" then in the\n\"Configure.Tool\" viewer middle click the blue text\n\"Partitions.Activate ↑\". The \"System.Log\" viewer should\nshow\n\n```\nIDE0#01 already active\n```\n\nWe don't have a partition to deactivate so we can skip the last\nstep of option 2. This is a good place to \"eject\" our \nfloppy disk \"Oberon0.Dsk\" before we \"System.Reboot\".\n\nTo eject the disk click on \"Oberon0.Dsk\" in the VirtualBox\nmanager panel. The should then change the text to \"Empty\".\n\nFinally we're ready to move to the last step in \"Configure.Tool\".\nScroll down and find \"System.Reboot\". \nMiddle click on the blue text \"System.Reboot\". At this point\nthe virtualbox should reboot from the virtual hard drive.\nThis reboot will take a little longer than the floppy boot\nand the screen size of the virtualbox will be large based on the\nsettings you picked early. You have a minimal working Oberon\nSystem 3. Now to install some more programs and flesh the system out.\n\nInstall some programs\n---------------------\n\nFirst we need to get the zip files provided in \nNativeOberon_2.3.7.tar.gz on to the hard drive.  \nHistorically these were done via 1.44 MB floppy disks.\nWe're going to make it easier. Native Oberon 2.3.7 can\nread an ISO formatted CD-ROM. \n\nMaking our virtual CD-ROM\n-------------------------\n\nUnder Ubuntu 20.04.2 LTS machine creating a ISO image\nis one command. Below is I am going to create an ISO \nimage of the directory \"NativeOberon-2.3.7\"\nand save the image as \"NativeOberon-2.3.7.iso\".\n\n```shell\n    mkisofs -J --iso-level 3 \\\n        -o NativeOberon-2.3.7.iso NativeOberon-2.3.7\n```\n\nThe `-J` says to use the Joliet extensions, the `--iso-level`\nsets the level of ISO support, in this case to 3. See\nthe manpage for `mkisofs` for details.\n\nOn macOS this involves two commands. First use\nthe \"Disk Utility\" to create an image of the folder\nwhere you unpacked NativeOberon_2.3.7.tar.gz.\nThis will result in a \".dmg\" or disk image file common\non macOS.  Next we need to convert this to an ISO\nformatted image file.  For that we use a command line\nmacOS tool called `hdiutil` to convert the disk\nimage to an ISO format. In the process you will create\nthe ISO file but it will have the extension of \".cdr\".\nYou can rename (i.e. mv) that file so it has a \".iso\"\nextension. This is suitable to mount in VirtualBox's \nvirtual CD-ROM drive.\n\n```shell\n    hdiutil convert NativeOberon-2.3.7.dmg -format UDTO -o NativeOberon-2.3.7.iso\n    mv NativeOberon-2.3.7.iso.cdr NativeOberon-2.3.7.iso\n```\n\nGo to the VirtualBox 6.1 management panel and mount the\nISO image file you created. Now we're ready to return\nto our Native Oberon virtual machine.\n\nInstalling from an ISO CD-ROM\n-----------------------------\n\nI suggest create the following as it's own tool text.\nBut if you want you can also type in the commands and\nexecute one by one.\n\n```\nThese are the instructions from installing the Native\nOberon 2.3.7 zip archive files. Steps:\n\n1. See what the CD-ROM mount point by reviewing the partitions\n\n    Paritions.Show ~\n\nOn my virtual machine the second disk is IDE2 and that\nis where we'll find the CD-ROM.\n\n2. Mount the ISO image as CD\n\n    FileSystem.Mount CD ISOFS IDE2 ~\n\n3. Check to see what files are on the CD-ROM\n\n    System.Directory CD:* ~\n\n4. Copy the files from the CD-ROM to the harddisk\n\n    System.CopyFiles\n        CD:Apps1.zip => Apps1.zip\n        CD:Apps2.zip => Apps2.zip\n        CD:Docu.zip => Docu.zip\n        CD:Gadgets.zip => Gadgets.zip\n        CD:Pr3Fonts.zip => Pr3Fonts.zip\n        CD:Source1.zip => Source1.zip\n        CD:Source2.zip => Source2.zip\n        CD:Source3.zip => Source3.zip\n        ~\n\n5. Unzip all our archives using the ZipTool.\n\n    ZipTool.ExtractAll \\o \\p SYS:\n        Gadgets.zip Docu.zip Apps1.zip Apps2.zip\n        Pr3Fonts.zip Pr6Fonts.zip\n        Source1.zip Source2.zip Source3.zip\n        ~\n\n```\n\nYou should now have a full installed Native Oberon 2.3.7\nsystem running under VirtualBox 6.1. Enjoy your explorations.\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2021, R. S. Doiel",
        "date": "2021-03-17",
        "keywords": [
          "FreeDOS 1.2",
          "VirtualBox 6.1",
          "Oberon System 3",
          "Native Oberon"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "ETH Oberon System 3 on VirtualBox 6.1"
      },
      "url": "posts/2021/03/17/NativeOberon-VirtualBox.json"
    },
    {
      "content": "\n\nA2 Oberon on VirtualBox 6.1\n===========================\n\nBy R. S. Doiel, 2021-04-02\n\nThis is a short article documenting how I install A2 Oberon\nin VirtualBox using the [FreeDOS 1.2](https://freedos.org),\nthe A2 [ISO](https://sourceforge.net/projects/a2oberon/files/) cd image and [VirtualBox 6.1](https://virtualbox.org).\n\nBasic Approach\n--------------\n\n1. Download the ISO images for FreeDOS and A2\n2. Create a new Virtual Machine\n3. Install FreeDOS 1.2 (Base install) in the virtual machine\n4. Install A2 from the ISO image over the FreeDOS installation\n\nFrom working with Native Oberon 2.3.7 I've found it very helpful\nto have a FreeDOS 1.2. installed in the Virtual machine first. \nI suspect the reason I have had better luck taking this approach\nis based on assumptions about the virtual hard disk being setup\nwith an existing known formatted, boot-able partition. In essence\nmaking our Virtualbox look like a fresh out of the box vintage PC.\n\nDownload the ISO Images for FreeDOS and A2\n------------------------------------------\n\nYou'll find FreeDOS 1.2 installation ISO image at \n[FreeDos.org](http://freedos.org/download/). Download it\nwhere you can easily find it from the VirtualBox manager.\n\nYou'll find the A2 Oberon ISO image at [SourceForge](https://sourceforge.net/projects/a2oberon/files/) in the A2 Files section. There is a green download\nbutton you can click and it'll take you to a downloads page and download\nthe ISO.  Once again move it to where you can find it from \nthe VirtualBox manager easily.\n\n\nCreate a new Virtual Machine\n----------------------------\n\nFire up VirtualBox.  Click the \"New\" icon. Given your machine\na descriptive name and set the Type to \"Other\" and version to \"DOS\".\nClick Next.\n\nOn the Memory Size panel select the memory size you want. I picked\n2048 MB. A2 like other Oberon are frugal in resource consumption.\nClick Next.\n\nOn the Hard Disk panel I accepted the default \"Create a virtual hard disk now\"\nand clicked \"Create\" button at the bottom of the panel.\n\nI accepted the default \"VDI (VirtualBox Disk Image)\" and clicked\nNext.\n\nI accepted \"Dynamically allocated\" and clicked Next.\n\nI accepted the default name and 500 MB disk size and clicked\nCreate.\n\nThis returned me to the main VirtualBox manager panel. I click on \nthe \"Settings\" icon. This opens the Settings panel. I Clicked on the\n\"Display\" label in the left side of the panel. On the \"Screen\" tab\nI increased the Video Memory from 6 MB to 128 MB.  I also checked\nthe \"Enable 3D Acceleration\" box.\n\nNext I clicked  \"Network\" label in the left side of the panel.\nI changed the Attached to from \"NAT\" to \"Bridged Adapter\"\nbefore clicking \"OK\". This should return you to the manager panel.\n\nScroll down the description of your virtual machine so that the\n\"Storage\" section is visible. You should see \"IDE Secondary Device 0: \n[Optical Drive] Empty\". Click the the words \"Optical Drive\".\nYou be given a context menu, click on \"Choose a Disk file\". Navigate\nto where you saved the FressDOS ISO (e.g. FD12CD.iso).\nClick Open. This should return you to the manager panel and you\nshould see the \"FD12CD.iso\" file listed.\n\nInstall FreeDOS 1.2\n-------------------\n\nClick the \"Start\" button.  This should boot the machine. By\ndefault the search order for booting is floppy drive,\nCD-ROM drive then hard disk.  Since we have the FD12CD.iso\nmounted in the cd ROM drive it'll boot using it.\n\nWhen you see the \"Welcome\" screen press the tab key.\nYou should see a line describing the image it'll boot.  Click\ninto the Virtual machine's window and press the space bar\nthen type \"raw\" (without the quotes). Press the enter key.\n\nThis should return you to the install process, select your\nlanguage (e.g. English for me). The select \"Yes - Continue with the\ninstallations\". On the next screen select \"Yes - Partition drive C:\".\nThen select \"Yes - Please reboot now\". This will reboot the\nmachine and bring you back to the Welcome page. Once again\npress the tab key, press the space bar and type in \"raw\"\n(without the quotes).\n\nAs before select your language and select \"Yes - Continue with\nthe installation\". This time you should see the option \n\"Yes - Please erase and format drive C:\", select it. \nAfter formatting it ask you to select your keyboard type.\nIt will then give you the option of installing base or full\ninstallations (with our without source).  I suggest only\nselecting \"Base packages only\".  \n\nOn the next screen select \"Yes - Please install FreeDOS 1.2\".\nAfter it finishes you can select \"Yes - Please reboot now\".\nWhen the machine reboots you'll see the welcome screen again\nbut rather than press tab, select \"Boot system from hard disk\".\nPress enter to select the extended memory manager and you\nshould now be at the DOS \"C:>\" prompt.\n\nSwitch back to the VirtualBox manager panel and click on\n\"Optical Drive\" and click \"Remove disk from virtual drive\".\n\nInstalling A2 Oberon\n--------------------\n\nWe now should have a Virtual Machine ready to receive A2.\nClick the \"Optical Drive\" again and select the A2 ISO\nimage you downloaded from SourceForge previously.\nYour optical drive should show the full filename of\nthe ISO image, e.g. \"A2_Rev-6498_serial-trace.iso\"\nWe can now click the \"Start\" icon in the manager panel.\n\nA2 comes up running like a \"live CD\".  It's the full A2\nso you can play around with it if you want but we're going\nto install it on our virtual hard drive. At the bottom of the\nA2 desktop you should see a panel of buttons. Click the button\nlabeled \"System\". This will change the panel buttons below it.\nIn the lower panel you should see \"Installer\", click it. This\nwill bring up a \"Welcome to Oberon\" installer window. You will\nsee two presentations of drives. The upper one will be the hard\ndrive where we want to install A2 and the lower one is the \nvirtual CD ROM we're running. Click on the bar for the hard disk.\nBefore click the drive bar was red. After clicking it was yellow.\nThe text label above the var says, \"IDE0 (VBOX HARD DISK), Size \n500 MB, Open count 0\".\n\nIn the lower part of the panel click \"Quickinstall\", then\nanswer Yes to the model dialog that pops up. After a few moments \nA2 should finish installing itself on the virtual hard disk.  The lower\npanel's buttons will include one labeled \"Done\", press it. This\nwill close the installer window.\n\nAt the bottom of the desktop you should still see the System\npanel buttons. There is a red one labeled \"Shutdown\". Press it.\n\nThe virtual machine's screen should go black. On my machine\nI press the right control key (the host key) to release my\nmouse and keyboard from the virtual machine. Close the window\nand when it select \"Power of the machine\" in when VirtualBox\nprompts how to shut it down.\n\nLike with the FD12CD.iso we want to unmount our A2 installation\nCD ROM. Click on the \"Optical Drive\" in the manager panel\nand choose \"Remove disk from virtual Drive\". \n\nYou can now start the machine again and start exploring A2.\nI recommend looking at the [Oberon Wikibook](https://en.wikibooks.org/wiki/Oberon#A2_and_UnixAOS)\n for details about how to use A2 and ideas of what to explore.\n\nOne nice feature of A2 is it includes a full \"NativeOberon\"\nor ETH Oberon as an A2 Application.\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2021, R. S. Doiel",
        "date": "2021-04-02",
        "keywords": [
          "FreeDOS 1.2",
          "VirtualBox 6.1",
          "A2 Oberon"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "A2 Oberon on VirtualBox 6.1"
      },
      "url": "posts/2021/04/02/A2-Oberon-on-VirtualBox-6.1.json"
    },
    {
      "content": "\nUpdating Schema in SQLite3\n==========================\n\nBy R. S. Doiel, 2020-04-16\n\n[SQLite3](https://sqlite.org/docs.html) is a handy little\ndatabase as single file tool.  You can interact with the file\nthrough largely standard SQL commands and embed it easily into\napplications via the C libraries that the project supports.\nIt is also available from various popular scripting languages\nlike Python, PHP, and Lua. One of the things I occasionally\nneed to do and always seems to forget it how to is modify a\ntable schema where I need to remove a column[^1]. So here are\nsome of the basics do I can quickly find them later and avoid\nreading various articles tutorials because the search engines\ndoesn't return the page in the SQLite documentation.\n\n[^1]: The SQL `ALTER TABLE table_name DROP COLUMN column_name` does not work in SQLite3\n\nIn the next sections I'll be modeling a simple person object\nwith a id, uname, display_name, role and updated fields.\n\nCreating a person table\n-----------------------\n\n\n```sql\n\nCREATE TABLE IF NOT EXISTS \"person\" \n        (\"id\" INTEGER NOT NULL PRIMARY KEY, \n        \"uname\" VARCHAR(255) NOT NULL, \n        \"role\" VARCHAR(255) NOT NULL, \n        \"display_name\" VARCHAR(255) NOT NULL, \n        \"updated\" INTEGER NOT NULL);\n\n```\n\nAdding a column\n---------------\n\nWe will create a *junk* column which we will remove later.\n\n```sql\n\n.schema person\nALTER TABLE person ADD COLUMN junk VARCHAR(255) NOT NULL;\n.schema person\n\n```\n\nDropping a column\n-----------------\n\nTo drop a column in SQLite you need to actually create\na new table, migrate the data into it then drop the old table\nand finally rename it. It is best to wrap this in a transaction.\n\n```sql\n\nBEGIN TRANSACTION;\n    CREATE TABLE IF NOT EXISTS \"person_new\" \n           (\"id\" INTEGER NOT NULL PRIMARY KEY, \n           \"uname\" VARCHAR(255) NOT NULL, \n           \"role\" VARCHAR(255) NOT NULL, \n           \"display_name\" VARCHAR(255) NOT NULL, \n           \"updated\" INTEGER NOT NULL);\n    INSERT INTO person_new\n           SELECT id, uname, role, display_name, updated\n           FROM person;\n    DROP TABLE person;\n    ALTER TABLE person_new RENAME TO person;\nCOMMIT;\n\n```\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2021, R. S. Doiel",
        "date": "2021-04-16",
        "keywords": [
          "SQLite",
          "SQL",
          "database"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "number": 1,
        "series": "SQL Reflections",
        "title": "Updating Schema in SQLite3"
      },
      "url": "posts/2021/04/16/Updating-Schema-in-SQLite3.json"
    },
    {
      "content": "\nOfront on Raspberry Pi OS\n=========================\n\nBy R. S. Doiel, 2021-04-25\n\nThis post is about getting Ofront[^1] up and running on Raspberry Pi OS[^2].\nOfront provides a Oberon-2 to C transpiler as well as a Oberon V4[^3]\ndevelopment environment. There are additional clever tools like `ocat`\nthat are helpful working with the differences in text file formats between\nOberon System 3, V4 and POSIX. The V4 implementation sits nicely on top of\nPOSIX with minimal compromises that distract from the Oberon experience.\n\n[^1]: Ofront was developed by Joseph Templ, see http://www.software-templ.com/ \n\n[^2]: see https://www.raspberrypi.org/software/ (a 32 bit Debian based Linux for both i386 and ARM)\n\n[^3]: see https://ssw.jku.at/Research/Projects/Oberon.html\n\n\nAn Initial Impression\n---------------------\n\nI first heard of running Ofront/V4 via the ETH Oberon Mail list[^4].\nWhat caught my eye is the reference to running on Raspberry Pi. Prof. Templ \nprovides two flavors of Ofront. One targets the Raspberry Pi OS on ARM\nhardware the second Linux on i386. The Raspberry Pi OS for Intel is an\ni386 variant. I downloaded the tar file, unpacked it and immediately ran\nthe \"oberon.bash\" script provided eager to see a V4 environment. It\nrenders but the fonts rendered terribly slowly. I should have read the\ndocumentation first!  Prof. Templ provides man pages for the tools that\ncome with Ofront including the oberon application. Reading the\nman page for oberon quickly addresses the point of slow font rendering.\nIt also discusses how to convert Oberon fonts to X Windows bitmap fonts.\nIf you use the X Window fonts the V4 environment is very snappy. It does\nrequire that X Windows knows where to find the fonts used in V4. That is\ndone by appending the V4 converted fonts to the X Window font map. I had\ninstalled the Ofront system in my home directory so the command was\n\n```bash\nxset +fp $HOME/ofront_1.4/fonts\n```\n\nRunning \"oberon.bash\" after that immediately improved things. Since I didn't\nneed the Oberon fonts outside of V4 I added the `xset` command to the\n\"oberon.bash\" script just before it invokes the `oberon` command.\n\n[^4]: See Hans Klaver's message: http://lists.inf.ethz.ch/pipermail/oberon/2021/015514.html \n\n\nGoals in my setup\n-----------------\n\nI had three goals in wanting to play with Ofront and running the V4\nOberon.\n\n1. I wanted to work in an Oberon System environment\n2. I need a system meets my vision requirements (e.g. larger font size)\n3. I wanted to understand the Linz/V4 variation in Oberon's evolution\n\nOfront address all three once you get the X Window side setup correctly.\n\nSetting up Ofront and V4\n------------------------\n\nFirst we need to boot up a Raspberry Pi OS device (or an i386 Linux with X11).\nWe need to retrieve the software from Joseph Templ's [software-templ.com](https://software-templ.com).\nTwo 1.4 versions are available precompiled. The first is for ARM running\nRaspberry Pi OS and the second is for generic Linux i386 with X11. I initially\ntested this on an old laptop where running the i386 version of Raspberry Pi OS. \n\nWhat we need\n------------\n\nThe following software is usually already installed on your \nRaspberry Pi OS.\n\n+ curl to download the files[^5]\n+ gunzip to uncompressed the archive file\n+ tar to unpack the archive file\n\n[^5]: If not try `sudo apt install curl` from the command line\n\nWhat we do\n----------\n\n1. Download the appropriate tar file\n    a. ARM: http://www.software-templ.com/shareware/ofront-1.4_raspbian-Pi3.tar.gz\n    b. Intel i386: http://www.software-templ.com/shareware/ofront-1.4_linux-386-3.2.tar.gz\n2. Make sure we can read the compressed archive file\n3. Gunzip and untar the file\n\nHere's the commands I used for the Raspberry Pi hardware.\n\n```bash\n    curl -O http://www.software-templ.com/shareware/ofront-1.4_raspbian-Pi3.tar.gz\n    tar ztvf ofront-1.4_raspbian-Pi3.tar.gz\n    tar zxvf ofront-1.4_raspbian-Pi3.tar.gz\n```\n\nHere's the commands I used for Raspberry Pi OS on Intel\n\n```bash\n    curl -O http://www.software-templ.com/shareware/ofront-1.4_linux-386-3.2.tar.gz\n    tar ztvf ofront-1.4_linux-386-3.2.tar.gz\n    tar zxvf ofront-1.4_linux-386-3.2.tar.gz\n```\n\nAt this point there should be an `ofront_1.4` directory\nwhere you gunziped and untared the archive file. At this point\nyou can test to make sure everything runs by doing the following\n(remember the font rendering with be very slow).\n\n```\n    cd ofront_1.4\n    ./oberon.bash\n```\n\nYou can exit the V4 environment by closing the window or typing\n`System.Quit ~` in an Oberon viewer and middle clicking with your\nmouse[^6].\n\n[^6]: Oberon Systems expect a three button mouse, with a two button mouse you hold the alt key and press the left button. Note that command in Oberon are case sensitive.\n\nThe reason the system is so slow is that X is having to write bitmaps\na pixel at a time in the window holding our Oberon System. What we\nwant X to do is render an X Window font.  Joseph as provided us with\nthe Oberon fonts already converted for X! We just need to let the\nX Window system know where to look.\n\nWhat we need\n------------\n\n+ an editor for editing `oberon.bash`\n\nWhat we'll do\n-------------\n\n1. Exit the running Oberon System using `System.Quit ~` or just close the window\n2. Edit `oberon.bash` to speed up font rendering\n3. Try `oberon.bash` again and see the speed bump\n\nWith your favorite editor add the `xset` line before the `oberon`\ncommand is invoked. My \"oberon.bash\" looks like this.\n\n```\n#!/bin/bash\n\nif [ -z \"$OFRONT_HOME\" ]; then\n  export OFRONT_HOME=.\n  echo \"OFRONT_HOME set to .\"\nfi\nexport OBERON=.:$OFRONT_HOME/V4_ofront:$OFRONT_HOME/V4:$OFRONT_HOME/fonts\nexport LD_LIBRARY_PATH=.:$OFRONT_HOME/lib\nexport PATH=.:$OFRONT_HOME/bin:$PATH\nxset +fp $HOME/ofront_1.4/fonts\n$OFRONT_HOME/bin/oberon -f ./V4/Big.Map -u 8000 -c $* &\n```\n\nThe `xset` command adds the provided X fonts to X Window. This\nresults in a huge speedup of rendering. I also add the options\nfor using the largest font sizes via a font map file, \"V4/Big.Map\"\nand set the display units to 8000. Your vision or monitor may\nnot need this so you want to only add the line to include the\nX fonts needed by Oberon.\n\nNow re-launch Oberon using the updated \"oberon.bash\" and\nsee the improvement.\n\n```\n    vi oberon.bash\n    ./oberon.bash\n```\n\nYou now have a functioning V4 Oberon System to play with and\nexplore.\n\nThere are some additional POSIX environment setup you can\nadd to improve the integration with your Linux setup. These\nare covered in the man pages for the tools that come with Ofront.\nAdditional information is also provided in the Oberon Texts\nand Tools files in the V4 environment. All are worth reading.\n\n\nWhat does this setup provide?\n-----------------------------\n\nAt the point we have V4 available we have a rich development\nand text environment. One which I feel is conducive to both\nwriting in general and programming specifically. You are running\nunder an adapted Oberon System so there are somethings to consider.\n\nThe Oberon V4 file system does support punctuation characters aside\nfrom periods and slashes.  So when I tried to edit a file with hyphens\nin the name Oberon assumed the filename stopped at the first hyphens.\nThe Oberon file systems are typically case sensitive so this can\nbe worked around with letter case. Of course I could modify the V4\nsystem to allow for more letters too. That's the nice thing about\nhaving the source code.\n\nThe second issue if file format.  In Oberon we can embed fonts\nand coloring and that is treated as normal text. End of line\ncharacters are represented as a carriage return. In POSIX environments\nwe have \"plain text\" without specific font directives and we use\na line feed to terminate lines. Fortunately Prof. Templ provided\na program called `ocat`[^7] that makes short work of converting an\nOberon text into a POSIX friendly format. On the Oberon side of things\nit's also easy because Oberon will treat an ASCII file as a text we\nonly need to convert the line endings and in the Ofront implementation\nof V4 it handles the differences in line endings behind the scenes.\n\nIf you create or store a file in the Oberon environment it'll become\nOberon text. If you need to have a plain text version use `ocat`.\nIf you only read POSIX files in the Oberon environment then they remain\nplain text files but V4 takes care of translating the POSIX line ending\nto ones that are displayed nicely in Oberon.\n\n\n[^7]: In the `ofront_1.4` directory run `man man1/ocat.1` to find out more\n\nWhat to explore next?\n---------------------\n\nNow that we have a fast running V4 system we have some choices\nfor development. Joseph Templ has adapted the display for X\nand also the file system so the files are visible from the Unix\nshell.  This is a powerful arrangement. This supports both Oberon\ndevelopment and the use of Oberon language for the development of\nPOSIX friendly programs.  The Ofront collection provides the\n`ofront` an Oberon-2 to C translator, `ocl` is a tool that will\ncombine `ofront` with your C compiler and linker to produce\nprograms and libraries for Linux. There is also `ocat` for\nconverting Oberon texts to POSIX plain text and `showdef` for\nshowing module definitions.  Finally Ofront provides the\n`oberon` command so we have an Oberon System available as a\ndevelopment environment.\n\nOne thing I recommend exploring is Jospeh Templ's GitHub repository.\nThe makefile provided with the GitHub version assuming an existing\ninstallation of ofront. Since we have one we can compile our own copy\nfrom scratch. If you're running i386 you'll want to look at\n`V4_ofront/linix386` for Pi hardware take a look at `V4_ofront/raspbian`.\n\nHere's how I generated a new version on my Pi hardware.\n\n```\n    git clone https://github.com/jtempl/ofront\n    cd ofront/V4_ofront/raspbian\n    make\n    ./oberon.bash\n```\n\nThere is a note in the README of that directory about finding\n`libX11.so` but I did not need the symbolic link suggested. Since the\nfont path was previously adjusted for the original version I downloaded\nfrom Templ's website I didn't need to add the fonts again. If I fork\nTempl's version or GitHub I will probably update the \"oberon.bash\"\nfile included to check to see if the X fonts are available and if not\nadd them via `xset`. That's on a someday maybe list, for now I am\ncontent exploring the system as is.\n\n\nSomeday, Maybe\n--------------\n\nThings that come to mind after initial exploration include--\n\n- Figure out how to make Atkinson-Hyperlegible[^8] available to V4\n- Replace the X11 integration with SDL 2 integration and run under macOS or Windows\n- Exploring porting V4 to run natively Raspberry Pi via Clang cross compilers\n\nNot sure I'll get the time or have the energy to do these things but\nthey are certainly seem feasible with Ofront as it stands now.\n\n[^8]: See https://brailleinstitute.org/freefont\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2021, R. S. Doiel",
        "date": "2021-04-25",
        "keywords": [
          "Oberon",
          "Raspberry Pi OS",
          "Ofront",
          "Mostly Oberon",
          "V4",
          "Linz"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Ofront on Raspberry Pi OS"
      },
      "url": "posts/2021/04/25/Ofront-on-Rasberry-Pi-OS.json"
    }
  ]
}