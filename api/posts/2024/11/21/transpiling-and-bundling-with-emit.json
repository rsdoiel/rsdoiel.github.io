{
  "content": "\n# Transpiling & Bundling with Emit\n\nOne of the nice features of Deno is native TypeScript support.  One of the selling strength though is that the same source can run both server side and browser side.  The challenge is that TypeScript does not have native TypeScript support. This is easy to remedy using Deno's [emit](https://jsr.io/@deno/emit) module.\n\nThe emit module supports to important functions, `transpile` and `bundle`. Both will render your TypeScript as JavaScript in a browser friendly manner. The `transpile` function turns a single TypeScript file into an equivalent JavaScript file. Bundle can do that with a TypeScript and all the files it imports so you have a self contained JavaScript file with everything you need.\n\n<!-- The emit module website shows how to write a short TypeScript program to transpile and bundle.  When you combine that with a Deno task it is trivial to automatically make that happen. -->\n\n\nHere's what my `transpile.ts` looks like.\n\n~~~typescript\nimport { transpile } from \"jsr:@deno/emit\";\nimport * as path from \"jsr:@std/path\";\n\n/* Transpile directory_client.ts to JavaScript and render it to \n   htdocs/js/directory_client.js */\nconst js_path = path.join(\"htdocs\", \"js\");\nconst js_name = path.join(js_path, \"directory_client.js\");\nconst url = new URL(\"./directory_client.ts\", import.meta.url);\nconst result = await transpile(url);\nconst code = await result.get(url.href);\n\nawait Deno.mkdir(js_path, { mode: 0o775, recursive: true });\nDeno.writeTextFile(js_name, code);\n~~~\n\nYou can run that with the following long command line.\n\n~~~shell\ndeno run --allow-import --allow-env --allow-read --allow-write --allow-net transpile.ts\n~~~\n\nOf course you can easily turn this into a [Deno task](https://docs.deno.com/runtime/reference/cli/task_runner/).\n\nIf our `directory_client.ts` file contained other modules you can instead use the `bundle` function.  Here's an example of bundling our `directory_client.ts` saving the result as `htdocs/modules/directory_client.js`.\n\n~~~typescript\n/**\n * bundle.ts is an example of \"bundling\" the type script file directory_client.ts\n * into a module and writing it to htdocs/modules.\n */\nimport { bundle } from \"jsr:@deno/emit\";\n\nconst js_path = path.join(\"htdocs\", \"modules\");\nconst js_name = path.join(js_path, \"directory_client.js\");\nconst result = await bundle(\"./directory_client.ts\");\nconst { code } = result;\nawait Deno.mkdir(js_path, { mode: 0o775, recursive: true });\nawait Deno.writeTextFile(js_name, code);\n~~~\n\nYou can run that with the following long command line.\n\n~~~shell\ndeno run --allow-import --allow-env --allow-read --allow-write --allow-net bundle.ts\n~~~\n\nThe bundle will contain the transpiled TypeScript from `directory_client.ts` but also any modules that `directory_client.ts` relied on. If you don't want to include the imported modules then you can set the value of `recursive` to false.\n",
  "content_ast": {
    "children": [
      {
        "children": [
          {
            "type": "text",
            "value": "Transpiling & Bundling with Emit"
          }
        ],
        "depth": 1,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "One of the nice features of Deno is native TypeScript support.  One of the selling strength though is that the same source can run both server side and browser side.  The challenge is that TypeScript does not have native TypeScript support. This is easy to remedy using Deno's "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "emit"
              }
            ],
            "type": "link",
            "url": "https://jsr.io/@deno/emit"
          },
          {
            "type": "text",
            "value": " module."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The emit module supports to important functions, "
          },
          {
            "type": "inlineCode",
            "value": "transpile"
          },
          {
            "type": "text",
            "value": " and "
          },
          {
            "type": "inlineCode",
            "value": "bundle"
          },
          {
            "type": "text",
            "value": ". Both will render your TypeScript as JavaScript in a browser friendly manner. The "
          },
          {
            "type": "inlineCode",
            "value": "transpile"
          },
          {
            "type": "text",
            "value": " function turns a single TypeScript file into an equivalent JavaScript file. Bundle can do that with a TypeScript and all the files it imports so you have a self contained JavaScript file with everything you need."
          }
        ],
        "type": "paragraph"
      },
      {
        "type": "html",
        "value": "<!-- The emit module website shows how to write a short TypeScript program to transpile and bundle.  When you combine that with a Deno task it is trivial to automatically make that happen. -->"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Here's what my "
          },
          {
            "type": "inlineCode",
            "value": "transpile.ts"
          },
          {
            "type": "text",
            "value": " looks like."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "typescript",
        "type": "code",
        "value": "import { transpile } from \"jsr:@deno/emit\";\nimport * as path from \"jsr:@std/path\";\n\n/* Transpile directory_client.ts to JavaScript and render it to \n   htdocs/js/directory_client.js */\nconst js_path = path.join(\"htdocs\", \"js\");\nconst js_name = path.join(js_path, \"directory_client.js\");\nconst url = new URL(\"./directory_client.ts\", import.meta.url);\nconst result = await transpile(url);\nconst code = await result.get(url.href);\n\nawait Deno.mkdir(js_path, { mode: 0o775, recursive: true });\nDeno.writeTextFile(js_name, code);"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "You can run that with the following long command line."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "shell",
        "type": "code",
        "value": "deno run --allow-import --allow-env --allow-read --allow-write --allow-net transpile.ts"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Of course you can easily turn this into a "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "Deno task"
              }
            ],
            "type": "link",
            "url": "https://docs.deno.com/runtime/reference/cli/task_runner/"
          },
          {
            "type": "text",
            "value": "."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "If our "
          },
          {
            "type": "inlineCode",
            "value": "directory_client.ts"
          },
          {
            "type": "text",
            "value": " file contained other modules you can instead use the "
          },
          {
            "type": "inlineCode",
            "value": "bundle"
          },
          {
            "type": "text",
            "value": " function.  Here's an example of bundling our "
          },
          {
            "type": "inlineCode",
            "value": "directory_client.ts"
          },
          {
            "type": "text",
            "value": " saving the result as "
          },
          {
            "type": "inlineCode",
            "value": "htdocs/modules/directory_client.js"
          },
          {
            "type": "text",
            "value": "."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "typescript",
        "type": "code",
        "value": "/**\n * bundle.ts is an example of \"bundling\" the type script file directory_client.ts\n * into a module and writing it to htdocs/modules.\n */\nimport { bundle } from \"jsr:@deno/emit\";\n\nconst js_path = path.join(\"htdocs\", \"modules\");\nconst js_name = path.join(js_path, \"directory_client.js\");\nconst result = await bundle(\"./directory_client.ts\");\nconst { code } = result;\nawait Deno.mkdir(js_path, { mode: 0o775, recursive: true });\nawait Deno.writeTextFile(js_name, code);"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "You can run that with the following long command line."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "shell",
        "type": "code",
        "value": "deno run --allow-import --allow-env --allow-read --allow-write --allow-net bundle.ts"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The bundle will contain the transpiled TypeScript from "
          },
          {
            "type": "inlineCode",
            "value": "directory_client.ts"
          },
          {
            "type": "text",
            "value": " but also any modules that "
          },
          {
            "type": "inlineCode",
            "value": "directory_client.ts"
          },
          {
            "type": "text",
            "value": " relied on. If you don't want to include the imported modules then you can set the value of "
          },
          {
            "type": "inlineCode",
            "value": "recursive"
          },
          {
            "type": "text",
            "value": " to false."
          }
        ],
        "type": "paragraph"
      }
    ],
    "type": "root"
  },
  "data": {
    "abstract": "A brief discussion of using the Deno emit module to transpile and bundle\nTypeScript.\n",
    "byline": "R. S. Doiel, 2024-11-21",
    "keywords": [
      "Deno",
      "TypeScript",
      "transpile",
      "bundle"
    ],
    "title": "Transpiling & Bundling with Emit"
  }
}