{
  "content": "\n# Transpiling with Deno\n\n[Deno](https://deno.land) is a fun environment to work in for learning TypeScript.  As I have become comfortable writing server side TypeScript code I know I want to also be able to use some modules in JavaScript form browser side. The question is then how to you go from TypeScript to JavaScript easily with getting involved with a bunch-o-npm packages?  Turns the solution in deno is to use the [deno_emit](https://github.com/denoland/deno_emit/blob/main/js/README.md) module.  Let's say I have a TypeScript module called `hithere.ts`. I want to make it available as JavaScript so I can run it in a web browser. How do I use the `deno_emit` module to accomplish that?\n\n- Write a short TypeScript program\n  - include the transpiler module provided with emit\n  - use the transpiler to generate the JavaScript code\n  - output the JavaScript code\n\nHere's what `transpile.ts` might look like:\n\n~~~typescript\n/* Get the transpiler module from deno's emit */\nimport { transpile } from \"https://deno.land/x/emit/mod.ts\";\n\n/* Get the python to my CL.ts as a URL */\nconst url = new URL(\"./hithere.ts\", import.meta.url);\n/* Transpile the code returning a result */\nconst result = await transpile(url);\n\n/* Get the resulting code and write it to standard out */\nconst code = result.get(url.href);\nconsole.log(code);\n~~~\n\nHere's the `hithere.ts` module:\n\n~~~typescript\n/**\n * hithere takes a name and returns a string of \"hi there \", a name and \"!\". If the name is null\n * it returns \"Hello World!\".\n *\n * @param {string | null} name\n * @returns {string}\n */\nfunction hithere(name: string | null): string {\n\tif (name === null) {\n\t\treturn \"Hello World!\";\n\t}\n\treturn `hi there ${name}!`;\n}\n~~~\n\nTo compile the module I need to give transpile.ts some permissions.\n\n- --allow-read (so I can read my local module\n- --allow-env (the transpiler needs the environment)\n- --allow-net (the deno emit module is not hosted locally)\n\nThe command line could look like this.\n\n~~~shell\ndeno run --allow-read --allow-env --allow-net \\\n  transpile.ts\n~~~\n\nThe result is JavaScript. It still has my comments in the code but doesn't have the TypeScript specific\nannotations.\n\n~~~javascript\n/**\n * hithere takes a name and returns a string of \"hi there \", a name and \"!\". If the name is null\n * it returns \"Hello World!\".\n *\n * @param {string | null} name\n * @returns {string}\n */ function hithere(name) {\n  if (name === null) {\n    return \"Hello World!\";\n  }\n  return `hi there ${name}!`;\n}\n~~~\n",
  "content_ast": {
    "children": [
      {
        "children": [
          {
            "type": "text",
            "value": "Transpiling with Deno"
          }
        ],
        "depth": 1,
        "type": "heading"
      },
      {
        "children": [
          {
            "children": [
              {
                "type": "text",
                "value": "Deno"
              }
            ],
            "type": "link",
            "url": "https://deno.land"
          },
          {
            "type": "text",
            "value": " is a fun environment to work in for learning TypeScript.  As I have become comfortable writing server side TypeScript code I know I want to also be able to use some modules in JavaScript form browser side. The question is then how to you go from TypeScript to JavaScript easily with getting involved with a bunch-o-npm packages?  Turns the solution in deno is to use the "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "deno_emit"
              }
            ],
            "type": "link",
            "url": "https://github.com/denoland/deno_emit/blob/main/js/README.md"
          },
          {
            "type": "text",
            "value": " module.  Let's say I have a TypeScript module called "
          },
          {
            "type": "inlineCode",
            "value": "hithere.ts"
          },
          {
            "type": "text",
            "value": ". I want to make it available as JavaScript so I can run it in a web browser. How do I use the "
          },
          {
            "type": "inlineCode",
            "value": "deno_emit"
          },
          {
            "type": "text",
            "value": " module to accomplish that?"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Write a short TypeScript program"
                  }
                ],
                "type": "paragraph"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "type": "text",
                            "value": "include the transpiler module provided with emit"
                          }
                        ],
                        "type": "paragraph"
                      }
                    ],
                    "spread": false,
                    "type": "listItem"
                  },
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "type": "text",
                            "value": "use the transpiler to generate the JavaScript code"
                          }
                        ],
                        "type": "paragraph"
                      }
                    ],
                    "spread": false,
                    "type": "listItem"
                  },
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "type": "text",
                            "value": "output the JavaScript code"
                          }
                        ],
                        "type": "paragraph"
                      }
                    ],
                    "spread": false,
                    "type": "listItem"
                  }
                ],
                "ordered": false,
                "spread": false,
                "type": "list"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": false,
        "spread": false,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Here's what "
          },
          {
            "type": "inlineCode",
            "value": "transpile.ts"
          },
          {
            "type": "text",
            "value": " might look like:"
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "typescript",
        "type": "code",
        "value": "/* Get the transpiler module from deno's emit */\nimport { transpile } from \"https://deno.land/x/emit/mod.ts\";\n\n/* Get the python to my CL.ts as a URL */\nconst url = new URL(\"./hithere.ts\", import.meta.url);\n/* Transpile the code returning a result */\nconst result = await transpile(url);\n\n/* Get the resulting code and write it to standard out */\nconst code = result.get(url.href);\nconsole.log(code);"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Here's the "
          },
          {
            "type": "inlineCode",
            "value": "hithere.ts"
          },
          {
            "type": "text",
            "value": " module:"
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "typescript",
        "type": "code",
        "value": "/**\n * hithere takes a name and returns a string of \"hi there \", a name and \"!\". If the name is null\n * it returns \"Hello World!\".\n *\n * @param {string | null} name\n * @returns {string}\n */\nfunction hithere(name: string | null): string {\n\tif (name === null) {\n\t\treturn \"Hello World!\";\n\t}\n\treturn `hi there ${name}!`;\n}"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "To compile the module I need to give transpile.ts some permissions."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "--allow-read (so I can read my local module"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "--allow-env (the transpiler needs the environment)"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "--allow-net (the deno emit module is not hosted locally)"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": false,
        "spread": false,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The command line could look like this."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "shell",
        "type": "code",
        "value": "deno run --allow-read --allow-env --allow-net \\\n  transpile.ts"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The result is JavaScript. It still has my comments in the code but doesn't have the TypeScript specific\nannotations."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "javascript",
        "type": "code",
        "value": "/**\n * hithere takes a name and returns a string of \"hi there \", a name and \"!\". If the name is null\n * it returns \"Hello World!\".\n *\n * @param {string | null} name\n * @returns {string}\n */ function hithere(name) {\n  if (name === null) {\n    return \"Hello World!\";\n  }\n  return `hi there ${name}!`;\n}"
      }
    ],
    "type": "root"
  },
  "data": {
    "created": "2024-07-03",
    "keywords": [
      "TypeScript",
      "JavaScript",
      "Deno"
    ],
    "pubDate": "2024-07-03",
    "software": [
      "Deno >= v1.44"
    ],
    "title": "Transpiling with Deno"
  }
}