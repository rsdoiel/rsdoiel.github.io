{
  "content": "\nOfront on Raspberry Pi OS\n=========================\n\nBy R. S. Doiel, 2021-04-25\n\nThis post is about getting Ofront[^1] up and running on Raspberry Pi OS[^2].\nOfront provides a Oberon-2 to C transpiler as well as a Oberon V4[^3]\ndevelopment environment. There are additional clever tools like `ocat`\nthat are helpful working with the differences in text file formats between\nOberon System 3, V4 and POSIX. The V4 implementation sits nicely on top of\nPOSIX with minimal compromises that distract from the Oberon experience.\n\n[^1]: Ofront was developed by Joseph Templ, see http://www.software-templ.com/ \n\n[^2]: see https://www.raspberrypi.org/software/ (a 32 bit Debian based Linux for both i386 and ARM)\n\n[^3]: see https://ssw.jku.at/Research/Projects/Oberon.html\n\n\nAn Initial Impression\n---------------------\n\nI first heard of running Ofront/V4 via the ETH Oberon Mail list[^4].\nWhat caught my eye is the reference to running on Raspberry Pi. Prof. Templ \nprovides two flavors of Ofront. One targets the Raspberry Pi OS on ARM\nhardware the second Linux on i386. The Raspberry Pi OS for Intel is an\ni386 variant. I downloaded the tar file, unpacked it and immediately ran\nthe \"oberon.bash\" script provided eager to see a V4 environment. It\nrenders but the fonts rendered terribly slowly. I should have read the\ndocumentation first!  Prof. Templ provides man pages for the tools that\ncome with Ofront including the oberon application. Reading the\nman page for oberon quickly addresses the point of slow font rendering.\nIt also discusses how to convert Oberon fonts to X Windows bitmap fonts.\nIf you use the X Window fonts the V4 environment is very snappy. It does\nrequire that X Windows knows where to find the fonts used in V4. That is\ndone by appending the V4 converted fonts to the X Window font map. I had\ninstalled the Ofront system in my home directory so the command was\n\n```bash\nxset +fp $HOME/ofront_1.4/fonts\n```\n\nRunning \"oberon.bash\" after that immediately improved things. Since I didn't\nneed the Oberon fonts outside of V4 I added the `xset` command to the\n\"oberon.bash\" script just before it invokes the `oberon` command.\n\n[^4]: See Hans Klaver's message: http://lists.inf.ethz.ch/pipermail/oberon/2021/015514.html \n\n\nGoals in my setup\n-----------------\n\nI had three goals in wanting to play with Ofront and running the V4\nOberon.\n\n1. I wanted to work in an Oberon System environment\n2. I need a system meets my vision requirements (e.g. larger font size)\n3. I wanted to understand the Linz/V4 variation in Oberon's evolution\n\nOfront address all three once you get the X Window side setup correctly.\n\nSetting up Ofront and V4\n------------------------\n\nFirst we need to boot up a Raspberry Pi OS device (or an i386 Linux with X11).\nWe need to retrieve the software from Joseph Templ's [software-templ.com](https://software-templ.com).\nTwo 1.4 versions are available precompiled. The first is for ARM running\nRaspberry Pi OS and the second is for generic Linux i386 with X11. I initially\ntested this on an old laptop where running the i386 version of Raspberry Pi OS. \n\nWhat we need\n------------\n\nThe following software is usually already installed on your \nRaspberry Pi OS.\n\n+ curl to download the files[^5]\n+ gunzip to uncompressed the archive file\n+ tar to unpack the archive file\n\n[^5]: If not try `sudo apt install curl` from the command line\n\nWhat we do\n----------\n\n1. Download the appropriate tar file\n    a. ARM: http://www.software-templ.com/shareware/ofront-1.4_raspbian-Pi3.tar.gz\n    b. Intel i386: http://www.software-templ.com/shareware/ofront-1.4_linux-386-3.2.tar.gz\n2. Make sure we can read the compressed archive file\n3. Gunzip and untar the file\n\nHere's the commands I used for the Raspberry Pi hardware.\n\n```bash\n    curl -O http://www.software-templ.com/shareware/ofront-1.4_raspbian-Pi3.tar.gz\n    tar ztvf ofront-1.4_raspbian-Pi3.tar.gz\n    tar zxvf ofront-1.4_raspbian-Pi3.tar.gz\n```\n\nHere's the commands I used for Raspberry Pi OS on Intel\n\n```bash\n    curl -O http://www.software-templ.com/shareware/ofront-1.4_linux-386-3.2.tar.gz\n    tar ztvf ofront-1.4_linux-386-3.2.tar.gz\n    tar zxvf ofront-1.4_linux-386-3.2.tar.gz\n```\n\nAt this point there should be an `ofront_1.4` directory\nwhere you gunziped and untared the archive file. At this point\nyou can test to make sure everything runs by doing the following\n(remember the font rendering with be very slow).\n\n```\n    cd ofront_1.4\n    ./oberon.bash\n```\n\nYou can exit the V4 environment by closing the window or typing\n`System.Quit ~` in an Oberon viewer and middle clicking with your\nmouse[^6].\n\n[^6]: Oberon Systems expect a three button mouse, with a two button mouse you hold the alt key and press the left button. Note that command in Oberon are case sensitive.\n\nThe reason the system is so slow is that X is having to write bitmaps\na pixel at a time in the window holding our Oberon System. What we\nwant X to do is render an X Window font.  Joseph as provided us with\nthe Oberon fonts already converted for X! We just need to let the\nX Window system know where to look.\n\nWhat we need\n------------\n\n+ an editor for editing `oberon.bash`\n\nWhat we'll do\n-------------\n\n1. Exit the running Oberon System using `System.Quit ~` or just close the window\n2. Edit `oberon.bash` to speed up font rendering\n3. Try `oberon.bash` again and see the speed bump\n\nWith your favorite editor add the `xset` line before the `oberon`\ncommand is invoked. My \"oberon.bash\" looks like this.\n\n```\n#!/bin/bash\n\nif [ -z \"$OFRONT_HOME\" ]; then\n  export OFRONT_HOME=.\n  echo \"OFRONT_HOME set to .\"\nfi\nexport OBERON=.:$OFRONT_HOME/V4_ofront:$OFRONT_HOME/V4:$OFRONT_HOME/fonts\nexport LD_LIBRARY_PATH=.:$OFRONT_HOME/lib\nexport PATH=.:$OFRONT_HOME/bin:$PATH\nxset +fp $HOME/ofront_1.4/fonts\n$OFRONT_HOME/bin/oberon -f ./V4/Big.Map -u 8000 -c $* &\n```\n\nThe `xset` command adds the provided X fonts to X Window. This\nresults in a huge speedup of rendering. I also add the options\nfor using the largest font sizes via a font map file, \"V4/Big.Map\"\nand set the display units to 8000. Your vision or monitor may\nnot need this so you want to only add the line to include the\nX fonts needed by Oberon.\n\nNow re-launch Oberon using the updated \"oberon.bash\" and\nsee the improvement.\n\n```\n    vi oberon.bash\n    ./oberon.bash\n```\n\nYou now have a functioning V4 Oberon System to play with and\nexplore.\n\nThere are some additional POSIX environment setup you can\nadd to improve the integration with your Linux setup. These\nare covered in the man pages for the tools that come with Ofront.\nAdditional information is also provided in the Oberon Texts\nand Tools files in the V4 environment. All are worth reading.\n\n\nWhat does this setup provide?\n-----------------------------\n\nAt the point we have V4 available we have a rich development\nand text environment. One which I feel is conducive to both\nwriting in general and programming specifically. You are running\nunder an adapted Oberon System so there are somethings to consider.\n\nThe Oberon V4 file system does support punctuation characters aside\nfrom periods and slashes.  So when I tried to edit a file with hyphens\nin the name Oberon assumed the filename stopped at the first hyphens.\nThe Oberon file systems are typically case sensitive so this can\nbe worked around with letter case. Of course I could modify the V4\nsystem to allow for more letters too. That's the nice thing about\nhaving the source code.\n\nThe second issue if file format.  In Oberon we can embed fonts\nand coloring and that is treated as normal text. End of line\ncharacters are represented as a carriage return. In POSIX environments\nwe have \"plain text\" without specific font directives and we use\na line feed to terminate lines. Fortunately Prof. Templ provided\na program called `ocat`[^7] that makes short work of converting an\nOberon text into a POSIX friendly format. On the Oberon side of things\nit's also easy because Oberon will treat an ASCII file as a text we\nonly need to convert the line endings and in the Ofront implementation\nof V4 it handles the differences in line endings behind the scenes.\n\nIf you create or store a file in the Oberon environment it'll become\nOberon text. If you need to have a plain text version use `ocat`.\nIf you only read POSIX files in the Oberon environment then they remain\nplain text files but V4 takes care of translating the POSIX line ending\nto ones that are displayed nicely in Oberon.\n\n\n[^7]: In the `ofront_1.4` directory run `man man1/ocat.1` to find out more\n\nWhat to explore next?\n---------------------\n\nNow that we have a fast running V4 system we have some choices\nfor development. Joseph Templ has adapted the display for X\nand also the file system so the files are visible from the Unix\nshell.  This is a powerful arrangement. This supports both Oberon\ndevelopment and the use of Oberon language for the development of\nPOSIX friendly programs.  The Ofront collection provides the\n`ofront` an Oberon-2 to C translator, `ocl` is a tool that will\ncombine `ofront` with your C compiler and linker to produce\nprograms and libraries for Linux. There is also `ocat` for\nconverting Oberon texts to POSIX plain text and `showdef` for\nshowing module definitions.  Finally Ofront provides the\n`oberon` command so we have an Oberon System available as a\ndevelopment environment.\n\nOne thing I recommend exploring is Jospeh Templ's GitHub repository.\nThe makefile provided with the GitHub version assuming an existing\ninstallation of ofront. Since we have one we can compile our own copy\nfrom scratch. If you're running i386 you'll want to look at\n`V4_ofront/linix386` for Pi hardware take a look at `V4_ofront/raspbian`.\n\nHere's how I generated a new version on my Pi hardware.\n\n```\n    git clone https://github.com/jtempl/ofront\n    cd ofront/V4_ofront/raspbian\n    make\n    ./oberon.bash\n```\n\nThere is a note in the README of that directory about finding\n`libX11.so` but I did not need the symbolic link suggested. Since the\nfont path was previously adjusted for the original version I downloaded\nfrom Templ's website I didn't need to add the fonts again. If I fork\nTempl's version or GitHub I will probably update the \"oberon.bash\"\nfile included to check to see if the X fonts are available and if not\nadd them via `xset`. That's on a someday maybe list, for now I am\ncontent exploring the system as is.\n\n\nSomeday, Maybe\n--------------\n\nThings that come to mind after initial exploration include--\n\n- Figure out how to make Atkinson-Hyperlegible[^8] available to V4\n- Replace the X11 integration with SDL 2 integration and run under macOS or Windows\n- Exploring porting V4 to run natively Raspberry Pi via Clang cross compilers\n\nNot sure I'll get the time or have the energy to do these things but\nthey are certainly seem feasible with Ofront as it stands now.\n\n[^8]: See https://brailleinstitute.org/freefont\n\n",
  "content_ast": {
    "children": [
      {
        "children": [
          {
            "type": "text",
            "value": "Ofront on Raspberry Pi OS"
          }
        ],
        "depth": 1,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "By R. S. Doiel, 2021-04-25"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "This post is about getting Ofront[^1] up and running on Raspberry Pi OS[^2].\nOfront provides a Oberon-2 to C transpiler as well as a Oberon V4[^3]\ndevelopment environment. There are additional clever tools like "
          },
          {
            "type": "inlineCode",
            "value": "ocat"
          },
          {
            "type": "text",
            "value": "\nthat are helpful working with the differences in text file formats between\nOberon System 3, V4 and POSIX. The V4 implementation sits nicely on top of\nPOSIX with minimal compromises that distract from the Oberon experience."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^1]: Ofront was developed by Joseph Templ, see http://www.software-templ.com/"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^2]: see https://www.raspberrypi.org/software/ (a 32 bit Debian based Linux for both i386 and ARM)"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^3]: see https://ssw.jku.at/Research/Projects/Oberon.html"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "An Initial Impression"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "I first heard of running Ofront/V4 via the ETH Oberon Mail list[^4].\nWhat caught my eye is the reference to running on Raspberry Pi. Prof. Templ\nprovides two flavors of Ofront. One targets the Raspberry Pi OS on ARM\nhardware the second Linux on i386. The Raspberry Pi OS for Intel is an\ni386 variant. I downloaded the tar file, unpacked it and immediately ran\nthe \"oberon.bash\" script provided eager to see a V4 environment. It\nrenders but the fonts rendered terribly slowly. I should have read the\ndocumentation first!  Prof. Templ provides man pages for the tools that\ncome with Ofront including the oberon application. Reading the\nman page for oberon quickly addresses the point of slow font rendering.\nIt also discusses how to convert Oberon fonts to X Windows bitmap fonts.\nIf you use the X Window fonts the V4 environment is very snappy. It does\nrequire that X Windows knows where to find the fonts used in V4. That is\ndone by appending the V4 converted fonts to the X Window font map. I had\ninstalled the Ofront system in my home directory so the command was"
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "bash",
        "type": "code",
        "value": "xset +fp $HOME/ofront_1.4/fonts"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Running \"oberon.bash\" after that immediately improved things. Since I didn't\nneed the Oberon fonts outside of V4 I added the "
          },
          {
            "type": "inlineCode",
            "value": "xset"
          },
          {
            "type": "text",
            "value": " command to the\n\"oberon.bash\" script just before it invokes the "
          },
          {
            "type": "inlineCode",
            "value": "oberon"
          },
          {
            "type": "text",
            "value": " command."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^4]: See Hans Klaver's message: http://lists.inf.ethz.ch/pipermail/oberon/2021/015514.html"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Goals in my setup"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "I had three goals in wanting to play with Ofront and running the V4\nOberon."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "I wanted to work in an Oberon System environment"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "I need a system meets my vision requirements (e.g. larger font size)"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "I wanted to understand the Linz/V4 variation in Oberon's evolution"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": true,
        "spread": false,
        "start": 1,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Ofront address all three once you get the X Window side setup correctly."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Setting up Ofront and V4"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "First we need to boot up a Raspberry Pi OS device (or an i386 Linux with X11).\nWe need to retrieve the software from Joseph Templ's "
          },
          {
            "children": [
              {
                "type": "text",
                "value": "software-templ.com"
              }
            ],
            "type": "link",
            "url": "https://software-templ.com"
          },
          {
            "type": "text",
            "value": ".\nTwo 1.4 versions are available precompiled. The first is for ARM running\nRaspberry Pi OS and the second is for generic Linux i386 with X11. I initially\ntested this on an old laptop where running the i386 version of Raspberry Pi OS."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "What we need"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The following software is usually already installed on your\nRaspberry Pi OS."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "curl to download the files[^5]"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "gunzip to uncompressed the archive file"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "tar to unpack the archive file"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": false,
        "spread": false,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^5]: If not try "
          },
          {
            "type": "inlineCode",
            "value": "sudo apt install curl"
          },
          {
            "type": "text",
            "value": " from the command line"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "What we do"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Download the appropriate tar file\na. ARM: http://www.software-templ.com/shareware/ofront-1.4_raspbian-Pi3.tar.gz\nb. Intel i386: http://www.software-templ.com/shareware/ofront-1.4_linux-386-3.2.tar.gz"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Make sure we can read the compressed archive file"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Gunzip and untar the file"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": true,
        "spread": false,
        "start": 1,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Here's the commands I used for the Raspberry Pi hardware."
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "bash",
        "type": "code",
        "value": "    curl -O http://www.software-templ.com/shareware/ofront-1.4_raspbian-Pi3.tar.gz\n    tar ztvf ofront-1.4_raspbian-Pi3.tar.gz\n    tar zxvf ofront-1.4_raspbian-Pi3.tar.gz"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Here's the commands I used for Raspberry Pi OS on Intel"
          }
        ],
        "type": "paragraph"
      },
      {
        "lang": "bash",
        "type": "code",
        "value": "    curl -O http://www.software-templ.com/shareware/ofront-1.4_linux-386-3.2.tar.gz\n    tar ztvf ofront-1.4_linux-386-3.2.tar.gz\n    tar zxvf ofront-1.4_linux-386-3.2.tar.gz"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "At this point there should be an "
          },
          {
            "type": "inlineCode",
            "value": "ofront_1.4"
          },
          {
            "type": "text",
            "value": " directory\nwhere you gunziped and untared the archive file. At this point\nyou can test to make sure everything runs by doing the following\n(remember the font rendering with be very slow)."
          }
        ],
        "type": "paragraph"
      },
      {
        "type": "code",
        "value": "    cd ofront_1.4\n    ./oberon.bash"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "You can exit the V4 environment by closing the window or typing\n"
          },
          {
            "type": "inlineCode",
            "value": "System.Quit ~"
          },
          {
            "type": "text",
            "value": " in an Oberon viewer and middle clicking with your\nmouse[^6]."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^6]: Oberon Systems expect a three button mouse, with a two button mouse you hold the alt key and press the left button. Note that command in Oberon are case sensitive."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The reason the system is so slow is that X is having to write bitmaps\na pixel at a time in the window holding our Oberon System. What we\nwant X to do is render an X Window font.  Joseph as provided us with\nthe Oberon fonts already converted for X! We just need to let the\nX Window system know where to look."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "What we need"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "an editor for editing "
                  },
                  {
                    "type": "inlineCode",
                    "value": "oberon.bash"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": false,
        "spread": false,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "What we'll do"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Exit the running Oberon System using "
                  },
                  {
                    "type": "inlineCode",
                    "value": "System.Quit ~"
                  },
                  {
                    "type": "text",
                    "value": " or just close the window"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Edit "
                  },
                  {
                    "type": "inlineCode",
                    "value": "oberon.bash"
                  },
                  {
                    "type": "text",
                    "value": " to speed up font rendering"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Try "
                  },
                  {
                    "type": "inlineCode",
                    "value": "oberon.bash"
                  },
                  {
                    "type": "text",
                    "value": " again and see the speed bump"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": true,
        "spread": false,
        "start": 1,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "With your favorite editor add the "
          },
          {
            "type": "inlineCode",
            "value": "xset"
          },
          {
            "type": "text",
            "value": " line before the "
          },
          {
            "type": "inlineCode",
            "value": "oberon"
          },
          {
            "type": "text",
            "value": "\ncommand is invoked. My \"oberon.bash\" looks like this."
          }
        ],
        "type": "paragraph"
      },
      {
        "type": "code",
        "value": "#!/bin/bash\n\nif [ -z \"$OFRONT_HOME\" ]; then\n  export OFRONT_HOME=.\n  echo \"OFRONT_HOME set to .\"\nfi\nexport OBERON=.:$OFRONT_HOME/V4_ofront:$OFRONT_HOME/V4:$OFRONT_HOME/fonts\nexport LD_LIBRARY_PATH=.:$OFRONT_HOME/lib\nexport PATH=.:$OFRONT_HOME/bin:$PATH\nxset +fp $HOME/ofront_1.4/fonts\n$OFRONT_HOME/bin/oberon -f ./V4/Big.Map -u 8000 -c $* &"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The "
          },
          {
            "type": "inlineCode",
            "value": "xset"
          },
          {
            "type": "text",
            "value": " command adds the provided X fonts to X Window. This\nresults in a huge speedup of rendering. I also add the options\nfor using the largest font sizes via a font map file, \"V4/Big.Map\"\nand set the display units to 8000. Your vision or monitor may\nnot need this so you want to only add the line to include the\nX fonts needed by Oberon."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Now re-launch Oberon using the updated \"oberon.bash\" and\nsee the improvement."
          }
        ],
        "type": "paragraph"
      },
      {
        "type": "code",
        "value": "    vi oberon.bash\n    ./oberon.bash"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "You now have a functioning V4 Oberon System to play with and\nexplore."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "There are some additional POSIX environment setup you can\nadd to improve the integration with your Linux setup. These\nare covered in the man pages for the tools that come with Ofront.\nAdditional information is also provided in the Oberon Texts\nand Tools files in the V4 environment. All are worth reading."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "What does this setup provide?"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "At the point we have V4 available we have a rich development\nand text environment. One which I feel is conducive to both\nwriting in general and programming specifically. You are running\nunder an adapted Oberon System so there are somethings to consider."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The Oberon V4 file system does support punctuation characters aside\nfrom periods and slashes.  So when I tried to edit a file with hyphens\nin the name Oberon assumed the filename stopped at the first hyphens.\nThe Oberon file systems are typically case sensitive so this can\nbe worked around with letter case. Of course I could modify the V4\nsystem to allow for more letters too. That's the nice thing about\nhaving the source code."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "The second issue if file format.  In Oberon we can embed fonts\nand coloring and that is treated as normal text. End of line\ncharacters are represented as a carriage return. In POSIX environments\nwe have \"plain text\" without specific font directives and we use\na line feed to terminate lines. Fortunately Prof. Templ provided\na program called "
          },
          {
            "type": "inlineCode",
            "value": "ocat"
          },
          {
            "type": "text",
            "value": "[^7] that makes short work of converting an\nOberon text into a POSIX friendly format. On the Oberon side of things\nit's also easy because Oberon will treat an ASCII file as a text we\nonly need to convert the line endings and in the Ofront implementation\nof V4 it handles the differences in line endings behind the scenes."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "If you create or store a file in the Oberon environment it'll become\nOberon text. If you need to have a plain text version use "
          },
          {
            "type": "inlineCode",
            "value": "ocat"
          },
          {
            "type": "text",
            "value": ".\nIf you only read POSIX files in the Oberon environment then they remain\nplain text files but V4 takes care of translating the POSIX line ending\nto ones that are displayed nicely in Oberon."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^7]: In the "
          },
          {
            "type": "inlineCode",
            "value": "ofront_1.4"
          },
          {
            "type": "text",
            "value": " directory run "
          },
          {
            "type": "inlineCode",
            "value": "man man1/ocat.1"
          },
          {
            "type": "text",
            "value": " to find out more"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "What to explore next?"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Now that we have a fast running V4 system we have some choices\nfor development. Joseph Templ has adapted the display for X\nand also the file system so the files are visible from the Unix\nshell.  This is a powerful arrangement. This supports both Oberon\ndevelopment and the use of Oberon language for the development of\nPOSIX friendly programs.  The Ofront collection provides the\n"
          },
          {
            "type": "inlineCode",
            "value": "ofront"
          },
          {
            "type": "text",
            "value": " an Oberon-2 to C translator, "
          },
          {
            "type": "inlineCode",
            "value": "ocl"
          },
          {
            "type": "text",
            "value": " is a tool that will\ncombine "
          },
          {
            "type": "inlineCode",
            "value": "ofront"
          },
          {
            "type": "text",
            "value": " with your C compiler and linker to produce\nprograms and libraries for Linux. There is also "
          },
          {
            "type": "inlineCode",
            "value": "ocat"
          },
          {
            "type": "text",
            "value": " for\nconverting Oberon texts to POSIX plain text and "
          },
          {
            "type": "inlineCode",
            "value": "showdef"
          },
          {
            "type": "text",
            "value": " for\nshowing module definitions.  Finally Ofront provides the\n"
          },
          {
            "type": "inlineCode",
            "value": "oberon"
          },
          {
            "type": "text",
            "value": " command so we have an Oberon System available as a\ndevelopment environment."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "One thing I recommend exploring is Jospeh Templ's GitHub repository.\nThe makefile provided with the GitHub version assuming an existing\ninstallation of ofront. Since we have one we can compile our own copy\nfrom scratch. If you're running i386 you'll want to look at\n"
          },
          {
            "type": "inlineCode",
            "value": "V4_ofront/linix386"
          },
          {
            "type": "text",
            "value": " for Pi hardware take a look at "
          },
          {
            "type": "inlineCode",
            "value": "V4_ofront/raspbian"
          },
          {
            "type": "text",
            "value": "."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Here's how I generated a new version on my Pi hardware."
          }
        ],
        "type": "paragraph"
      },
      {
        "type": "code",
        "value": "    git clone https://github.com/jtempl/ofront\n    cd ofront/V4_ofront/raspbian\n    make\n    ./oberon.bash"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "There is a note in the README of that directory about finding\n"
          },
          {
            "type": "inlineCode",
            "value": "libX11.so"
          },
          {
            "type": "text",
            "value": " but I did not need the symbolic link suggested. Since the\nfont path was previously adjusted for the original version I downloaded\nfrom Templ's website I didn't need to add the fonts again. If I fork\nTempl's version or GitHub I will probably update the \"oberon.bash\"\nfile included to check to see if the X fonts are available and if not\nadd them via "
          },
          {
            "type": "inlineCode",
            "value": "xset"
          },
          {
            "type": "text",
            "value": ". That's on a someday maybe list, for now I am\ncontent exploring the system as is."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Someday, Maybe"
          }
        ],
        "depth": 2,
        "type": "heading"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Things that come to mind after initial exploration include--"
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Figure out how to make Atkinson-Hyperlegible[^8] available to V4"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Replace the X11 integration with SDL 2 integration and run under macOS or Windows"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "type": "text",
                    "value": "Exploring porting V4 to run natively Raspberry Pi via Clang cross compilers"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "spread": false,
            "type": "listItem"
          }
        ],
        "ordered": false,
        "spread": false,
        "type": "list"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "Not sure I'll get the time or have the energy to do these things but\nthey are certainly seem feasible with Ofront as it stands now."
          }
        ],
        "type": "paragraph"
      },
      {
        "children": [
          {
            "type": "text",
            "value": "[^8]: See https://brailleinstitute.org/freefont"
          }
        ],
        "type": "paragraph"
      }
    ],
    "type": "root"
  },
  "data": {
    "author": "rsdoiel@gmail.com (R. S. Doiel)",
    "copyright": "copyright (c) 2021, R. S. Doiel",
    "date": "2021-04-25",
    "keywords": [
      "Oberon",
      "Raspberry Pi OS",
      "Ofront",
      "Mostly Oberon",
      "V4",
      "Linz"
    ],
    "license": "https://creativecommons.org/licenses/by-sa/4.0/",
    "title": "Ofront on Raspberry Pi OS"
  }
}