{
  "page": 1,
  "total_pages": 1,
  "has_more": false,
  "next_page": null,
  "values": [
    {
      "content": "\n\n# NodeJS, NPM, Electron\n\nBy R. S. Doiel 2017-10-20\n\nElectron is an app platform leveraging web technologies. Conceptually it is a\nmashup of NodeJS and Chrome browser. [Electron](https://electron.atom.io/) site\nhas a nice starter app. It displays a window with Electron version info and\n'hello world'.\n\nBefore you can get going with _Electron_ you need to have a\nworking _NodeJS_ and _NPM_. I usually compile from source and this\nwas my old recipe (adjusted for v8.7.0).\n\n```shell\n    cd\n    git clone https://github.com/nodejs/node.git\n    cd node\n    git checkout v8.7.0\n    ./configure --prefix=$HOME\n    make && make install\n```\n\nTo install an _Electron Quick Start_ I added the additional steps.\n\n```shell\n    cd\n    git clone https://github.com/electron/electron-quick-start\n    cd electron-quick-start\n    npm install\n    npm start\n```\n\nNotice _Electron_ depends on a working _node_ and _npm_.  When I\ntried this recipe it failed on `npm install` with errors regarding\ninternal missing node modules.\n\nAfter some fiddling I confirmed my node/npm install failed because\nI had install the new version of over a partially installed previous\nversion. This causes the node_modules to be populated with various\nconflicting versions of internal modules.\n\nSorting that out allowed me to test the current version of\n*electron-quick-start* cloned on 2017-10-20 under _NodeJS_ v8.7.0.\n\n## Avoiding Setup Issues in the future\n\nThe *Makefile* for _NodeJS_ includes an 'uninstall' option. Revising\nmy _NodeJS_ install recipe above I now do the following to setup a machine\nto work with _NodeJS_ or _Electron_.\n\n```shell\n    git clone git@github.com:nodejs/node.git\n    cd node\n    ./configure --prefix=$HOME\n    make uninstall\n    make clean\n    make -j 5\n    make install\n```\n\nIf I am on a device with a multi-core CPU (most of the time) you can speed\nup the make process using a `-j CPU_CORE_COUNT_PLUS_ONE` option (e.g. `-j 5`\nfor my 4 core x86 laptop).\n\nOnce _node_ and _npm_ were working normally the instructions in the\n*electron-quick-start* worked flawlessly on my x86.\n\nI have tested the node install recipe change on my Pine64 Pinebook, on \nseveral Raspberry Pi 3s as well as my x86 Ubuntu Linux laptop.\n\nI have not gotten Electron up on my Pine64 Pinebook or Raspberry Pi's yet. \n`npm install` outputs errors suggesting that it is expecting an x86 architecture.\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2017, R. S. Doiel",
        "date": "2017-10-20",
        "keywords": [
          "Javascript",
          "NodeJS",
          "Electron"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "NodeJS, NPM, Electron"
      },
      "url": "posts/2017/10/20/node-npm-electron.json"
    },
    {
      "content": "\n\n# Harvesting my Gists from GitHub\n\nBy R. S. Doiel 2017-12-10\n\nThis is a just quick set of notes on harvesting my Gists on GitHub so I\nhave an independent copy for my own website. \n\n## Assumptions\n\nIn this gist I assume you are using Bash on a POSIX system (e.g. Raspbian \non a Raspberry Pi) with the standard compliment of Unix utilities (e.g. cut, \nsed, curl). I also use Stephen Dolan's [jq](https://github.com/stedolan/jq)\nas well as Caltech Library's [datatools](https://github.com/caltechlibrary/datatools).\nSee the respective GitHub repositories for installation instructions.\nThe gist harvest process was developed against GitHub's v3 API\n(see developer.github.com). \n\nIn the following examples \"USER\" is assumed to hold your GitHub user id \n(e.g. rsdoiel for https://github.com/rsdoiel).\n\n## Getting my basic profile\n\nThis retrieves the public view of your profile.\n\n```shell\n    curl -o USER \"https://api.github.com/users/USER\"\n```\n\n## Find the urL for your gists\n\nGet the gists url from `USER.json.\n\n```shell\n    GISTS_URL=$(jq \".gists_url\" \"USER.json\" | sed -E 's/\"//g' | cut -d '{' -f 1)\n    curl -o gists.json \"${GISTS_URL}\"\n```\n\nNow `gists.json` should hold a JSON array of objects representing your Gists.\n\n## Harvesting the individual Gists.\n\nWhen you look at _gists.json_ you'll see a multi-level JSON structure.  It has been\nformatted by the API so be easy to scrape.  But since this data is JSON and Caltech Library\nhas some nice utilities for working with JSON I'll use *jsonrange* and *jq* to pull out a list\nof individual Gists URLS.\n\n```shell\n    jsonrange -i gists.json | while read I; do \n        jq \".[$I].files\" gists.json | sed -E 's/\"//g'\n    done\n```\n\nExpanding this we can now curl each individual gist metadata to find URL to the raw file.\n\n\n```shell\n    jsonrange -i gists.json | while read I; do \n        jq \".[$I].files\" gists.json | jsonrange -i - | while read FNAME; do\n            jq \".[$I].files[\\\"$FNAME\\\"].raw_url\" gists.json | sed -E 's/\"//g'; \n        done;\n    done\n```\n\nNow that we have URLs to the raw gist files we can use curl again to fetch each.\n\nWhat do we want to store with our harvested gists?  The raw files, metadata\nabout the Gist (e.g. when it was created), the Gist ID. Putting it all together\nwe have the following script.\n\n```shell\n    #!/bin/bash\n    if [[ \"$1\" = \"\" ]]; then\n        echo \"USAGE: $(basename \"$0\") GITHUB_USERNAME\"\n        exit 1\n    fi\n\n    USER=\"$1\"\n    curl -o \"$USER.json\" \"https://api.github.com/users/$USER\"\n    if [[ ! -s \"$USER.json\" ]]; then\n        echo \"Someting went wrong getting https://api.github.cm/users/${USER}\"\n        exit 1\n    fi\n\n    GISTS_URL=$(jq \".gists_url\" \"$USER.json\" | sed -E 's/\"//g' | cut -d '{' -f 1)\n    curl -o gists.json \"${GISTS_URL}\"\n    if [[ ! -s gists.json ]]; then\n        echo \"Someting went wrong getting ${GISTS_URL}\"\n        exit 1\n    fi\n\n    # For each gist harvest our file\n    jsonrange -i gists.json | while read I; do\n        GIST_ID=$(jq \".[$I].id\" gists.json | sed -E 's/\"//g')\n        mkdir -p \"gists/$GIST_ID\"\n        echo \"Saving gists/$GIST_ID/metadata.json\"\n        jq \".[$I]\" gists.json > \"gists/$GIST_ID/metadata.json\"\n        jq \".[$I].files\" gists.json | jsonrange -i - | while read FNAME; do\n            URL=$(jq \".[$I].files[\\\"$FNAME\\\"].raw_url\" gists.json | sed -E 's/\"//g')\n            echo \"Saving gist/$GIST_ID/$FNAME\"\n            curl -o \"gists/$GIST_ID/$FNAME\" \"$URL\"\n        done;\n    done\n```\n\n\n\n\n\n\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2017, R. S. Doiel",
        "date": "2017-12-10",
        "keywords": [
          "GitHub",
          "Gists",
          "JSON"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Harvesting my Gists from GitHub"
      },
      "url": "posts/2017/12/10/harvesting-my-gists-from-github.json"
    },
    {
      "content": "\n\n# Raspbian Stretch on DELL E4310 Laptop\n\nby R. S. Doiel 2017-12-18\n\nToday I bought a used Dell E4310 laptop. The E4310 is an \"old model\" now\nbut certainly not vintage yet.  It has a nice keyboard and reasonable \nscreen size and resolution. I bought it as a writing machine. I mostly\nwrite in Markdown or Fountain depending on what I am writing these days.\n\n## Getting the laptop setup\n\nThe machine came with a minimal bootable Windows 7 CD and an blank \ninternal drive. Windows 7 installed fine but was missing the network \ndrivers for WiFi.  I had previously copied the new [Raspbian Stretch](https://www.raspberrypi.org/blog/raspbian-stretch/) ISO to a USB drive. While\nthe E4310 didn't support booting from the USB drive Windows 7 does make\nit easy to write to a DVRW. After digging around and finding a blank disc\nI could write to it was a couple of mouse clicks and a bit of waiting \nand I had new bootable Raspbian Stretch CD.\n\nBooting from the Raspbian Stretch CD worked like a charm. I selected \nthe graphical install which worked well though initially the trackpad \nwasn't visible so I just used keyboard navigation to setup the install.\nAfter the installation was complete and I rebooted without the install\ndisc everything worked except the internal WiFi adapter.\n\nI had several WiFi dongles that I use with my Raspberry Pis so I \nborrowed one and with that was able to run the usual `sudo apt update \n&& sudo apt upgrade`.\n\nWhile waiting for the updates I did a little web searching and found \nwhat I needed to know on the Debian Wiki (see\nhttps://wiki.debian.org/iwlwifi?action=show&redirect=iwlagn).  Following\nthe instructions for *Debian 9 \"Stretch\"* ---\n\n```shell\n    sudo vi /etc/apt/sources.list.d/non-free.list \n    # adding the deb source line from the web page\n    sudo apt update && sudo apt install fireware-iwlwifi\n    sudo modprobe -r iwlwifi; sudo modprobe iwlwifi\n    sudo shutdown -r now\n```\n\nAfter that everything came up fine.\n\n## First Impressions\n\nFirst, I like Raspbian Pixel. It was fun on my Pi but on an Intel box\nwith 4Gig RAM it is wicked fast.  Pixel is currently my favorite flavor \nof Debian GNU/Linux. It is simple, minimal with a consistent UI for \nan X based system. Quite lovely. \n\nIf you've got an old laptop you'd like to breath some life into \nRaspbian Stretch is the way to go.\n\n\n### steps for my install process\n\n+ Booted from a minimal Windows 7 CD to get a basic OS minus networking\n+ Used Windows 7 and the internal DVD-RW to create a Raspbian Stretch CD\n+ Booted from the Raspbian Stretch CD and installed Raspbian replacing Windows 7\n+ Used a spare WiFi dongle initially to fetch the non-free iwlwifi modules\n+ Updated my source list, re-run apt update and upgrade\n+ Rebooted and everything came up and is running\n\n",
      "data": {
        "author": "rsdoiel@gmail.com (R. S. Doiel)",
        "copyright": "copyright (c) 2017, R. S. Doiel",
        "date": "2017-12-18",
        "keywords": [
          "Raspbian",
          "Raspberry Pi OS",
          "amd64",
          "i386",
          "operating systems"
        ],
        "license": "https://creativecommons.org/licenses/by-sa/4.0/",
        "title": "Raspbian Stretch on DELL E4310 Laptop"
      },
      "url": "posts/2017/12/18/raspbian-stretch-on-amd64.json"
    }
  ]
}