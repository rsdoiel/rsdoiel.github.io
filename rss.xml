<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <atom:link href="https://rsdoiel.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <title>Robert&#39;s ramblings and wonderig</title>
        <link>https://rsdoiel.github.io</link>
        <description>Robert&#39;s ramblings and wonderigs</description>
        <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
        <lastBuildDate>Sun, 09 Oct 2022 00:00:00 +0000</lastBuildDate>
        <generator>pttk rss 0.0.5</generator>
        <item>
            <title>Getting things setup</title>
            <link>https://rsdoiel.github.io/blog/2022/10/09/getting-things-setup.html</link>
            <description>&#xA;&#xA;I&#39;m digging my [gopherhole on sdf.org](gopher://sdf.org:70/0/users/rsdoiel)&#xA;as I wait for my validation to go through.  The plan is to migrate content&#xA;from rsdoiel.github.io to here and host it in a Gopher context.  It&#39;s&#xA;interesting learning my way around sdf.org. Reminds me of my student days&#xA;when I first had access to a Unix system.  Each Unix has it own flavors and&#xA;even for the same Unix type/version each system has it&#39;s own particular&#xA;variation. Unix lends itself to customization and that why one system can&#xA;&#34;feel&#34; or &#34;look&#34; different than the next.&#xA;&#xA;I&#39;m trying to remember how to use Pico (vi isn&#39;t available yet).&#xA;Discovering how far &#34;mkgopher&#34; can go (very far it turns out).&#xA;&#xA;I&#39;m looking forward to validation so I can have access to Git and&#xA;&#34;move in&#34; to this gopherspace in a more sustainable way.&#xA;&#xA;- wait to be validated&#xA;- learn [gitia](https://git.sdf.org) and setup up a mirror my personal projects and blog&#xA;- read up on [gophernicus](https://www.gophernicus.org/) (the gopher server used by sdf.org)&#xA;- [twenex project](https://www.twenex.org/), sounds interesting,&#xA;  I remember accessing a TOPS-20 system at Whitesands in New Mexico&#xA;  once upon a time.&#xA;- figure out to access comp.lang.oberon if it is available on sdf.org&#xA;- figure out, after validation, if I can compile OBNC for working on&#xA;  Artemis and Oberon-07 code projects ...</description>
            <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/10/09/getting-things-setup.html</guid>
        </item>
        <item>
            <title>Thinking about Gopher</title>
            <link>https://rsdoiel.github.io/blog/2022/09/28/thinking-about-gopher.html</link>
            <description>Last weekend I visited the [Gophersphere](gopher://gopher.floodgap.com &#34;Floodgap is a good starting point for Gopher&#34;) for the first time in a very long time. I&#39;m happy to report it is still alive an active. It remains fast, lower resource consuming. This resulted in finding a Gopher protocol package in Go and adding light weight Gopher server to [pttk](https://rsdoiel.github.io/pttk) my current vehicle for experimenting with plain text writing tools.&#xA;&#xA;I&#39;ve been thinking allot this past half week about where to explore in Gopher. The biggest issue I ran into turned out to be easily solve. Gopher protocol is traditionally served over port 70 but if you&#39;re running a \*nix if you are just experimenting on localhost it is easier to use port 7000 (analogous to port 80 becoming 8000 or 8080 in the websphere). But some Gopher clients will only serve port 70. Two clients work very well at 7000 and they are Lynx (the trusty old console web browser) and one written in Rust called [ncgopher](https://github.com/jansc/ncgopher). The latter I find I use most of the time. It also supports Gemini sites though I am less interested in Gemini at the movement.  Gopher has a really nice sweet spot of straight forward implementation for both client and server. It would be a good exercise for moving from beginner to intermediate programming classes as you would be introducing network programming, a little parsing and the client server application models. It&#39;s a really good use case of looking back (Gopher is venerable in Internet age) and looking forward (a radical simplification of distributing readable material and related files).&#xA;&#xA;The simplicity and limitations of Gopher are inspiring. The limitations are particularly important as they are good constraints that help focus where to innovate. Gopher is a protocol ripe for software innovation precisely because of it&#39;s constraints.&#xA;&#xA;Gophermaps is a good example. The Go package [git.mills.io/prologic/go-gopjer](https://git.mills.io/prologic/go-gopher) supports easily building servers that have Gophermaps the way of structuring the Gopher menus (aka selectors in Gopher parlance). A Gophermaps is a plain text file where you have lines that start with a Gopher supported document type (see [Gopher protocol](https://en.wikipedia.org/wiki/Gopher_(protocol) for details) a label followed by a tab character, a relative path followed by a tab character, a hostname followed by a tab character and a port number.  Very simple to parse.  The problem is Gopher clients expect all the fields for them to interpret them as a linked resource (e.g. a text file, binary file, image, or another Gopher selector). When I first encountered Gopher at USC so many years ago (pre-Mosaic, pre-Netscape) Gophermaps selectors are trivial to setup and you could build a service that supported ftp and Gopher in the same directory structure. All the &#34;development&#34; of a gopher site was done directly on the server in the directories where the files would live. Putting in all values seemed natural. Today I don&#39;t develop on a &#34;production server&#34; if I can avoid it. My writing is done on a small pool of machines at home, each with its own name. Explicitly writing a hostname and port with the eye to publishing to a public site then becomes a game of running `sed` to correct hostname and ports across the updated Gophermap files.&#xA;&#xA;&gt; Gopher selectors form &#34;links&#34; to navigate through a Gopher site or through the Gophersphere depending on what they point at ...</description>
            <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/09/28/thinking-about-gopher.html</guid>
        </item>
        <item>
            <title>Rust development notes</title>
            <link>https://rsdoiel.github.io/blog/2022/09/27/rust-development-notes.html</link>
            <description>I recently wanted to try [ncgopher](https://github.com/jansc/ncgopher) which is a [rust](https://rust-lang.org) based application. I was working on a an M1 Mac mini. I use [Mac Ports](https://www.macports.org) for my userland applications and installed [cargo](https://doc.rust-lang.org/cargo/) to pickup the rust compiler and build tool&#xA;&#xA;```shell&#xA;sudo port install cargo&#xA;```&#xA;&#xA;All went well until I tried to build ncgopher and got an error as follows&#xA;&#xA;```&#xA;cargo build --release&#xA;    Updating crates.io index&#xA;error: Unable to update registry `crates-io`&#xA;&#xA;Caused by:&#xA;  failed to fetch `https://github.com/rust-lang/crates.io-index` ...</description>
            <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/09/27/rust-development-notes.html</guid>
        </item>
    </channel>
</rss>
