<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <atom:link href="https://rsdoiel.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <title>R. S. Doiel Blog</title>
        <link>https://rsdoiel.github.io</link>
        <description>Robert&#39;s ramblings and wonderigs</description>
        <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
        <lastBuildDate>Thu, 05 Jun 2025 00:00:00 +0000</lastBuildDate>
        <generator>pttk rss 0.0.19</generator>
        <item>
            <title>PowerShell and Edit for macOS, Linux and Windows</title>
            <link>https://rsdoiel.github.io/blog/2025/06/05/PowerShell_and_Edit.html</link>
            <description>One of the challenges of multi platform support is the variance in tools. Unix and related operating systems are pretty unified these days. The differences are minor today as opposed to twenty years ago. If you need to support Windows too it&#39;s a whole different story. You can jump to Linux Subsystem for Windows but that is really like using a container inside Windows and doesn&#39;t solve the problem when you need to work across the whole system.&#xA;&#xA;Windows&#39; shell experience is varied. Originally it was command com, essentially a enhanced CP/M shell. Much later as Windows moved beyond then replaced MS-DOS they invented PowerShell. Initially a Windows only system. Fast forward today things have change. PowerShell runs across Windows, macOS and Linux. It is even licensed under an MIT style license.&#xA;&#xA;- &lt;https://github.com/PowerShell/PowerShell&gt;&#xA;&#xA;PowerShell is intended as a system scripting language and as such is focused on the types of things you need too to manage a system. It has vague overtones of Java, .NET and F#. If you are familiar with those it probably feels familiar for me it wasn&#39;t familiar. Picking up PowerShell has boiled down to my thinking I can do X in Bash then doing a search to find out the equivalent in PowerShell 7 or above.  There are something examples out there that are Windows specific because there isn&#39;t a matching service under that other operating systems but if you focus on PowerShell itself rather than Windows particular feature it is very useful. It also means while you&#39;re picking up how Windows might approach something you can re-purpose that knowledge on the other operating systems. That&#39;s really handy for admin type tasks.&#xA;&#xA;One of the things I&#39;ve been playing with is creating a set of scripts that have a common name but deal with the specifics of the target OS. That way when I need to run a generalized task I can deploy the OS specific version to the platform but then start thinking about managing the heterogeneous environments in a unified way. E.g. scripts like &#34;require-reboot.ps1&#34;, &#34;safe-to-reboot.ps1&#34;, &#34;disk-is-used-by.ps1&#34;. ...</description>
            <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/06/05/PowerShell_and_Edit.html</guid>
        </item>
        <item>
            <title>A quick note on types in Deno+TypeScript</title>
            <link>https://rsdoiel.github.io/blog/2025/05/25/a_quick_notes_on_types.html</link>
            <description>Understanding the plumbing of a program that is built with Deno in TypeScript can be challenging if you can&#39;t identify the type of variables or constants.  TypeScript inherits the JavaScript function, `typeof`. This works nicely for simple types like `string`, `boolean`, `number` but is  less useful when compared to a class or interface name of a data structure.&#xA;&#xA;There are three approaches I&#39;ve found helpful in my exploration of type metadata when working with Deno+TypeScript. (NOTE: in the following&#xA;the value `VARIABLE_OR_CONSTANT` would be replaced with the object you are querying for type metadata)&#xA;&#xA;`typeof`&#xA;: This is good for simple types but when a type is an object you get `[object object]` response.&#xA;&#xA;`Object.protototype.toString.call(VARIABLE_OR_CONSTANT)`&#xA;: This is what is behind the `typeof` function but can be nice to know. It returns the string representation of the `VARIABLE_OR_CONSTANT` you pass to it.&#xA;&#xA;`VARIABLE_OR_CONSTANT.constructor.name`&#xA;: This will give you the name derived from the object&#39;s constructor, effectively the class name. It doesn&#39;t tell you if the the `VARIABLE_OR_CONSTANT` is an interface. If you construct an object as an object literal then the name returned will be `Object`. ...</description>
            <pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/05/25/a_quick_notes_on_types.html</guid>
        </item>
        <item>
            <title>New Life for Fielded Search</title>
            <link>https://rsdoiel.github.io/blog/2025/04/10/New_Life_for_Fielded_Search.html</link>
            <description>A day dreaming in response to a Simon Willison post on using language models&#xA;to convert queries into fielded searches. In this post I extrapolate how this&#xA;could result in a more private search experience and allow for an enhanced&#xA;search experience for static websites.&#xA;</description>
            <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/04/10/New_Life_for_Fielded_Search.html</guid>
        </item>
        <item>
            <title>LLM first impressions a few weeks in</title>
            <link>https://rsdoiel.github.io/blog/2025/03/30/LLM_first_impressions_a_few_weeks_in.html</link>
            <description>A first take of LLM use for coding projects.&#xA;</description>
            <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/03/30/LLM_first_impressions_a_few_weeks_in.html</guid>
        </item>
        <item>
            <title>Building Web Components using Large Language Models</title>
            <link>https://rsdoiel.github.io/blog/2025/03/13/Building_Web_Component_using_an_LLM.html</link>
            <description>Quick discussion of my recent experience bootstrapping the CL-web-components project&#xA;</description>
            <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/03/13/Building_Web_Component_using_an_LLM.html</guid>
        </item>
        <item>
            <title>Setting up my Raspberry Pi 500, a Portable Workstation</title>
            <link>https://rsdoiel.github.io/blog/2025/02/14/Review_Pi-500_as_portable_workstation.html</link>
            <description>Quick notes on configuring a Raspberry Pi 500 as a portable workstation along with a price list.&#xA;</description>
            <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/02/14/Review_Pi-500_as_portable_workstation.html</guid>
        </item>
        <item>
            <title>Book review, &#34;Man and the Computer&#34;</title>
            <link>https://rsdoiel.github.io/blog/2025/02/10/Man_and_the_Computer.html</link>
            <description>A book review of a vintage computer publication, &#34;Man and the Computer&#34; by&#xA;John G. Kemeny, published 1972, ISBN: 0684130092&#xA;Read at the Open Library, &lt;https://openlibrary.org/books/OL5282840M/Man_and_the_computer&gt; &#xA;</description>
            <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/02/10/Man_and_the_Computer.html</guid>
        </item>
        <item>
            <title>Working with Structured Data in Deno and TypeScript</title>
            <link>https://rsdoiel.github.io/blog/2025/02/03/working_with_structured_data.html</link>
            <description>A short discourse on working with structured data in TypeScript and easily&#xA;converting from JSON, YAML and XML representations.&#xA;</description>
            <pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/02/03/working_with_structured_data.html</guid>
        </item>
        <item>
            <title>Moving beyond git template repositories with CodeMeta</title>
            <link>https://rsdoiel.github.io/blog/2025/01/31/moving_beyond_git_templates.html</link>
            <description>An exploration of using CodeMeta objects to generate of software artifacts as an alternative to Git template repositories.&#xA;</description>
            <pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2025/01/31/moving_beyond_git_templates.html</guid>
        </item>
    </channel>
</rss>
