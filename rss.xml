<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>R. S. Doiel</title>
        <link>https://rsdoiel.github.io/blog</link>
        <description>Robert&#39;s ramblings and wonderigs</description>
        <pubDate>Sat, 27 Nov 2021 00:00:00 UTC</pubDate>
        <lastBuildDate>Sat, 27 Nov 2021 00:00:00 UTC</lastBuildDate>
        <generator>mkrss 0.2.5</generator>
        <item>
            <title>Setting up FreeDOS 1.3rc4 with Qemu</title>
            <link>/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.md</link>
            <description>Setting up FreeDOS 1.3rc4 with Qemu&#xA;-----------------------------------&#xA;&#xA;By R. S. Doiel, 2021-11-27&#xA;&#xA;In this article I&#39;m going explore setting up FreeDOS with Qemu&#xA;on my venerable Dell 4319 running Raspberry Pi Desktop OS (Debian&#xA;GNU/Linux).  First step is to download FreeDOS &#34;Live CD&#34; in the&#xA;1.3 RC4 release. See http://freedos.org/download/ for that.&#xA;&#xA;Installing Qemu&#xA;---------------&#xA;&#xA;I needed to install Qemu in my laptop. It runs the Raspberry Pi&#xA;Desktop OS (i.e. Debian with Raspberry Pi UI). I choose to install&#xA;the &#34;qemu-system&#34; package since I will likely use qemu for other&#xA;things besides FreeDOS. The qemu-system package contains all the&#xA;various systems I might want to emulate in other projects as well&#xA;as several qemu utilities that are handy.  Here&#39;s the full sequence&#xA;of `apt` commands I ran (NOTE: these included making sure my laptop&#xA;was up to date before I installed qemu-system). ...</description>
            <pubDate>Sat, 27 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.md</guid>
        </item>
        <item>
            <title>Portable Conversions (Integers)</title>
            <link>/blog/2021/11/26/Portable-Conversions-Integers.md</link>
            <description>Portable conversions (Integers)&#xA;===============================&#xA;&#xA;By R. S. Doiel, 2021-11-26&#xA;&#xA;An area in working with Oberon-07 on a POSIX machine that has proven problematic is type conversion. In particular converting to and from INTEGER or REAL and ASCII.  None of the three compilers I am exploring provide a common way of handling this. I&#39;ve explored relying on C libraries but that approach has it&#39;s own set of problems.  I&#39;ve become convinced a better approach is a pure Oberon-07 library that handles type conversion with a minimum of assumptions about the implementation details of the Oberon compiler or hardware. I&#39;m calling my conversion module &#34;Types&#34;. The name is short and descriptive and seems an appropriate name for a module consisting of type conversion tests and transformations.  My initial implementation will focusing on converting integers to and from ASCII.&#xA;&#xA;INTEGER to ASCII and back again&#xA;-------------------------------&#xA;&#xA;I don&#39;t want to rely on the representation of the INTEGER value in the compiler or at the machine level. That has lead me to think in terms of an INTEGER as a signed whole number. ...</description>
            <pubDate>Fri, 26 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/26/Portable-Conversions-Integers.md</guid>
        </item>
        <item>
            <title>Revisiting Files</title>
            <link>/blog/2021/11/22/Revisiting-Files.md</link>
            <description>Revisiting Files&#xA;================&#xA;&#xA;By R. S. Doiel, 2021-11-22&#xA;&#xA;In October I had an Email exchange with Algojack regarding a buggy example in [Oberon-07 and the file system](../../../2020/05/09/Oberon-07-and-the-filesystem.html). The serious bug was extraneous non-printable characters appearing a plain text file containing the string &#34;Hello World&#34;. The trouble with the example was a result of my misreading the Oakwood guidelines and how **Files.WriteString()** is required to work. The **Files.WriteString()** procedure is supposed to write every element of a string to a file. This __includes the trailing Null character__. The problem for me is **Files.WriteString()** litters plain text files with tailing nulls. What I should have done was write my own **WriteString()** and **WriteLn()**. The program [HelloworldFile](./HelloworldFile.Mod) below is a more appropriate solution to writing strings and line endings than relying directly on **Files**. In a future post I will explorer making this more generalized in a revised &#34;Fmt&#34; module.&#xA;&#xA;~~~&#xA;MODULE HelloworldFile;&#xA;&#xA;IMPORT Files, Strings; ...</description>
            <pubDate>Mon, 22 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/22/Revisiting-Files.md</guid>
        </item>
        <item>
            <title>Combining Oberon-07 with C using Obc-3</title>
            <link>/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.md</link>
            <description>&#xA;&#xA;Combing Oberon-07 with C using Obc-3&#xA;===================================&#xA;&#xA;By R. S. Doiel, 2021-06-14&#xA;&#xA;This post explores integrating C code with an Oberon-07 module use&#xA;Mike Spivey&#39;s Obc-3 Oberon Compiler.  Last year I wrote a similar post&#xA;for Karl Landstr√∂m&#39;s [OBNC](/blog/2020/05/01/Combining-Oberon-and-C.html).&#xA;This goal of this post is to document how I created a version of Karl&#39;s&#xA;Extension Library that would work with Mike&#39;s Obc-3 compiler.&#xA;If you want to take a shortcut you can see the results on GitHub&#xA;in my [obc-3-libext](https://github.com/rsdoiel/obc-3-libext) repository.&#xA;&#xA;From my time with OBNC I&#39;ve come to rely on three modules from Karl&#39;s&#xA;extension library. When trying to port some of my code to use with&#xA;Mike&#39;s compiler. That&#39;s where I ran into a problem with that dependency.&#xA;Karl&#39;s modules aren&#39;t available. I needed an [extArgs](http://miasap.se/obnc/obncdoc/ext/extArgs.def.html),&#xA;an [extEnv](http://miasap.se/obnc/obncdoc/ext/extEnv.def.html) and&#xA;[extConvert](http://miasap.se/obnc/obncdoc/ext/extConvert.def.html). ...</description>
            <pubDate>Mon, 14 Jun 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.md</guid>
        </item>
    </channel>
</rss>