<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>R. S. Doiel</title>
        <link>https://rsdoiel.github.io/blog</link>
        <description>Robert&#39;s ramblings and wonderigs</description>
        <pubDate>Tue, 18 Jan 2022 00:00:00 UTC</pubDate>
        <lastBuildDate>Tue, 18 Jan 2022 00:00:00 UTC</lastBuildDate>
        <generator>mkrss v0.2.0</generator>
        <item>
            <title>Notes on setting up a Mid-2010 Mac Mini</title>
            <link>/blog/2021/12/18/Notes-on-setting-up-a-2010-Mac-Mini.md</link>
            <description>&lt;h1 id=&#34;notes-on-setting-up-a-mid-2010-mac-mini&#34;&gt;Notes on setting up a Mid-2010 Mac Mini&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-12-18&lt;/p&gt;&#xA;&lt;p&gt;I acquired a Mid 2010 Mac Mini. It was in good condition but lacked an OS on the hard drive. I used a previously purchased copy of Mac OS X Snow Leopard to get an OS up and running on the bare hardware. Then it was a longer effort to get the machine into a state with the software I wanted to use on it. My goal was Mac OS X High Sierra, Xcode 10.1 and Mac Ports. The process was straight forward but very time consuming but I think worth it. I wound up with a nice machine for experimenting with and writing blog posts.&lt;/p&gt;&#xA;&lt;p&gt;The setup process was as follows:&lt;/p&gt;&#xA;&lt;ol type=&#34;1&#34;&gt;&#xA;&lt;li&gt;Install macOS Snow Leopard on the bare disk of the Mac Mini&lt;/li&gt;&#xA;&lt;li&gt;Install macOS El Capitan on the Mac Mini after manually downloading it from Apple’s support site&lt;/li&gt;&#xA;&lt;li&gt;Run updates indicated by El Capitan&lt;/li&gt;&#xA;&lt;li&gt;Install macOS High Sierra on the Mac Mini after manually downloading it from the Apple’s support site&lt;/li&gt;&#xA;&lt;li&gt;Run updates indicated by High Sierra&lt;/li&gt;&#xA;&lt;li&gt;Manually download and install Xcode 10.1 command line tools&lt;/li&gt;&#xA;&lt;li&gt;Check and run some updates again&lt;/li&gt;&#xA;&lt;li&gt;Finally install Mac Ports …&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
            <pubDate>Sat, 18 Dec 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/12/18/Notes-on-setting-up-a-2010-Mac-Mini.md</guid>
        </item>
        <item>
            <title></title>
            <link>/blog/2021/11/27/run-freedos-1.3rc4.bash</link>
            <description>&lt;p&gt;#!/bin/bash&lt;/p&gt;&#xA;&lt;p&gt;if [ ! -f FD13FULL.vmdk ]; then if [ ! -f FD13-FullUSB.zip ]; then echo “Missing FD13FULL.vmdk, downloading FD13-FullUSB.zip” curl -L -O https://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/1.3/previews/1.3-rc4/FD13-FullUSB.zip fi echo “Unzipping FD13-FullUSB.zip” unzip FD13-FullUSB.zip fi&lt;/p&gt;&#xA;&lt;p&gt;if [ ! -f freedos.img ]; then echo “Creating fresh Harddisk as drive C:” qemu-img create freedos.img 750M echo “Booting machine using FD13FULL.vmdk as drive C:” echo “Installing FreeDOS on drive D:” qemu-system-i386&lt;br /&gt;&#xA;-name FreeDOS&lt;br /&gt;&#xA;-machine pc&lt;br /&gt;&#xA;-m 32&lt;br /&gt;&#xA;-boot order=c&lt;br /&gt;&#xA;-hda FD13FULL.vmdk&lt;br /&gt;&#xA;-hdb freedos.img&lt;br /&gt;&#xA;-parallel none&lt;br /&gt;&#xA;-vga cirrus&lt;br /&gt;&#xA;-display gtk else echo “Booting machine using freedos.img on drive C:” qemu-system-i386&lt;br /&gt;&#xA;-name FreeDOS&lt;br /&gt;&#xA;-machine pc&lt;br /&gt;&#xA;-m 32&lt;br /&gt;&#xA;-boot menu=on,strict=on&lt;br /&gt;&#xA;-hda freedos.img&lt;br /&gt;&#xA;-parallel none&lt;br /&gt;&#xA;-vga cirrus&lt;br /&gt;&#xA;-display gtk fi …&lt;/p&gt;&#xA;</description>
            <pubDate>Sat, 27 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/27/run-freedos-1.3rc4.bash</guid>
        </item>
        <item>
            <title>Setting up FreeDOS 1.3rc4 with Qemu</title>
            <link>/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.md</link>
            <description>&lt;h2 id=&#34;setting-up-freedos-1.3rc4-with-qemu&#34;&gt;Setting up FreeDOS 1.3rc4 with Qemu&lt;/h2&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-11-27&lt;/p&gt;&#xA;&lt;p&gt;In this article I’m going explore setting up FreeDOS with Qemu on my venerable Dell 4319 running Raspberry Pi Desktop OS (Debian GNU/Linux). First step is to download FreeDOS “Live CD” in the 1.3 RC4 release. See http://freedos.org/download/ for that.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-qemu&#34;&gt;Installing Qemu&lt;/h2&gt;&#xA;&lt;p&gt;I needed to install Qemu in my laptop. It runs the Raspberry Pi Desktop OS (i.e. Debian with Raspberry Pi UI). I choose to install the “qemu-system” package since I will likely use qemu for other things besides FreeDOS. The qemu-system package contains all the various systems I might want to emulate in other projects as well as several qemu utilities that are handy. Here’s the full sequence of &lt;code&gt;apt&lt;/code&gt; commands I ran (NOTE: these included making sure my laptop was up to date before I installed qemu-system). …&lt;/p&gt;&#xA;</description>
            <pubDate>Sat, 27 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.md</guid>
        </item>
        <item>
            <title></title>
            <link>/blog/2021/11/26/Types.Mod</link>
            <description>&lt;p&gt;MODULE Types;&lt;/p&gt;&#xA;&lt;p&gt;IMPORT Strings;&lt;/p&gt;&#xA;&lt;p&gt;CONST BUFSIZE* = 256;&lt;/p&gt;&#xA;&lt;p&gt;(* IsIntDigit checks if an INTEGER is in the range of 0 through 9 &lt;em&gt;) PROCEDURE IsIntDigit&lt;/em&gt;(i : INTEGER) : BOOLEAN; BEGIN RETURN ((i &amp;gt;= 0) &amp;amp; (i &amp;lt;= 9)) END IsIntDigit;&lt;/p&gt;&#xA;&lt;p&gt;(* IsCharDigit checks ch and returns TRUE if a digit (“0” .. “9” found) or FALSE if it is not a digit. &lt;em&gt;) PROCEDURE IsCharDigit&lt;/em&gt;(ch : CHAR) : BOOLEAN; BEGIN RETURN ((ch &amp;gt;= “0”) &amp;amp; (ch &amp;lt;= “9”)) END IsCharDigit; …&lt;/p&gt;&#xA;</description>
            <pubDate>Fri, 26 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/26/Types.Mod</guid>
        </item>
        <item>
            <title></title>
            <link>/blog/2021/11/26/TypesTest.Mod</link>
            <description>&lt;p&gt;MODULE TypesTest; IMPORT Types, T := Tests;&lt;/p&gt;&#xA;&lt;p&gt;VAR ts : T.TestSet;&lt;/p&gt;&#xA;&lt;p&gt;PROCEDURE TestIsA() : BOOLEAN; VAR test, expected, got : BOOLEAN; BEGIN test := TRUE; expected := TRUE; got := Types.IsCharDigit(“7”); T.ExpectedBool(expected, got, “Types.IsDigit(7)”, test);&lt;/p&gt;&#xA;&lt;p&gt;expected := FALSE; got := Types.IsCharDigit(“-”); T.ExpectedBool(expected, got, “Types.IsDigit(-)”, test); got := Types.IsCharDigit(“q”); T.ExpectedBool(expected, got, “Types.IsDigit(q)”, test);&lt;/p&gt;&#xA;&lt;p&gt;RETURN test END TestIsA; …&lt;/p&gt;&#xA;</description>
            <pubDate>Fri, 26 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/26/TypesTest.Mod</guid>
        </item>
        <item>
            <title>Portable Conversions (Integers)</title>
            <link>/blog/2021/11/26/Portable-Conversions-Integers.md</link>
            <description>&lt;h1 id=&#34;portable-conversions-integers&#34;&gt;Portable conversions (Integers)&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-11-26&lt;/p&gt;&#xA;&lt;p&gt;An area in working with Oberon-07 on a POSIX machine that has proven problematic is type conversion. In particular converting to and from INTEGER or REAL and ASCII. None of the three compilers I am exploring provide a common way of handling this. I’ve explored relying on C libraries but that approach has it’s own set of problems. I’ve become convinced a better approach is a pure Oberon-07 library that handles type conversion with a minimum of assumptions about the implementation details of the Oberon compiler or hardware. I’m calling my conversion module “Types”. The name is short and descriptive and seems an appropriate name for a module consisting of type conversion tests and transformations. My initial implementation will focusing on converting integers to and from ASCII.&lt;/p&gt;&#xA;&lt;h2 id=&#34;integer-to-ascii-and-back-again&#34;&gt;INTEGER to ASCII and back again&lt;/h2&gt;&#xA;&lt;p&gt;I don’t want to rely on the representation of the INTEGER value in the compiler or at the machine level. That has lead me to think in terms of an INTEGER as a signed whole number. …&lt;/p&gt;&#xA;</description>
            <pubDate>Fri, 26 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/26/Portable-Conversions-Integers.md</guid>
        </item>
        <item>
            <title></title>
            <link>/blog/2021/11/22/HelloworldFile.Mod</link>
            <description>&lt;p&gt;MODULE HelloworldFile;&lt;/p&gt;&#xA;&lt;p&gt;IMPORT Files, Strings;&lt;/p&gt;&#xA;&lt;p&gt;CONST OberonEOL = 1; UnixEOL = 2; WindowsEOL = 3;&lt;/p&gt;&#xA;&lt;p&gt;VAR (* holds the eol marker type to use in WriteLn() &lt;em&gt;) eolType : INTEGER; (&lt;/em&gt; Define a file handle &lt;em&gt;) f : Files.File; (&lt;/em&gt; Define a file rider *) r : Files.Rider;&lt;/p&gt;&#xA;&lt;p&gt;PROCEDURE WriteLn(VAR r : Files.Rider); BEGIN IF eolType = WindowsEOL THEN (* A DOS/Windows style line ending, LFCR &lt;em&gt;) Files.Write(r, 13); Files.Write(r, 10); ELSIF eolType = UnixEOL THEN (&lt;/em&gt; Linux/macOS style line ending, LF &lt;em&gt;) Files.Write(r, 10); ELSE (&lt;/em&gt; Oberon, RISC OS style line ending, CR *) Files.Write(r, 13); END; END WriteLn; …&lt;/p&gt;&#xA;</description>
            <pubDate>Mon, 22 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/22/HelloworldFile.Mod</guid>
        </item>
        <item>
            <title>Revisiting Files</title>
            <link>/blog/2021/11/22/Revisiting-Files.md</link>
            <description>&lt;h1 id=&#34;revisiting-files&#34;&gt;Revisiting Files&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-11-22&lt;/p&gt;&#xA;&lt;p&gt;In October I had an Email exchange with Algojack regarding a buggy example in &lt;a href=&#34;../../../2020/05/09/Oberon-07-and-the-filesystem.html&#34;&gt;Oberon-07 and the file system&lt;/a&gt;. The serious bug was extraneous non-printable characters appearing a plain text file containing the string “Hello World”. The trouble with the example was a result of my misreading the Oakwood guidelines and how &lt;strong&gt;Files.WriteString()&lt;/strong&gt; is required to work. The &lt;strong&gt;Files.WriteString()&lt;/strong&gt; procedure is supposed to write every element of a string to a file. This &lt;strong&gt;includes the trailing Null character&lt;/strong&gt;. The problem for me is &lt;strong&gt;Files.WriteString()&lt;/strong&gt; litters plain text files with tailing nulls. What I should have done was write my own &lt;strong&gt;WriteString()&lt;/strong&gt; and &lt;strong&gt;WriteLn()&lt;/strong&gt;. The program &lt;a href=&#34;./HelloworldFile.Mod&#34;&gt;HelloworldFile&lt;/a&gt; below is a more appropriate solution to writing strings and line endings than relying directly on &lt;strong&gt;Files&lt;/strong&gt;. In a future post I will explorer making this more generalized in a revised “Fmt” module.&lt;/p&gt;&#xA;&lt;p&gt;~~~ MODULE HelloworldFile;&lt;/p&gt;&#xA;&lt;p&gt;IMPORT Files, Strings; …&lt;/p&gt;&#xA;</description>
            <pubDate>Mon, 22 Nov 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/11/22/Revisiting-Files.md</guid>
        </item>
        <item>
            <title>Combining Oberon-07 with C using Obc-3</title>
            <link>/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.md</link>
            <description>&lt;h1 id=&#34;combing-oberon-07-with-c-using-obc-3&#34;&gt;Combing Oberon-07 with C using Obc-3&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-06-14&lt;/p&gt;&#xA;&lt;p&gt;This post explores integrating C code with an Oberon-07 module use Mike Spivey’s Obc-3 Oberon Compiler. Last year I wrote a similar post for Karl Landström’s &lt;a href=&#34;/blog/2020/05/01/Combining-Oberon-and-C.html&#34;&gt;OBNC&lt;/a&gt;. This goal of this post is to document how I created a version of Karl’s Extension Library that would work with Mike’s Obc-3 compiler. If you want to take a shortcut you can see the results on GitHub in my &lt;a href=&#34;https://github.com/rsdoiel/obc-3-libext&#34;&gt;obc-3-libext&lt;/a&gt; repository.&lt;/p&gt;&#xA;&lt;p&gt;From my time with OBNC I’ve come to rely on three modules from Karl’s extension library. When trying to port some of my code to use with Mike’s compiler. That’s where I ran into a problem with that dependency. Karl’s modules aren’t available. I needed an &lt;a href=&#34;http://miasap.se/obnc/obncdoc/ext/extArgs.def.html&#34;&gt;extArgs&lt;/a&gt;, an &lt;a href=&#34;http://miasap.se/obnc/obncdoc/ext/extEnv.def.html&#34;&gt;extEnv&lt;/a&gt; and &lt;a href=&#34;http://miasap.se/obnc/obncdoc/ext/extConvert.def.html&#34;&gt;extConvert&lt;/a&gt;. …&lt;/p&gt;&#xA;</description>
            <pubDate>Mon, 14 Jun 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.md</guid>
        </item>
        <item>
            <title>Combining Oberon-07 with C using Obc-3</title>
            <link>/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.md</link>
            <description>&lt;h1 id=&#34;combing-oberon-07-with-c-using-obc-3&#34;&gt;Combing Oberon-07 with C using Obc-3&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-06-14&lt;/p&gt;&#xA;&lt;p&gt;This post explores integrating C code with an Oberon-07 module use Mike Spivey’s Obc-3 Oberon Compiler. Last year I wrote a similar post for Karl Landström’s &lt;a href=&#34;/blog/2020/05/01/Combining-Oberon-and-C.html&#34;&gt;OBNC&lt;/a&gt;. This goal of this post is to document how I created a version of Karl’s Extension Library that would work with Mike’s Obc-3 compiler. If you want to take a shortcut you can see the results on GitHub in my &lt;a href=&#34;https://github.com/rsdoiel/obc-3-libext&#34;&gt;obc-3-libext&lt;/a&gt; repository.&lt;/p&gt;&#xA;&lt;p&gt;From my time with OBNC I’ve come to rely on three modules from Karl’s extension library. When trying to port some of my code to use with Mike’s compiler. That’s where I ran into a problem with that dependency. Karl’s modules aren’t available. I needed an &lt;a href=&#34;http://miasap.se/obnc/obncdoc/ext/extArgs.def.html&#34;&gt;extArgs&lt;/a&gt;, an &lt;a href=&#34;http://miasap.se/obnc/obncdoc/ext/extEnv.def.html&#34;&gt;extEnv&lt;/a&gt; and &lt;a href=&#34;http://miasap.se/obnc/obncdoc/ext/extConvert.def.html&#34;&gt;extConvert&lt;/a&gt;. …&lt;/p&gt;&#xA;</description>
            <pubDate>Mon, 14 Jun 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.md</guid>
        </item>
        <item>
            <title></title>
            <link>/blog/2021/05/16/Chars.Mod</link>
            <description>&lt;p&gt;(** Chars.Mod - A module for working with CHAR and ARRAY OF CHAR data types.&lt;/p&gt;&#xA;&lt;p&gt;Copyright (C) 2020, 2021 R. S. Doiel &lt;a href=&#34;mailto:rsdoiel@gmail.com&#34; class=&#34;email&#34;&gt;rsdoiel@gmail.com&lt;/a&gt; This Source Code Form is subject to the terms of the Mozilla PublicLicense, v. 2.0. If a copy of the MPL was not distributed with thisfile, You can obtain one at http://mozilla.org/MPL/2.0/. *) MODULE Chars;&lt;/p&gt;&#xA;&lt;p&gt;(** Chars.Mod provides a modern set of procedures for working with CHAR and ARRAY OF CHAR. It is a drop in replacement for the Oakwood definition Strings module.&lt;/p&gt;&#xA;&lt;p&gt;Example:&lt;/p&gt;&#xA;&lt;p&gt;IMPORT Strings := Chars; …&lt;/p&gt;&#xA;</description>
            <pubDate>Sun, 16 May 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/05/16/Chars.Mod</guid>
        </item>
        <item>
            <title>Beyond Oakwood, Modules and Aliases</title>
            <link>/blog/2021/05/16/Beyond-Oakwood-Modules-and-Aliases.md</link>
            <description>&lt;h1 id=&#34;beyond-oakwood-modules-and-aliases&#34;&gt;Beyond Oakwood, Modules and Aliases&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-05-16&lt;/p&gt;&#xA;&lt;p&gt;Oakwood is the name used to refer to an early Oberon language standardization effort in the late 20th century. It’s the name of a hotel where compiler developers and the creators of Oberon and the Oberon System met to discuss compatibility. The lasting influence on the 21st century Oberon-07 language can be seen in the standard set of modules shipped with POSIX based Oberon-07 compilers like &lt;a href=&#34;https://miasap.se/obnc/&#34;&gt;OBNC&lt;/a&gt;, &lt;a href=&#34;https://github.com/vishaps/voc&#34;&gt;Vishap Oberon Compiler&lt;/a&gt; and the &lt;a href=&#34;http://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler&#34;&gt;Oxford Oberon Compiler&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The Oakwood guidelines described a minimum expectation for a standard set of modules to be shipped with compilers. The modules themselves are minimalist in implementation. Minimalism can assist in easing the learning curve and encouraging a deeper understanding of how things work.&lt;/p&gt;&#xA;&lt;p&gt;The Oberon-07 language is smaller than the original Oberon language and the many dialects that followed. I think of Oberon-07 as the distillation of all previous innovation. It embodies the spirit of “Simple but not simpler than necessary”. Minimalism is a fit description of the adaptions of the Oakwood modules for Oberon-07 in the POSIX environment. …&lt;/p&gt;&#xA;</description>
            <pubDate>Sun, 16 May 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/05/16/Beyond-Oakwood-Modules-and-Aliases.md</guid>
        </item>
        <item>
            <title>Ofront on Raspberry Pi OS</title>
            <link>/blog/2021/04/25/Ofront-on-Rasberry-Pi-OS.md</link>
            <description>&lt;h1 id=&#34;ofront-on-raspberry-pi-os&#34;&gt;Ofront on Raspberry Pi OS&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-04-25&lt;/p&gt;&#xA;&lt;p&gt;This post is about getting Ofront&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; up and running on Raspberry Pi OS&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. Ofront provides a Oberon-2 to C transpiler as well as a Oberon V4[^3] development environment. There are additional clever tools like &lt;code&gt;ocat&lt;/code&gt; that are helpful working with the differences in text file formats between Oberon System 3, V4 and POSIX. The V4 implementation sits nicely on top of POSIX with minimal compromises that distract from the Oberon experience.&lt;/p&gt;&#xA;&lt;section class=&#34;footnotes footnotes-end-of-document&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr /&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn1&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;Ofront was developed by Joseph Templ, see http://www.software-templ.com/&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li id=&#34;fn2&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;see https://www.raspberrypi.org/software/ (a 32 bit Debian based Linux for both i386 and ARM) …&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/section&gt;&#xA;</description>
            <pubDate>Sun, 25 Apr 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/04/25/Ofront-on-Rasberry-Pi-OS.md</guid>
        </item>
        <item>
            <title>Updating Schema in SQLite3</title>
            <link>/blog/2021/04/16/Updating-Schema-in-SQLite3.md</link>
            <description>&lt;h1 id=&#34;updating-schema-in-sqlite3&#34;&gt;Updating Schema in SQLite3&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2020-04-16&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sqlite.org/docs.html&#34;&gt;SQLite3&lt;/a&gt; is a handy little database as single file tool. You can interact with the file through largely standard SQL commands and embed it easily into applications via the C libraries that the project supports. It is also available from various popular scripting languages like Python, PHP, and Lua. One of the things I occasionally need to do and always seems to forget it how to is modify a table schema where I need to remove a column&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. So here are some of the basics do I can quickly find them later and avoid reading various articles tutorials because the search engines doesn’t return the page in the SQLite documentation.&lt;/p&gt;&#xA;&lt;p&gt;In the next sections I’ll be modeling a simple person object with a id, uname, display_name, role and updated fields. …&lt;/p&gt;&#xA;&lt;section class=&#34;footnotes footnotes-end-of-document&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr /&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn1&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;The SQL &lt;code&gt;ALTER TABLE table_name DROP COLUMN column_name&lt;/code&gt; does not work in SQLite3&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/section&gt;&#xA;</description>
            <pubDate>Fri, 16 Apr 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/04/16/Updating-Schema-in-SQLite3.md</guid>
        </item>
        <item>
            <title>A2 Oberon on VirtualBox 6.1</title>
            <link>/blog/2021/04/02/A2-Oberon-on-VirtualBox-6.1.md</link>
            <description>&lt;h1 id=&#34;a2-oberon-on-virtualbox-6.1&#34;&gt;A2 Oberon on VirtualBox 6.1&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-04-02&lt;/p&gt;&#xA;&lt;p&gt;This is a short article documenting how I install A2 Oberon in VirtualBox using the &lt;a href=&#34;https://freedos.org&#34;&gt;FreeDOS 1.2&lt;/a&gt;, the A2 &lt;a href=&#34;https://sourceforge.net/projects/a2oberon/files/&#34;&gt;ISO&lt;/a&gt; cd image and &lt;a href=&#34;https://virtualbox.org&#34;&gt;VirtualBox 6.1&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Basic Approach ————– …&lt;/p&gt;&#xA;</description>
            <pubDate>Fri, 02 Apr 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/04/02/A2-Oberon-on-VirtualBox-6.1.md</guid>
        </item>
        <item>
            <title>ETH Oberon System 3 on VirtualBox 6.1</title>
            <link>/blog/2021/03/17/NativeOberon-VirtualBox.md</link>
            <description>&lt;h1 id=&#34;eth-oberon-system-3-on-virtualbox-6.1&#34;&gt;ETH Oberon System 3 on VirtualBox 6.1&lt;/h1&gt;&#xA;&lt;p&gt;By R. S. Doiel, 2021-03-17&lt;/p&gt;&#xA;&lt;p&gt;In this post I am walking through installing Native Oberon 2.3.7 (aka ETH Oberon System 3) on a virtual machine running under VirtualBox 6.1. It is a follow up to my 2019 post &lt;a href=&#34;/blog/2019/07/28/freedos-to-oberon-system-3.html&#34; title=&#34;Link to old blog post for bringing up Oberon System 3 in VirtualBox 6.0 using FreeDOS 1.2&#34;&gt;FreeDOS to Oberon System 3&lt;/a&gt;. To facilitate the install I will first prepare my virtual machine as a FreeDOS 1.2 box. This simplifies getting the virtual machines’ hard disk partitioned and formatted correctly. When Native Oberon was released back in 1990’s most Intel flavored machines shipped with some sort Microsoft OS on them. I believe that is why the tools and instructions for Native Oberon assume you’re installing over or along side a DOS partition.&lt;/p&gt;&#xA;&lt;h2 id=&#34;building-our-machine&#34;&gt;Building our machine&lt;/h2&gt;&#xA;&lt;p&gt;Requirements ———— …&lt;/p&gt;&#xA;</description>
            <pubDate>Wed, 17 Mar 2021 00:00:00 UTC</pubDate>
            <guid>/blog/2021/03/17/NativeOberon-VirtualBox.md</guid>
        </item>
    </channel>
</rss>