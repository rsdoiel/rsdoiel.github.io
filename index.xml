<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <atom:link href="https://rsdoiel.github.io/index.xml" rel="self" type="application/rss+xml"/>
        <title>R. S. Doiel Website</title>
        <link>https://rsdoiel.github.io</link>
        <description>Robert&#39;s Website</description>
        <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
        <lastBuildDate>Mon, 22 Aug 2022 12:48:09 -0700</lastBuildDate>
        <generator>pdtk rss 0.0.3</generator>
        <item>
            <title>OPML to Markdown and back</title>
            <link>https://rsdoiel.github.io/blog/2016/05/28/OPML-to-Markdown-and-back.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;I wrote a Go language package to sort [OPML](http://dev.opml.org/spec2.html) outlines. &#xA;I wrote this because my preferred [feed reader ](http://goread.io) supports manual &#xA;sorting but not automatic alpha sorting by the _outline_ element&#39;s _text_ attribute.&#xA;&#xA;Out of the box the OPML 2 Spec provides attributes indicating inclusion of other OPML files,&#xA;scripts, basic metadata (create, modified, authorship), and even directory structures.&#xA;&#xA;[Fargo](http://fargo.io) allows user defined attributes to be applied to the _outline_ &#xA;element in OPML. This could be used in support some of the &#xA;[Scrivener](https://www.literatureandlatte.com/scrivener.php)&#xA;features I miss such as describing how to render a project to various formats such as&#xA;rtf, pdf, ePub, web pages or even [Final Draft fdx](https://www.finaldraft.com/) files.&#xA;&#xA;I write allot of Markdown formatted text.  Markdown is simple to index, &#xA;search and convert into useful formats. Markdown is not good at expressing more&#xA;complex structures such as metadata. Website generators that use markdown often&#xA;require a preamble or _front matter_ in the markdown to provide any metadata. This&#xA;leaves your document head cluttered and less human readable. ...</description>
            <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/05/28/OPML-to-Markdown-and-back.html</guid>
        </item>
        <item>
            <title>Instant Articles, Accelerated Mobile Pages, Twitter Cards and Open Graph</title>
            <link>https://rsdoiel.github.io/blog/2016/05/30/amp-cards-and-open-graph.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;The web has gotten slow. In [2016](http://httparchive.org/trends.php) the &#xA;average page weight is in multi-megabytes and the average number of network &#xA;requests needed to deliver the content is counted in &#xA;the hundreds. In the mix are saturated networks and a continued public &#xA;expectation of responsiveness (web wisdom suggests you have about 3 seconds &#xA;before people give up).  The odd thing is we&#39;ve known how to build fast &#xA;websites for a [decade](https://www.stevesouders.com/) or so.  &#xA;Collectively we don&#39;t build them [fast](https://www.sitepoint.com/average-page-weight-increased-another-16-2015/).&#xA;&#xA;Corporations believe they have the answer and they are providing us &#xA;with another set of abstractions. In a few years maybe these will &#xA;get distilled down to a shared common view but in the mean time disc &#xA;costs remain reasonably priced and generating these new forms of &#xA;pages or feeds is a template or so away.&#xA;&#xA;+ [Twitter Cards](https://dev.twitter.com/cards/overview) and [Open Graph](http://ogp.me/)&#xA;  + Exposing your content via social media, search results or embedded in pages via an aside element&#xA;+ [Accelerated Mobile Pages](https://www.ampproject.org/) (also called AMP)&#xA;  + A simplification in content delivery to improve web reading experience&#xA;  + Its usefulness is it proscribes an approach to leverage what we have&#xA;  + AMP works well with Twitter Cards, Open Graph and can leverage Web Components&#xA;+ [Instant Articles](https://instantarticles.fb.com/)&#xA;  + a format play to feed the walled garden of Facebook for iOS and Android devices&#xA;&#xA;Twitter&#39;s Titter Cards and Facebook&#39;s Open Graph offer approaches to &#xA;build off of our existing meta elements in an HTML page&#39;s document &#xA;head.  They are named space to avoid collisions but supporting both &#xA;will still result in some content duplication. The k-weight &#xA;difference in the resulting HTML pages isn&#39;t too bad. ...</description>
            <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/05/30/amp-cards-and-open-graph.html</guid>
        </item>
        <item>
            <title>How to make a Pi-Top more Raspbian</title>
            <link>https://rsdoiel.github.io/blog/2016/07/04/How-To-Make-A-PiTop-More-Raspbian.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;I have a first generation Pi-Top.  I like the idea but found I didn&#39;t use it much due to a preference for&#xA;basic Raspbian. With the recent Pi-TopOS upgrades I realized getting back to basic Raspbian was relatively&#xA;straight forward.&#xA;&#xA;1. Make sure you&#39;re running the latest Pi-TopOS based on Jessie&#xA;2. Login into your Pi-Top normally&#xA;3. From the Pi-Top dashboard select the &#34;Desktop&#34; icon&#xA;4. When you see the familiar Raspbian desktop click on the following things&#xA;&#x9;+ Click on the Raspberry Menu (upper left corner)&#xA;&#x9;+ Click on Preferences&#xA;&#x9;+ Click on Raspberry Pi Configuration&#xA;5. I made the following changes to my System configuration&#xA;&#x9;+ Under *Boot* I selected &#34;To CLI&#34;&#xA;&#x9;+ I unchecked *login as user &#34;pi&#34;*&#xA;6. Restart your Pi Top&#xA;&#x9;+ Click on Raspberry Menu in the upper left of the desktop&#xA;&#x9;+ Click on shutdown&#xA;&#x9;+ Select *reboot*&#xA;7. When you restart you&#39;ll see an old school console login, login as the pi user using your Pi-Top password&#xA;8. Remove the following program use the *apt* command&#xA;&#x9;+ ceed-universe&#xA;&#x9;+ pt-dashboard&#xA;&#x9;+ pt-splashscreen&#xA;&#xA;```&#xA;    sudo apt purge ceed-universe pt-dashboard pt-splashscreen&#xA;```&#xA;&#xA;Note: pi-battery, pt-hub-controller, pt-ipc, pt-speaker are hardware drivers specific to your Pi-Top so you probably&#xA;want to keep them. ...</description>
            <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/07/04/How-To-Make-A-PiTop-More-Raspbian.html</guid>
        </item>
        <item>
            <title>Exploring Bash for Windows 10 Pro</title>
            <link>https://rsdoiel.github.io/blog/2016/08/15/Setting-up-Go-under-Bash-for-Windows-10.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;UPDATE (2016-10-27, RSD): Today trying to compile Go 1.7.3 under &#xA;    Windows 10 Pro I&#39;ve am getting compile errors when the &#xA;    assembler is being built.  I can compile go1.4.3 but see errors &#xA;    in some of the tests results.&#xA;&#xA;I am running Windows 10 Pro (64bit) Anniversary edition under Virtual Box. The VM was upgraded from an earlier version of Windows 10 Pro (64bit). The VM was allocated 4G or ram, 200G disc and simulating 2 cores.  After the upgrade I took the following steps&#xA;&#xA;+ Search with Bing for &#34;Bash for Windows&#34; &#xA;    + Bing returns http://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/&#xA;+ Switch on developer mode for Windows&#xA;+ Turned on Linux Subsystem Beta (searched for &#34;Turning on Features&#34;)&#xA;+ Reboot&#xA;+ Search for &#34;Bash&#34; and clicked on &#34;Run Bash command&#34;&#xA;+ Answered &#34;y&#34;&#xA;+ Waited for download and extracted file system&#xA;+ When prompted setup developer account with username/password&#xA;    + Documentation can be found at https://aka.ms/wsldocs&#xA;+ Exit root install shell&#xA;+ Search for &#34;Bash&#34; locally&#xA;+ Launched &#34;Bash on Ubuntu on Windows&#34;&#xA;+ Authenticate with your username/password&#xA;&#xA;With Bash installed these are the steps I took to compile Go&#xA;under Bash on Ubuntu on Windows. ...</description>
            <pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/08/15/Setting-up-Go-under-Bash-for-Windows-10.html</guid>
        </item>
        <item>
            <title>From Markdown and Bash to mkpage</title>
            <link>https://rsdoiel.github.io/blog/2016/08/16/From-Markdown-and-Bash-to-mkpage.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;When I started maintaining a website on GitHub a few years ago my needs&#xA;were so simple I hand coded the HTML.  Eventually I adopted &#xA;a markdown processor for maintaining the prose. My &#34;theme&#34; was a&#xA;CSS file and some HTML fragments to wrap the markdown output. If I needed &#xA;interactivity I used JavaScript to access content via a web API. &#xA;Life was simple, all I had to learn to get started was Git and how to&#xA;populate a branch called &#34;gh-pages&#34;.&#xA;&#xA;Recently my website needs have grown. I started experimenting with static&#xA;site generators thinking an existing system would be the right fit. &#xA;What I found were feature rich systems that varied primarily in &#xA;implementation language and template engine. Even though I wasn&#39;t&#xA;required to run Apache, MySQL and PHP/Perl/Python/Ruby/Tomcat it felt &#xA;like the static site generators were racing to fill a complexity &#xA;vacuum. In the end they were interesting to explore but far more&#xA;than I was willing to run. I believe modern content management systems can&#xA;be deconstruct into something simpler.&#xA;&#xA;Some of the core elements of modern content management systems are&#xA;&#xA;+ creation and curation of data sources (including metadata)&#xA;+ transforming data sources if needed&#xA;+ mapping a data source to appropriate template set&#xA;+ rendering template sets to produce a final website ...</description>
            <pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/08/16/From-Markdown-and-Bash-to-mkpage.html</guid>
        </item>
        <item>
            <title>Android, Termux and Dev Environment</title>
            <link>https://rsdoiel.github.io/blog/2016/09/20/Android-Termux-Dev-environment.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;Recently I got a new Android 6 tablet. I got a case with a tiny Bluetooth keyboard. I started wondering if I could use it as a development device when on the road. So this is my diary of that test.&#xA;&#xA;1. Find a way to run Bash without rooting my device&#xA;2. See if I could use my normal web toolkit&#xA;&#x9;+ curl&#xA;&#x9;+ jq&#xA;&#x9;+ sed&#xA;&#x9;+ grep&#xA;3. See if I could compile or add my own custom Golang programs&#xA;4. Test setup by running a local static file server, mkpage and update my website&#xA;&#xA;After searching with Duck Duck Go and Google I came across the [termux](https://termux.com). Termux provides a minimal Bash shell environment with support for adding&#xA;packages with _apt_ and _dpkg_.  The repositories visible to *termux* include&#xA;most of the C tool chain (e.g. clang, make, autoconf, etc) as well as my old Unix favorites _curl_, _grep_, _sed_, _gawk_ and a new addition to my toolkit _jq_.  Additionally you&#39;ll find recent versions (as of Sept. 2016) versions of _Golang_, _PHP_, _python_, and _Ruby_.&#xA;&#xA;This quickly brought me through step 3.  Installing _go_, _git_, and _openssh_ completed what I needed to test static site development with some of the tools in our incubator at [Caltech Library](https://caltechlibrary.github.io). ...</description>
            <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/09/20/Android-Termux-Dev-environment.html</guid>
        </item>
        <item>
            <title>Cross compiling Go 1.8.3 for Pine64 Pinebook</title>
            <link>https://rsdoiel.github.io/blog/2017/06/16/cross-compiling-go.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;Pine64&#39;s Pinebook has a 64-bit Quad-Core ARM Cortex A53 which is &#xA;not the same ARM processor found on a Raspberry Pi 3. As a &#xA;result it needs its own compiled version of Go. Fortunately cross &#xA;compiling Go is very straight forward. I found two helpful Gists&#xA;on GitHub discussing compiling Go for a 64-Bit ARM processor.&#xA;&#xA;+ [conoro&#39;s gist](https://gist.github.com/conoro/4fca191fad018b6e47922a21fab499ca)&#xA;+ [truedat101&#39;s gist](https://gist.github.com/truedat101/5898604b1f7a1ec42d65a75fa6a0b802)&#xA;&#xA;I am using a Raspberry Pi 3, raspberrypi.local, as my cross compile &#xA;host. Go 1.8.3 is already compiled and available.  Inspired by the &#xA;gists I worked up with this recipe to bring a Go 1.8.3 to my Pinebook.&#xA;&#xA;```shell&#xA;    cd&#xA;    mkdir -p gobuild&#xA;    cd gobuild&#xA;    git clone https://github.com/golang/go.git go1.8.3&#xA;    cd go1.8.3&#xA;    git checkout go1.8.3&#xA;    export GOHOSTARCH=arm&#xA;    export GOARCH=arm64&#xA;    export GOOS=linux&#xA;    cd src&#xA;    ./bootstrap.bash&#xA;``` ...</description>
            <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/06/16/cross-compiling-go.html</guid>
        </item>
        <item>
            <title>NodeJS, NPM, Electron</title>
            <link>https://rsdoiel.github.io/blog/2017/10/20/node-npm-electron.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;Electron is an app platform leveraging web technologies. Conceptually it is a&#xA;mashup of NodeJS and Chrome browser. [Electron](https://electron.atom.io/) site&#xA;has a nice starter app. It displays a window with Electron version info and&#xA;&#39;hello world&#39;.&#xA;&#xA;Before you can get going with _Electron_ you need to have a&#xA;working _NodeJS_ and _NPM_. I usually compile from source and this&#xA;was my old recipe (adjusted for v8.7.0).&#xA;&#xA;```shell&#xA;    cd&#xA;    git clone https://github.com/nodejs/node.git&#xA;    cd node&#xA;    git checkout v8.7.0&#xA;    ./configure --prefix=$HOME&#xA;    make &amp;&amp; make install&#xA;```&#xA;&#xA;To install an _Electron Quick Start_ I added the additional steps. ...</description>
            <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/10/20/node-npm-electron.html</guid>
        </item>
        <item>
            <title>Harvesting my Gists from GitHub</title>
            <link>https://rsdoiel.github.io/blog/2017/12/10/harvesting-my-gists-from-github.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is a just quick set of notes on harvesting my Gists on GitHub so I&#xA;have an independent copy for my own website.&#xA;&#xA;In this gist I assume you are using Bash on a POSIX system (e.g. Raspbian &#xA;on a Raspberry Pi) with the standard compliment of Unix utilities (e.g. cut, &#xA;sed, curl). I also use Stephen Dolan&#39;s [jq](https://github.com/stedolan/jq)&#xA;as well as Caltech Library&#39;s [datatools](https://github.com/caltechlibrary/datatools).&#xA;See the respective GitHub repositories for installation instructions.&#xA;The gist harvest process was developed against GitHub&#39;s v3 API&#xA;(see developer.github.com).&#xA;&#xA;In the following examples &#34;USER&#34; is assumed to hold your GitHub user id &#xA;(e.g. rsdoiel for https://github.com/rsdoiel).&#xA;&#xA;This retrieves the public view of your profile. ...</description>
            <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/12/10/harvesting-my-gists-from-github.html</guid>
        </item>
        <item>
            <title>Raspbian Stretch on DELL E4310 Laptop</title>
            <link>https://rsdoiel.github.io/blog/2017/12/18/raspbian-stretch-on-amd64.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;Today I bought a used Dell E4310 laptop. The E4310 is an &#34;old model&#34; now&#xA;but certainly not vintage yet.  It has a nice keyboard and reasonable &#xA;screen size and resolution. I bought it as a writing machine. I mostly&#xA;write in Markdown or Fountain depending on what I am writing these days.&#xA;&#xA;The machine came with a minimal bootable Windows 7 CD and an blank &#xA;internal drive. Windows 7 installed fine but was missing the network &#xA;drivers for WiFi.  I had previously copied the new [Raspbian Stretch](https://www.raspberrypi.org/blog/raspbian-stretch/) ISO to a USB drive. While&#xA;the E4310 didn&#39;t support booting from the USB drive Windows 7 does make&#xA;it easy to write to a DVRW. After digging around and finding a blank disc&#xA;I could write to it was a couple of mouse clicks and a bit of waiting &#xA;and I had new bootable Raspbian Stretch CD.&#xA;&#xA;Booting from the Raspbian Stretch CD worked like a charm. I selected &#xA;the graphical install which worked well though initially the trackpad &#xA;wasn&#39;t visible so I just used keyboard navigation to setup the install.&#xA;After the installation was complete and I rebooted without the install&#xA;disc everything worked except the internal WiFi adapter.&#xA;&#xA;I had several WiFi dongles that I use with my Raspberry Pis so I &#xA;borrowed one and with that was able to run the usual `sudo apt update &#xA;&amp;&amp; sudo apt upgrade`. ...</description>
            <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/12/18/raspbian-stretch-on-amd64.html</guid>
        </item>
        <item>
            <title>Go, Bleve and Library oriented software</title>
            <link>https://rsdoiel.github.io/blog/2018/02/19/go-bleve-and-libraries.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;In 2016, Stephen Davison, asked me, &#34;Why use Go and Blevesearch for&#xA;our library projects?&#34; After our conversation I wrote up some notes so&#xA;I would remember. It is now 2018 and I am revising these notes. I&#xA;think our choice paid off.  What follows is the current state of my&#xA;reflection on the background, rational, concerns, and risk mitigation&#xA;strategies so far for using [Go](https://golang.org) and&#xA;[Blevesearch](https://blevesearch.com) for Caltech Library projects.&#xA;&#xA;I first came across Go a few years back when it was announced as an&#xA;Open Source project by Google at an Google I/O event (2012). The&#xA;original Go authors were Robert Griesemer, Rob Pike, and Ken&#xA;Thompson. What I remember from that presentation was Go was a rather&#xA;consistent language with the features you need but little else.  Go&#xA;developed at Google as a response to high development costs for C/C++&#xA;and Java in addition to challenges with performance and slow&#xA;compilation times.  As a language I would put Go between C/C++ and&#xA;Java. It comes the ease of writing and reading you find in languages&#xA;like Python. Syntax is firmly in the C/C++ family but heavily&#xA;simplified. Like Java it provides many modern features including rich basic&#xA;data structures and garbage collection. It has a very complete standard&#xA;library and provides very good tooling.  This makes it easy to&#xA;generate code level documentation, format code, test, efficiently profile, &#xA;and debug.&#xA;&#xA;Often programming languages develop around a specific set of needs.&#xA;This is true for Go. Given the Google origin it should not be&#xA;surprising to find that Go&#39;s primary strengths are working with &#xA;structured data, I/O and concurrency. The rich standard&#xA;library is organized around a package concept. These include packages&#xA;supporting network protocols, file and socket I/O as well as various&#xA;encoding and compression scheme. It has particularly strong support&#xA;for XML, JSON, CSV formatted data out of the box. It has a template&#xA;library for working with plain text formats as well as generating safe&#xA;HTML. You can browse Go&#39;s standard library https://golang.org/pkg/.&#xA;&#xA;An additional feature is Go&#39;s consistency. Go code that compiles under&#xA;version 1.0 still compiles under 1.10. Even before 1.0 code changes&#xA;that were breaking came with tooling to automatically updates existing&#xA;code.  Running code is a strong element of Go&#39;s evolution. ...</description>
            <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/02/19/go-bleve-and-libraries.html</guid>
        </item>
        <item>
            <title>Go based Python modules</title>
            <link>https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;The problem: I have written a number of Go packages at work.&#xA;My colleagues know Python and I&#39;d like them to be able to use the&#xA;packages without resorting to system calls from Python to the&#xA;command line implementations. The solution is create a C-Shared&#xA;library from my Go packages, using Go&#39;s _C_ package and combine it&#xA;with Python&#39;s _ctypes_ package.  What follows is a series of &#xA;simple recipes I used to understand the details of how that worked.&#xA;&#xA;Many of the the examples I&#39;ve come across on the web start by &#xA;showing how to run a simple math operation on the Go side with&#xA;numeric values traveling round trip via the C shared library layer. &#xA;It is a good place to start as you only need to consider type &#xA;conversion between both Python&#39;s runtime and Go&#39;s runtime.  It &#xA;provides a simple illustration of how the Go *C* package, Python&#39;s&#xA;*ctypes* module and the toolchain work together.&#xA;&#xA;In this example we have a function in Go called &#34;twice&#34; it takes&#xA;a single integer, doubles it and returns the new value.  On&#xA;the Go side we create a _libtwice.go_ file with an empty `main()` &#xA;function.  Notice that we also import the *C* package and use &#xA;a comment decoration to indicate the function we are exporting&#xA;(see https://github.com/golang/go/wiki/cgo and &#xA;https://golang.org/cmd/cgo/&#xA;for full story about Go&#39;s _C_ package and _cgo_).&#xA;Part of the what _cgo_ and the *C* package does is use the &#xA;comment decoration to build the signatures for the function calls&#xA;in the shared C library.  The Go toolchain does all the heavy &#xA;lifting in making a *C* shared library based on comment &#xA;directives like &#34;//export&#34;. We don&#39;t need much for our twice&#xA;function.&#xA;&#xA;```Go&#xA;    package main&#xA;    &#xA;    import (&#xA;    &#x9;&#34;C&#34;&#xA;    )&#xA;    &#xA;    //export twice&#xA;    func twice(i int) int {&#xA;    &#x9;return i * 2&#xA;    }&#xA;    &#xA;    func main() {}&#xA;``` ...</description>
            <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.html</guid>
        </item>
        <item>
            <title>Accessing Go from Julia</title>
            <link>https://rsdoiel.github.io/blog/2018/03/11/accessing-go-from-julia.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;The problem: I&#39;ve started exploring Julia and I would like to leverage existing&#xA;code I&#39;ve written in Go. Essentially this is a revisit to the problem in my&#xA;last post [Go based Python Modules](https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.html) &#xA;but with the language pairing of Go and Julia.&#xA;&#xA;In out first example we send an integer value from&#xA;Julia to Go and back via a C shared library (written in Go). While Julia doesn&#39;t&#xA;require type declarations I will be using those for clarity. Like in my previous post&#xA;I think this implementation this is a good starting point to see how Julia interacts with&#xA;C shared libraries. Like before I will present our Go code, an explanation &#xA;followed by the Julia code and commentary.&#xA;&#xA;On the Go side we create a _libtwice.go_ file with an empty `main()` &#xA;function.  Notice that we also import the *C* package and use &#xA;a comment decoration to indicate the function we are exporting&#xA;(see https://github.com/golang/go/wiki/cgo and &#xA;https://golang.org/cmd/cgo/&#xA;for full story about Go&#39;s _C_ package and _cgo_).&#xA;Part of the what _cgo_ and the *C* package does is use the &#xA;comment decoration to build the signatures for the function calls&#xA;in the shared C library.  The Go toolchain does all the heavy &#xA;lifting in making a *C* shared library based on comment &#xA;directives like &#34;//export&#34;. We don&#39;t need much for our twice&#xA;function.&#xA;&#xA;```Go&#xA;    package main&#xA;    &#xA;    import (&#xA;    &#x9;&#34;C&#34;&#xA;    )&#xA;    &#xA;    //export twice&#xA;    func twice(i int) int {&#xA;    &#x9;return i * 2&#xA;    }&#xA;    &#xA;    func main() {}&#xA;``` ...</description>
            <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/03/11/accessing-go-from-julia.html</guid>
        </item>
        <item>
            <title>Review: Software Tools in Pascal</title>
            <link>https://rsdoiel.github.io/blog/2018/07/22/software-tools-in-pascal.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This book is by Brian W. Kernighan and P. J. Plauger. It is an&#xA;example of the type of books I find I re-read and want in my&#xA;personal library. The book covers software construction through &#xA;a series of programs written in pascal. It is about how these &#xA;programs work, how to approach problems and write sound software.&#xA;I was surprised I did not know about this book when I was browsing &#xA;the [Open Library](https://openlibrary.org) this weekend.  While &#xA;Pascal was a popular in the 1980&#39;s it has faded for most people in the &#xA;early 21st century.  This review maybe a small bit of nostalgia. &#xA;On the other hand I suspect &#xA;[&#34;Software Tools in Pascal&#34;](https://openlibrary.org/books/OL4258115M/Software_tools_in_Pascal)&#xA;is one of the short list of computer books that will remain useful&#xA;over the long run.&#xA;&#xA;The book is organized around specific programs and their implementations.&#xA;The implementations provided are simple and straight forward. Each&#xA;section is followed by a set of &#34;exercises&#34; that extend the ideas&#xA;shown in the section. In this way you could derive the modern equivalent&#xA;of these tools.&#xA;&#xA;The topics you build tools for in the text are&#xA;filters, files, sorting, text patterns, editing, formatting, &#xA;and macro processing.&#xA;&#xA;If you want to follow the book along in Pascal then I think Free Pascal&#xA;available in many Debian distributions including Raspbian on the Raspberry&#xA;Pi is a good choice.  Likewise Wirth&#39;s Pascal is easy enough to port&#xA;to other languages and indeed this would be a useful exercise when I&#xA;re-read the book the next time. ...</description>
            <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/07/22/software-tools-in-pascal.html</guid>
        </item>
        <item>
            <title>FreeDOS 1.2 to Oberon System 3</title>
            <link>https://rsdoiel.github.io/blog/2019/07/28/freedos-to-oberon-system-3.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;&gt;    UPDATE: (2021-02-26, RSD) Under VirtualBox 6.1 these&#xA;&gt;    instructions still fail. My hope is to revise these &#xA;&gt;    instructions when I get it all sorted out.&#xA;&gt;&#xA;&gt;    Many links such as the ftp site at ETH Oberon are &#xA;&gt;    no more. I&#39;ve updated this page to point at Wayback machine&#xA;&gt;    or included content in here where I cannot find it else where.&#xA;&gt;&#xA;&gt;    UPDATE: (2021-02-19, RSD) Under VirtualBox 6.1 these instructions &#xA;&gt;    fail. For VirtualBox I’ve used FreeDOS 1.3rc3 Live CD installing &#xA;&gt;    the “Plain DOS” without problems.&#xA;&gt;&#xA;&gt;    UPDATE: (2021-03-16, RSD) After reviewing my post, correcting&#xA;&gt;    some mistakes I finally was able to get FreeDOS up and running&#xA;&gt;    on VirtualBox 6.1. This allows NativeOberon 2.3.6 to be brought&#xA;&gt;    up by booting the &#34;oberon0.dsk&#34; virtual floppy and following&#xA;&gt;    the instructions included. You need to know how to use&#xA;&gt;    the Oberon mouse and the way commands work in Oberon.&#xA;&#xA;What follows are notes on getting a FreeDOS 1.2[^1] and &#xA;then Native Oberon[^2] running under VirtualBox 6.0. You might &#xA;wonder why these two are together. While it was&#xA;easy to run the Native Oberon installation process that process&#xA;assumes you have a properly partitioned hard disk and VirtualBox&#xA;seems to skip that process. I found taking advantage of FreeDOS&#xA;simplified things for me.&#xA;&#xA;My goal was running Oberon System 3, but setting up a Virtual Box&#xA;with FreeDOS 1.2 gave me a virtual machine that functions like a &#xA;1999 era PC. From there all the steps in the Oberon instructions&#xA;just worked.&#xA;&#xA;I&#39;ve been doing a bit if computer history reading and decided to&#xA;bring up some older systems as a means to understand where&#xA;things were.  The first computers I had access to were 8080, 8086&#xA;machines running MS DOS based. My first computer programming language&#xA;was Turbo Pascal. Feeling a bit nostalgic I thought it would be&#xA;interesting to use it again and see what I remembered from the days&#xA;of old. While PC and MS DOS no longer exist as commercial productions&#xA;an wonderful group of Open Source hackers have brought new life into&#xA;DOS with FreeDOS 1.2[^3]. You&#39;ll find many of your old familiar commands&#xA;but also some nice improvements. You can even run it under VirtualBox&#xA;which is what I proceeded to do. ...</description>
            <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2019/07/28/freedos-to-oberon-system-3.html</guid>
        </item>
        <item>
            <title>Mostly Oberon</title>
            <link>https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;**Mostly Oberon** is a series of blog posts documenting my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.&#xA;&#xA;Oberon is a classical computer language and operating system originated by Professors Niklaus Wirth and Jürg Gutknecht at [ETH](https://en.wikipedia.org/wiki/ETH_Zurich) circa 1987.  It was inspired by their experiences in California at the [Xerox Palo Alto Research Center](https://en.wikipedia.org/wiki/PARC_\(company\)).  This series of blog posts are my meandering exploration of Oberon-07 language based on [Project Oberon 2013](http://www.projectoberon.com/).&#xA;&#xA;NOTE: Oberon grew from Wirth&#39;s Modula, which grew from Pascal, which grew from his experiences with Algol.&#xA;&#xA;I am new to both Oberon and the Oberon System.  Oberon language is in the tradition of ALGOL, Pascal, Modula 1 and 2 as well as incorporating ideas from the parent of Object Oriented languages Simula. The Oberon language reminds me of my first programming language [Turbo Pascal](https://en.wikipedia.org/wiki/Turbo_Pascal).  Oberon&#39;s language shape is more Pascal than C. For that reason I think it has largely been overlooked. ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html</guid>
        </item>
        <item>
            <title>Oberon Modules and Procedures</title>
            <link>https://rsdoiel.github.io/blog/2020/04/12/Mostly-Oberon-Modules.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the second post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.&#xA;&#xA;The module is a primary code unit of Oberon language. Modules allow you to focus on functional units of code and can be readily composed into larger solutions.&#xA;A module&#39;s name should match the filename you are saving it under. A module starts with declaring it&#39;s name and ends the declaration with a semicolon&#xA;the statement separator in Oberon. Our simple &#34;Hello World&#34; example &#xA;shows the basic code shape.&#xA;&#xA;~~~{.oberon}&#xA;&#xA;MODULE HelloWorld;&#xA;      IMPORT Out;&#xA;    BEGIN&#xA;      Out.String(&#34;Hello World!&#34;); Out.Ln;&#xA;    END HelloWorld. ...</description>
            <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/12/Mostly-Oberon-Modules.html</guid>
        </item>
        <item>
            <title>Oberon Basic Types</title>
            <link>https://rsdoiel.github.io/blog/2020/04/18/Mostly-Oberon-Basic-Types.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the third post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.&#xA;&#xA;Oberon is a small systems language. It provides a useful but &#xA;limited umber of basic types. These can be be&#xA;thought of as simple types mapping to specific memory locations&#xA;and more complex types composed of multiple memory locations.&#xA;&#xA;NOTE: __basic types__, INTEGER, REAL, CHAR, ARRAY, RECORD and POINTER TO&#xA;&#xA;Integers are easiest to be thought of as whole numbers. They may be&#xA;positive numbers or negative numbers. Declaring an integer&#xA;variable `i` it would look something like ...</description>
            <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/18/Mostly-Oberon-Basic-Types.html</guid>
        </item>
        <item>
            <title>Oberon Loops and Conditions</title>
            <link>https://rsdoiel.github.io/blog/2020/04/19/Mostly-Oberon-Loops-and-Conditions.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the four post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;Oberon is a small systems language and while it is minimalist.&#xA;It provides you with the necessary primitives to get things done.&#xA;I&#39;ve touched on code organization, basic types and basic type&#xA;extensions in the previous articles.  I have shown the basic&#xA;control statements but have not talked about them yet.&#xA;&#xA;Oberon offers four basic control statements.&#xA;&#xA;IF, ELSIF, ELSE&#xA;: Basic condition test and execution&#xA;&#xA;ASSERT&#xA;: A mechanism to trigger a program halt ...</description>
            <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/19/Mostly-Oberon-Loops-and-Conditions.html</guid>
        </item>
        <item>
            <title>Combining Oberon-07 and C with OBNC</title>
            <link>https://rsdoiel.github.io/blog/2020/05/01/Combining-Oberon-and-C.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the fifth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html)&#xA;series. Mostly Oberon documents my exploration of the Oberon&#xA;Language, Oberon System and the various rabbit holes I will&#xA;inevitably fall into.&#xA;&#xA;In my day job I write allot of code in Go and&#xA;orchestration code in Python.  It&#39;s nice having&#xA;the convenience of combining code written one&#xA;language with an another.  You can do the same&#xA;with [OBNC](https://miasap.se/obnc/).  The OBNC&#xA;compiler supports inclusion of C code in a&#xA;straight forward manner. In fact Karl&#39;s compiler&#xA;will generate the C file for you!&#xA;&#xA;In learning how to combine C code and Oberon-07&#xA;I started by reviewing Karl&#39;s [manual page](https://miasap.se/obnc/man/obnc.txt).&#xA;The bottom part of that manual page describes&#xA;the steps I will repeat below. The description&#xA;sounds more complicated but when you walk through&#xA;the steps it turns out to be pretty easy.&#xA;&#xA;Creating a C extension for use with OBNC is very&#xA;straight forward. ...</description>
            <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/01/Combining-Oberon-and-C.html</guid>
        </item>
        <item>
            <title>Compiling OBNC on macOS</title>
            <link>https://rsdoiel.github.io/blog/2020/05/06/Compiling-OBNC-on-macOS.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the sixth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;Compiling OBNC v0.16.1 on macOS (10.13.6) using MacPorts (2.6.2) &#xA;is straight forward if you have the required dependencies and &#xA;environment setup up. Below are my notes to get everything working.&#xA;&#xA;+ OBNC v0.16.1&#xA;+ SDL v1.2&#xA;+ Boehm-Demers-Weiser GC&#xA;+ A C compiler and linker (OBNC uses this to generate machine specific code)&#xA;&#xA;MacPorts has libsdl 1.2 available as a package called &#34;libsdl&#34;&#xA;(not surprisingly). There are other versions of the SDL available&#xA;in ports but this is the one we&#39;re using.&#xA;&#xA;~~~ ...</description>
            <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/06/Compiling-OBNC-on-macOS.html</guid>
        </item>
        <item>
            <title>Oberon-07 and the file system</title>
            <link>https://rsdoiel.github.io/blog/2020/05/09/Oberon-07-and-the-filesystem.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;By R. S. Doiel, 2020-05-09 (updated: 2021-10-29)&#xA;&#xA;This is the seventh post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;In a POSIX system we often talk of opening files,&#xA;writing and reading files and close files. The Oberon&#xA;language reflects a more Oberon System point of view.&#xA;&#xA;The Oberon System generally avoids modality in favor&#xA;of action. Modality is where a context must be set&#xA;before a set of actions are possible. The `vi` &#xA;text editor is a &#34;modal&#34; editor. You are in either&#xA;edit (typing) mode or command mode. At the function&#xA;level POSIX&#39;s `open()`, is also modal. You can &#xA;open a file for reading, open a file for writing,&#xA;you can open a file for appending, etc. The Oberon&#xA;language and base modules avoids modality. ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/09/Oberon-07-and-the-filesystem.html</guid>
        </item>
        <item>
            <title>Dynamic types</title>
            <link>https://rsdoiel.github.io/blog/2020/05/25/Dynamic-types.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the eighth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html)&#xA;series. Mostly Oberon documents my exploration of the Oberon Language, &#xA;Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;Oberon-07 is a succinct systems language. It provides a minimal&#xA;but useful set of basic static types. Relying on them addresses &#xA;many common programming needs. The Oberon compiler ensures &#xA;static types are efficiently allocated in memory. One of the &#xA;strengths of Oberon is this ability to extend the type system. &#xA;This means when the basic types fall short you can take &#xA;advantage of Oberon&#39;s type  extension features. This includes &#xA;creating dynamically allocated data structures. In Oberon-07 &#xA;combining Oberon&#39;s `POINTER TO` and `RECORD` types allows us to&#xA;create complex and dynamic data structures.&#xA;&#xA;Strings in Oberon-07 are typical declared as an `ARRAY OF CHAR` &#xA;with a specific length. If the length of a string is not &#xA;known a head of time this presents a challenge. One approach is &#xA;to declare a long array but that would allocate allot of memory &#xA;which may not get used. Another approach is to create a dynamic&#xA;data structure. An example is using a linked list of shorter &#xA;`ARRAY OF CHAR`.  The small fixed strings can combine to &#xA;represent much larger strings. When one fills up we add &#xA;another.&#xA;&#xA;Our data model is a pointer to a record where the record &#xA;contains an `ARRAY OF CHAR` and a pointer to the next record. &#xA;A common idiom in Oberon for dynamic types is to declare a &#xA;`POINTER TO` type and declare a `RECORD` type which contains&#xA;the `POINTER TO` type as an attribute.  If you see this idiom &#xA;you are looking at some sort of dynamic data structure. The &#xA;pointer type is usually named for the dynamic type you want &#xA;work with and the record type is declared using the same name &#xA;with a &#34;Desc&#34; suffix. In our case `DynamicString` will be the &#xA;name of our `POINTER TO` type and our record type will be &#xA;called `DynamicStringDesc` following the convention.  In our &#xA;record structure we include a &#34;value&#34; to holding a short &#xA;fixed length `ARRAY OF CHAR`  and a &#34;next&#34; to holding the &#xA;pointer to our next record. ...</description>
            <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/25/Dynamic-types.html</guid>
        </item>
        <item>
            <title>Procedures as parameters</title>
            <link>https://rsdoiel.github.io/blog/2020/06/20/Procedures-as-parameters.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the ninth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the &#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;Oberon-07 supports the passing of procedures as parameters in a procedure. &#xA;Let&#39;s create a module name [Noises.Mod](Noises.Mod) to explore this.&#xA;&#xA;The key to supporting this is Oberon&#39;s type system.  We need to decide what our &#xA;generic procedure will look like first. In our case our procedures that will display &#xA;an animal noise will include the name of the animal speaking.  We&#39;ll call this type &#xA;of procedure &#34;Noise&#34;. It&#39;ll accept an ARRAY OF CHAR for the name as a parameter &#xA;then use the standard Out module to display the animal name and noise they make.&#xA;&#xA;~~~ ...</description>
            <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/06/20/Procedures-as-parameters.html</guid>
        </item>
        <item>
            <title>Procedures in records</title>
            <link>https://rsdoiel.github.io/blog/2020/07/07/Procedures-in-records.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the tenth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the &#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;In my last post I looked at how Oberon-07 supports the passing of procedures as parameters in a procedure. In this one I am looking at how we can&#xA;include procedures as a part of an Oberon RECORD.&#xA;&#xA;Let&#39;s modify our module name [Noises.Mod](Noises.Mod) to explore this.&#xA;Copy &#34;Noises.Mod&#34; to &#34;Creatures.Mod&#34;. Replace the &#34;MODULE Noises;&#34; line with&#xA;&#34;MODULE Creatures;&#34; and the final &#34;END Noises.&#34; statement with &#34;END Creatures.&#34;.&#xA;&#xA;~~~ ...</description>
            <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/07/07/Procedures-in-records.html</guid>
        </item>
        <item>
            <title>Words Matter</title>
            <link>https://rsdoiel.github.io/blog/2020/07/08/words-matter.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;UPDATE (2020-08-15, RSD): When I added a post today I was VERY pleased to &#xA;to see that GitHub now allows me to publish my blog via the &#34;main&#34; branch.&#xA;It&#39;s nice to see the change in the words we use.&#xA;&#xA;**Why does software development use the vocabulary of slavery and&#xA;Jim Crow to describe our creations?** What we call things matters.&#xA;This is especially true of the words we use day to day without thinking.&#xA;&#xA;```shell&#xA;    git pull origin master&#xA;```&#xA;&#xA;&#34;Naming things is a hard problem in computer science.&#34; That is&#xA;a phrase I remember from my student days. We name variables,&#xA;programs and algorithms. We name architectures. Naming is a choice.&#xA;The names convey meaning and intent. Names and terms are a human&#xA;communication. They matter. ...</description>
            <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/07/08/words-matter.html</guid>
        </item>
        <item>
            <title>Portable Oberon-07</title>
            <link>https://rsdoiel.github.io/blog/2020/08/15/Portable-Oberon-07.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the eleventh post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the&#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;By R. S. Doiel, 2020-08-15 (updated: 2020-09-05)&#xA;&#xA;Karl Landström&#39;s [OBNC](https://miasap.se/obnc/), Oberon-07 compiler,&#xA;comes with an Oberon-2 inspired set of modules&#xA;described in the Oakwood Guidelines as well as&#xA;several very useful additions making Oberon-07 suitable for&#xA;writing programs in a POSIX environment.  We&#39;re going to&#xA;explore three of the Oakwood modules and two of Karl&#39;s own additions&#xA;in this post as we create a program called [SlowCat](SlowCat.Mod).&#xA;I am using the term &#34;portable&#34; to mean the code can be compiled&#xA;using OBNC on macOS, Linux, and Raspberry Pi OS and Windows 10&#xA;(i.e. wherever OBNC is available). The Oakwood Guideline modules&#xA;focus on portability between an Oberon System and other systems.&#xA;I&#39;ll leave that discussion along with&#xA;[POW!](http://www.fim.uni-linz.ac.at/pow/pow.htm)&#xA;to the end of this post.&#xA;&#xA;Recently while I was reviewing logs at work using [cat](https://en.wikipedia.org/wiki/Cat_(Unix)), [grep](https://en.wikipedia.org/wiki/Grep)&#xA;and [more](https://en.wikipedia.org/wiki/More_(command)) it&#xA;struck me that it would have been nice if **cat**&#xA;or **more** came with a time delay so you could use them like a&#xA;teleprompter. This would let you casually watch the file scroll&#xA;by while still being able to read the lines. The program we&#39;ll build&#xA;in this post is &#34;SlowCat&#34; which accepts a command line parameter&#xA;indicating the delay in seconds between display each line read from&#xA;standard input. ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/08/15/Portable-Oberon-07.html</guid>
        </item>
        <item>
            <title>Software Tools, Getting Started</title>
            <link>https://rsdoiel.github.io/blog/2020/09/29/Software-Tools-1.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This post is the first in a series revisiting the&#xA;programs described in the 1981 book by Brian W. Kernighan and&#xA;P. J. Plauger&#39;s called [Software Tools in Pascal](https://archive.org/details/softwaretoolsinp00kern).&#xA;The book is available from the [Open Library](https://openlibrary.org/)&#xA;and physical copies are still (2020) commonly available from used book&#xA;sellers.  The book was an early text on creating portable command&#xA;line programs.&#xA;&#xA;In this series I present the K &amp; P (i.e. Software Tools in Pascal)&#xA;programs re-implemented in Oberon-07. I have testing my implementations&#xA;using Karl Landström&#39;s [OBNC](http://miasap.se/obnc/)&#xA;compiler and his implementation of the Oakwood Guide&#39;s modules&#xA;for portable Oberon programs. Karl also provides a few additional&#xA;modules for working in a POSIX environment (e.g. BSD, macOS, Linux,&#xA;Windows 10 with Linux subsystem). I have also tested these&#xA;programs with Mike Spivey&#39;s [Oxford Oberon Compiler](http://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler) an aside&#xA;from the differences file extensions that both compilers use&#xA;the source code works the same.&#xA;&#xA;NOTE: OBNC compiler is the work of Karl Langström, it is portable across many systems where the C tool chain is available.&#xA;&#xA;NOTE: POSIX defines a standard of compatibility inspired by [UNIX](https://en.wikipedia.org/wiki/Unix), see &lt;https://en.wikipedia.org/wiki/POSIX&gt; ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/09/29/Software-Tools-1.html</guid>
        </item>
        <item>
            <title>Oberon to Markdown</title>
            <link>https://rsdoiel.github.io/blog/2020/10/03/Oberon-to-markdown.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the twelfth post in the [Mostly Oberon](https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;Oberon source code has a very nice property in that anything&#xA;after the closing end statement is ignored by the compiler.&#xA;This makes it a nice place to write documentation, program&#xA;notes and other ideas.&#xA;&#xA;I&#39;ve gotten in the habit of writing up program docs and&#xA;notes there. When I prep to make a web document I used to&#xA;copy the source file, doing a cut and paste to re-order&#xA;the module code to the bottom of the document. I&#39;d follow&#xA;that with adding headers and code fences. Not hard but&#xA;tedious. Of course if I changed the source code I&#39;d also&#xA;have to do another cut and paste edit. This program,&#xA;`ObnToMd.Mod` automates that process.&#xA;&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/03/Oberon-to-markdown.html</guid>
        </item>
        <item>
            <title>Assembling Pages</title>
            <link>https://rsdoiel.github.io/blog/2020/10/19/Assemble-pages.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is the thirteenth post in the [Mostly Oberon](https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;I use [Pandoc](https://pandoc.org) to process Markdown documents. I like to keep my&#xA;front matter in JSON rather than Pandoc&#39;s YAML. Fortunately Pandoc&#xA;does support working with JSON as a metadata file include. Normally I would&#xA;manually split the JSON front matter and the rest of the markup into two&#xA;separate files, then process with Pandoc and other tooling like&#xA;[LunrJS](https://lunrjs.com). [AssemblePage](AssemblePage.Mod) automates this&#xA;process.&#xA;&#xA;Example shell usage:&#xA;&#xA;~~~ ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/19/Assemble-pages.html</guid>
        </item>
        <item>
            <title>Software Tools, Filters</title>
            <link>https://rsdoiel.github.io/blog/2020/10/31/Filters.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This post is the second in a series revisiting the programs&#xA;described in the 1981 book by Brian W. Kernighan and P. J.&#xA;Plauger&#39;s called [Software Tools in Pascal](https://archive.org/details/softwaretoolsinp00kern). The book is available from the&#xA;[Open Library](https://openlibrary.org/) and physical copies&#xA;are still (2020) commonly available from used book sellers.&#xA;The book was an late 20th century text on creating portable&#xA;command line programs using ISO standard Pascal of the era.&#xA;&#xA;In this chapter K &amp; P focuses on developing the idea of filters.&#xA;Filters are programs which typically process standard input, do&#xA;some sort of transformation or calculation and write to standard&#xA;output.  They are intended to work either standalone or in a pipeline&#xA;to solve more complex problems. I like to think of filters as&#xA;software [LEGO](https://en.wikipedia.org/wiki/Lego).&#xA;Filter programs can be &#34;snapped&#34; together creating simple shapes&#xA;data shapes or combined to for complex compositions.&#xA;&#xA;The programs from this chapter include:&#xA;&#xA;+ **entab**, respecting tabstops, convert strings of spaces to tabs&#xA;+ **overstrike**, this is probably not useful anymore, it would allow &#34;overstriking&#34; characters on devices that supported it. From [wikipedia](https://en.wikipedia.org/wiki/Overstrike), &#34;In typography, overstrike is a method of printing characters that are missing from the printer&#39;s character set. The character was created by placing one character on another one — for example, overstriking &#34;L&#34; with &#34;-&#34; resulted in printing a &#34;Ł&#34; (L with stroke) character.&#34;&#xA;+ **compress**, an early UNIX style compress for plain text files&#xA;+ **expand**, an early UNIX style expand for plain text files, previously run through with **compress**&#xA;+ **echo**, write echo&#39;s command line parameters to standard output, introduces working with command line parameters&#xA;+ **translit**, transliterate characters using a simple from/to substitution with a simple notation to describe character sequences and negation. My implementation diverges from K &amp; P ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/31/Filters.html</guid>
        </item>
        <item>
            <title>Pandoc Partials</title>
            <link>https://rsdoiel.github.io/blog/2020/11/09/Pandoc-Partials.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;Most people know about [Pandoc](https://pandoc.org/) from its&#xA;fantastic ability to convert various markup formats from one to&#xA;another. A little less obvious is Pandoc can be a template engine&#xA;for rendering static websites allowing you full control over the&#xA;rendered content.&#xA;&#xA;The main Pandoc documentation of the template engine can be found&#xA;in the [User Guide](https://pandoc.org/MANUAL.html#templates).&#xA;The documentation is complete in terms of describing the template&#xA;capabilities but lacks a tutorial for using as a replacement for more&#xA;ambitious rendering systems like [Jekyll](https://jekyllrb.com/) or&#xA;[Hugo](https://gohugo.io/). Pandoc takes a vary direct approach and&#xA;can be deceptively simple to implement.&#xA;&#xA;First thing in this tutorial is to use our own template with Pandoc&#xA;when rendering a single webpage. You use the `–-template` option to&#xA;provide your a template name. I think of this as the page level template.&#xA;This template, as I will show later, can then call other partial&#xA;templates as needed.&#xA;&#xA;Example, render the [Pandoc-Partials.txt](Pandoc-Partials.txt) file using the&#xA;template named [index1.tmpl](index1.tmpl): ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/09/Pandoc-Partials.html</guid>
        </item>
        <item>
            <title>Pandoc &amp; Metadata</title>
            <link>https://rsdoiel.github.io/blog/2020/11/11/Pandoc-Metadata.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;Pandoc supports three ways of providing metadata to its template&#xA;engine.&#xA;&#xA;1. Front matter&#xA;2. Command line optional metadata&#xA;3. A JSON metadata file.&#xA;&#xA;Front matter is a community term that comes from physical world&#xA;of paper books and articles.  It is the information that comes &#xA;before the primary content.  This information might be things &#xA;like title, author, publisher and publication date. These days &#xA;it&#39;ll also include things like identifiers like ISSN, ISBN possibly &#xA;newer identifiers like DOI or ORCID. In the library and programming&#xA;community we refer to this type of structured information as&#xA;metadata.  Data about the publication or article.&#xA;&#xA;Many publication systems like TeX/LaTeX support provided means of &#xA;incorporating metadata into the document.  When simple markup formats &#xA;like Markdown, Textile and Asciidoc became popular the practice was &#xA;continued by including the metadata in some sort of structured encoding&#xA;at the beginning of the document. The community adopted the term from&#xA;the print world, &#34;front matter&#34;. ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/11/Pandoc-Metadata.html</guid>
        </item>
        <item>
            <title>Chars</title>
            <link>https://rsdoiel.github.io/blog/2020/11/27/Chars.html</link>
            <description>&#xA;&#xA;This module provides common character oriented tests.&#xA;&#xA;InRange&#xA;: Check to see if a character, c, is in an inclusive range from a lower to upper character.&#xA;&#xA;IsUpper&#xA;: Check to see if a character is upper case&#xA;&#xA;IsLower&#xA;: Check to see if a character is lower case ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/27/Chars.html</guid>
        </item>
        <item>
            <title>Clock</title>
            <link>https://rsdoiel.github.io/blog/2020/11/27/Clock.html</link>
            <description>This is a C time library wrapper for getting system time&#xA;to support Dates.Mod. The procedures are read only as&#xA;setting time is non-standard on many Unix-like systems[^1].&#xA;The two procedures follow the A2 style procedure signatures&#xA;adjusted for Oberon-07.&#xA;&#xA;[^1]: Eric Raymond discusses time functions, http://www.catb.org/esr/time-programming/&#xA;&#xA;&#xA;&#xA;~~~&#xA;MODULE Clock;&#xA;&#xA;PROCEDURE GetRtcTime*(VAR second, minute, hour, day, month, year : INTEGER);&#xA;BEGIN&#xA;END GetRtcTime; ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/27/Clock.html</guid>
        </item>
        <item>
            <title>Dates &amp; Clock</title>
            <link>https://rsdoiel.github.io/blog/2020/11/27/Dates-and-Clock.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;The [Oakwood](http://www.edm2.com/index.php/The_Oakwood_Guidelines_for_Oberon-2_Compiler_Developers#The_Oakwood_Guidelines)&#xA;guidelines specified a common set of modules for Oberon-2 for writing&#xA;programs outside of an Oberon System. A missing module from the Oakwood&#xA;guidelines is modules for working with dates and the system clock.&#xA;Fortunately the A2 Oberon System[^1] provides a template for that&#xA;functionality. In this article I am exploring implementing the&#xA;[Dates](Dates.Mod) and [Clock](Clock.Mod) modules for Oberon-07. I&#xA;also plan to go beyond the A2 implementations and provide additional&#xA;functionality such as parsing procedures and the ability to work with&#xA;either the date or time related attributes separately in the&#xA;`Dates.DateTime` record.&#xA;&#xA;[^1]: A2 information can be found in the [Oberon wikibook](https://en.wikibooks.org/wiki/Oberon#In_A2)&#xA;&#xA;One of the noticeable differences between Oberon-07 and Active Oberon&#xA;is the types that functional procedures can return. We cannot return&#xA;an Object in Oberon-07. This is not much of a handicap as we have&#xA;variable procedure parameters.  Likewise Active Oberon provides&#xA;a large variety of integer number types. In Oberon-07 we have only&#xA;INTEGER. Where I&#39;ve create new procedures I&#39;ve used the Oberon idiom&#xA;of read only input parameters followed by variable parameters with&#xA;side effects and finally parameters for the target record or values&#xA;to be updated.&#xA;&#xA;In spite of the divergence I have split the module into two.&#xA;The [Dates](Dates.html) module is the one you would include in your&#xA;program, it provides a DateTime record type which holds the integer&#xA;values for year, month, day, hour, minute and second. It provides the&#xA;means of parsing a date or time string, comparison, difference and addition&#xA;of dates.  The second module [Clock](Clock.html) provides a mechanism&#xA;to retrieve the real time clock value from the host system and map the&#xA;C based time object into our own DateTime record.  Clock is specific to&#xA;OBNC method of interfacing to the C standard libraries of the host system.&#xA;If you were to use a different Oberon compiled such as the Oxford&#xA;Oberon Compiler you would need to re-implement Clock. Dates itself&#xA;should be system independent and work with Oberon-07 compilers generally. ...</description>
            <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/27/Dates-and-Clock.html</guid>
        </item>
        <item>
            <title>Dates</title>
            <link>https://rsdoiel.github.io/blog/2020/11/27/Dates.html</link>
            <description>This module provides minimal date time records and procedures&#xA;for working with dates in YYYY-MM-DD and MM/DD/YYYY format and&#xA;times in H:MM, HH:MM and HH:MM:SS formats.&#xA;&#xA;Set&#xA;: Set a DateTime record providing year, month, day, hour, minute and second as integers and the DateTime record to be populated.&#xA;&#xA;SetDate&#xA;: Set the date portion of a DateTime record, leaves the hour, minute and second attributes unmodified.&#xA;&#xA;SetTime&#xA;: Set the time portion of a DateTime record, leaves the year, month, date attributes unmodified.&#xA;&#xA;Copy&#xA;: Copy the attributes of one DateTime record into another DateTime record ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/27/Dates.html</guid>
        </item>
        <item>
            <title>RetroFlag GPi Case Setup</title>
            <link>https://rsdoiel.github.io/blog/2020/12/24/gpi-case-setup.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;These are my notes for setting up a RetroFlag GPi case using Recalbox&#xA;distribution for retro gaming.&#xA;&#xA;+ RetroFlag GPi Case Kit (including a Raspberry Pi Zero W and blank SD Card)&#xA;+ A computer to setup the SD Card  and the Raspberry Pi Imager v1.5&#xA;&#xA;We will be installing [Recalbox](https://www.recalbox.com/ &#34;the all-in-one retro gaming console&#34;)&#xA;v7.7.x for Raspberry Pi Zero W and GPi case.  Recalbox which is a Retro&#xA;Gaming Linux distribution.&#xA;&#xA;1. Download the appropriate Raspberry Pi Imager 1.5 from &#xA;   https://www.raspberrypi.org/software/ for your system&#xA;2. Install and launch the Raspberry Pi Imager&#xA;3. Click &#34;Operating System&#34;&#xA;  a. Select &#34;Emulation and game OS&#34;&#xA;  b. Select &#34;Recalbox&#34;&#xA;  c. Select &#34;Recalbox 7.1.1-Reloaded (Pi 0/1/GPi Case)&#34;&#xA;4. Click &#34;SD Card&#34; &#34;, then select the bank 32 GiB SD Card&#xA;5. Click &#34;Write&#34;&#xA;6. You will be asked remove the SD Card when done, do so and and exit &#xA;   Raspberry Pi Imager ...</description>
            <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/12/24/gpi-case-setup.html</guid>
        </item>
        <item>
            <title>ETH Oberon System 3 on VirtualBox 6.1</title>
            <link>https://rsdoiel.github.io/blog/2021/03/17/NativeOberon-VirtualBox.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In this post I am walking through installing Native Oberon 2.3.7&#xA;(aka ETH Oberon System 3) on a virtual machine running under&#xA;VirtualBox 6.1. It is a follow up to my 2019 post &#xA;[FreeDOS to Oberon System 3](/blog/2019/07/28/freedos-to-oberon-system-3.html &#34;Link to old blog post for bringing up Oberon System 3 in VirtualBox 6.0 using FreeDOS 1.2&#34;). To facilitate the install I will first prepare&#xA;my virtual machine as a FreeDOS 1.2 box. This simplifies getting the&#xA;virtual machines&#39; hard disk partitioned and formatted correctly.&#xA;When Native Oberon was released back in 1990&#39;s most Intel flavored&#xA;machines shipped with some sort Microsoft OS on them.  I believe&#xA;that is why the tools and instructions for Native Oberon assume&#xA;you&#39;re installing over or along side a DOS partition.&#xA;&#xA;1. Install VirtualBox 6.1 installed on your host computer.&#xA;2. Download and install a minimal FreeDOS 1.2 as a virtual machine&#xA;3. Downloaded a copy of Native Oberon 2.3.7 alpha from SourceForge&#xA;3. Familiarized yourself Oberon&#39;s Text User Interface&#xA;4. Boot your FreeDOS virtual machine using the Oberon0.Dsk downloaded&#xA;as part of NativeOberon_2.3.7.tar.gz&#xA;5. Mount &#34;Oberon0.Dsk&#34; and start installing Native Oberon&#xA;&#xA;Before you boot &#34;Oberon0.Dsk&#34; on your virtual machine make sure&#xA;you&#39;ve looked at some online Oberon documentation. This is important.&#xA;Oberon is very different from macOS, Windows, Linux, DOS, CP/M or&#xA;Unix. It is easy to read the instructions and miss important details &#xA;like how you use the three button mouse, particularly the selections&#xA;and execute actions of text instructions.&#xA;&#xA;VirtualBox 6.1 can be obtained from [virtualbox.org](https://www.virtualbox.org/).  This involves downloading the installer for your particular host&#xA;operating system (e.g. Linux, macOS or Windows) and follow the instructions&#xA;on the VirtualBox website to complete the installation.&#xA;&#xA;Once VirtualBox is installed, launch VirtualBox. ...</description>
            <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/03/17/NativeOberon-VirtualBox.html</guid>
        </item>
        <item>
            <title>A2 Oberon on VirtualBox 6.1</title>
            <link>https://rsdoiel.github.io/blog/2021/04/02/A2-Oberon-on-VirtualBox-6.1.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This is a short article documenting how I install A2 Oberon&#xA;in VirtualBox using the [FreeDOS 1.2](https://freedos.org),&#xA;the A2 [ISO](https://sourceforge.net/projects/a2oberon/files/) cd image and [VirtualBox 6.1](https://virtualbox.org).&#xA;&#xA;1. Download the ISO images for FreeDOS and A2&#xA;2. Create a new Virtual Machine&#xA;3. Install FreeDOS 1.2 (Base install) in the virtual machine&#xA;4. Install A2 from the ISO image over the FreeDOS installation&#xA;&#xA;From working with Native Oberon 2.3.7 I&#39;ve found it very helpful&#xA;to have a FreeDOS 1.2. installed in the Virtual machine first. &#xA;I suspect the reason I have had better luck taking this approach&#xA;is based on assumptions about the virtual hard disk being setup&#xA;with an existing known formatted, boot-able partition. In essence&#xA;making our Virtualbox look like a fresh out of the box vintage PC.&#xA;&#xA;You&#39;ll find FreeDOS 1.2 installation ISO image at &#xA;[FreeDos.org](http://freedos.org/download/). Download it&#xA;where you can easily find it from the VirtualBox manager. ...</description>
            <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/04/02/A2-Oberon-on-VirtualBox-6.1.html</guid>
        </item>
        <item>
            <title>Updating Schema in SQLite3</title>
            <link>https://rsdoiel.github.io/blog/2021/04/16/Updating-Schema-in-SQLite3.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>[SQLite3](https://sqlite.org/docs.html) is a handy little&#xA;database as single file tool.  You can interact with the file&#xA;through largely standard SQL commands and embed it easily into&#xA;applications via the C libraries that the project supports.&#xA;It is also available from various popular scripting languages&#xA;like Python, PHP, and Lua. One of the things I occasionally&#xA;need to do and always seems to forget it how to is modify a&#xA;table schema where I need to remove a column[^1]. So here are&#xA;some of the basics do I can quickly find them later and avoid&#xA;reading various articles tutorials because the search engines&#xA;doesn&#39;t return the page in the SQLite documentation.&#xA;&#xA;[^1]: The SQL `ALTER TABLE table_name DROP COLUMN column_name` does not work in SQLite3&#xA;&#xA;In the next sections I&#39;ll be modeling a simple person object&#xA;with a id, uname, display_name, role and updated fields.&#xA;&#xA;```sql&#xA;&#xA;CREATE TABLE IF NOT EXISTS &#34;person&#34; &#xA;        (&#34;id&#34; INTEGER NOT NULL PRIMARY KEY, &#xA;        &#34;uname&#34; VARCHAR(255) NOT NULL, &#xA;        &#34;role&#34; VARCHAR(255) NOT NULL, &#xA;        &#34;display_name&#34; VARCHAR(255) NOT NULL, &#xA;        &#34;updated&#34; INTEGER NOT NULL); ...</description>
            <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/04/16/Updating-Schema-in-SQLite3.html</guid>
        </item>
        <item>
            <title>Ofront on Raspberry Pi OS</title>
            <link>https://rsdoiel.github.io/blog/2021/04/25/Ofront-on-Rasberry-Pi-OS.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post is about getting Ofront[^1] up and running on Raspberry Pi OS[^2].&#xA;Ofront provides a Oberon-2 to C transpiler as well as a Oberon V4[^3]&#xA;development environment. There are additional clever tools like `ocat`&#xA;that are helpful working with the differences in text file formats between&#xA;Oberon System 3, V4 and POSIX. The V4 implementation sits nicely on top of&#xA;POSIX with minimal compromises that distract from the Oberon experience.&#xA;&#xA;[^1]: Ofront was developed by Joseph Templ, see http://www.software-templ.com/&#xA;&#xA;[^2]: see https://www.raspberrypi.org/software/ (a 32 bit Debian based Linux for both i386 and ARM)&#xA;&#xA;[^3]: see https://ssw.jku.at/Research/Projects/Oberon.html&#xA;&#xA;I first heard of running Ofront/V4 via the ETH Oberon Mail list[^4].&#xA;What caught my eye is the reference to running on Raspberry Pi. Prof. Templ &#xA;provides two flavors of Ofront. One targets the Raspberry Pi OS on ARM&#xA;hardware the second Linux on i386. The Raspberry Pi OS for Intel is an&#xA;i386 variant. I downloaded the tar file, unpacked it and immediately ran&#xA;the &#34;oberon.bash&#34; script provided eager to see a V4 environment. It&#xA;renders but the fonts rendered terribly slowly. I should have read the&#xA;documentation first!  Prof. Templ provides man pages for the tools that&#xA;come with Ofront including the oberon application. Reading the&#xA;man page for oberon quickly addresses the point of slow font rendering.&#xA;It also discusses how to convert Oberon fonts to X Windows bitmap fonts.&#xA;If you use the X Window fonts the V4 environment is very snappy. It does&#xA;require that X Windows knows where to find the fonts used in V4. That is&#xA;done by appending the V4 converted fonts to the X Window font map. I had&#xA;installed the Ofront system in my home directory so the command was ...</description>
            <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/04/25/Ofront-on-Rasberry-Pi-OS.html</guid>
        </item>
        <item>
            <title>Beyond Oakwood, Modules and Aliases</title>
            <link>https://rsdoiel.github.io/blog/2021/05/16/Beyond-Oakwood-Modules-and-Aliases.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>Oakwood is the name used to refer to an early Oberon language&#xA;standardization effort in the late 20th century.  It&#39;s the name&#xA;of a hotel where compiler developers and the creators of Oberon&#xA;and the Oberon System met to discuss compatibility. The lasting&#xA;influence on the 21st century Oberon-07 language can be seen&#xA;in the standard set of modules shipped with POSIX based Oberon-07&#xA;compilers like&#xA;[OBNC](https://miasap.se/obnc/), [Vishap Oberon Compiler](https://github.com/vishaps/voc) and the &#xA;[Oxford Oberon Compiler](http://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler).&#xA;&#xA;The Oakwood guidelines described a minimum expectation for&#xA;a standard set of modules to be shipped with compilers.&#xA;The modules themselves are minimalist in implementation.&#xA;Minimalism can assist in easing the learning curve&#xA;and encouraging a deeper understanding of how things work.&#xA;&#xA;The Oberon-07 language is smaller than the original Oberon language&#xA;and the many dialects that followed.  I think of Oberon-07 as the&#xA;distillation of all previous innovation.  It embodies the&#xA;spirit of &#34;Simple but not simpler than necessary&#34;. Minimalism is&#xA;a fit description of the adaptions of the Oakwood modules for &#xA;Oberon-07 in the POSIX environment.&#xA;&#xA;Sometimes I want more than the minimalist module.  A good example&#xA;is standard [Strings](https://miasap.se/obnc/obncdoc/basic/Strings.def.html)&#xA;module.  Thankfully you can augment the standard modules with your own.&#xA;If you are creative you can even create a drop in replacement.&#xA;This is what I wound up doing with my &#34;Chars&#34; module.&#xA;&#xA;In the spirit of &#34;Simple but no simpler&#34; I originally kept Chars &#xA;very minimal. I only implemented what I missed most from Strings.&#xA;I got down to a handful of functions for testing characters,&#xA;testing prefixes and suffixes as well as trim procedures. It was&#xA;all I included in `Chars` was until recently. ...</description>
            <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/05/16/Beyond-Oakwood-Modules-and-Aliases.html</guid>
        </item>
        <item>
            <title>Combining Oberon-07 with C using Obc-3</title>
            <link>https://rsdoiel.github.io/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This post explores integrating C code with an Oberon-07 module use&#xA;Mike Spivey&#39;s Obc-3 Oberon Compiler.  Last year I wrote a similar post&#xA;for Karl Landström&#39;s [OBNC](/blog/2020/05/01/Combining-Oberon-and-C.html).&#xA;This goal of this post is to document how I created a version of Karl&#39;s&#xA;Extension Library that would work with Mike&#39;s Obc-3 compiler.&#xA;If you want to take a shortcut you can see the results on GitHub&#xA;in my [obc-3-libext](https://github.com/rsdoiel/obc-3-libext) repository.&#xA;&#xA;From my time with OBNC I&#39;ve come to rely on three modules from Karl&#39;s&#xA;extension library. When trying to port some of my code to use with&#xA;Mike&#39;s compiler. That&#39;s where I ran into a problem with that dependency.&#xA;Karl&#39;s modules aren&#39;t available. I needed an [extArgs](http://miasap.se/obnc/obncdoc/ext/extArgs.def.html),&#xA;an [extEnv](http://miasap.se/obnc/obncdoc/ext/extEnv.def.html) and&#xA;[extConvert](http://miasap.se/obnc/obncdoc/ext/extConvert.def.html).&#xA;&#xA;Mike&#39;s own modules that ship with Obc-3 cover allot of common ground&#xA;with Karl&#39;s. They are organized differently. The trivial solution is&#xA;to implement wrapping modules using Mike&#39;s modules for implementation.&#xA;That takes case of extArgs and extEnv.&#xA;&#xA;The module extConvert is in a another category. Mike&#39;s `Conv` module is&#xA;significantly minimalist. To solve that case I&#39;ve create C code to perform&#xA;the needed tasks based on Karl&#39;s examples and used Mike&#39;s share library&#xA;compilation instructions to make it available inside his run time. ...</description>
            <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.html</guid>
        </item>
        <item>
            <title>Revisiting Files</title>
            <link>https://rsdoiel.github.io/blog/2021/11/22/Revisiting-Files.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In October I had an Email exchange with Algojack regarding a buggy example in [Oberon-07 and the file system](../../../2020/05/09/Oberon-07-and-the-filesystem.html). The serious bug was extraneous non-printable characters appearing a plain text file containing the string &#34;Hello World&#34;. The trouble with the example was a result of my misreading the Oakwood guidelines and how **Files.WriteString()** is required to work. The **Files.WriteString()** procedure is supposed to write every element of a string to a file. This __includes the trailing Null character__. The problem for me is **Files.WriteString()** litters plain text files with tailing nulls. What I should have done was write my own **WriteString()** and **WriteLn()**. The program [HelloworldFile](./HelloworldFile.Mod) below is a more appropriate solution to writing strings and line endings than relying directly on **Files**. In a future post I will explorer making this more generalized in a revised &#34;Fmt&#34; module.&#xA;&#xA;~~~&#xA;MODULE HelloworldFile;&#xA;&#xA;IMPORT Files, Strings;&#xA;&#xA;CONST OberonEOL = 1; UnixEOL = 2; WindowsEOL = 3;&#xA;&#xA;VAR&#xA;  (* holds the eol marker type to use in WriteLn() *)&#xA;  eolType : INTEGER;&#xA;  (* Define a file handle *)&#xA;    f : Files.File;&#xA;  (* Define a file rider *)&#xA;    r : Files.Rider; ...</description>
            <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/11/22/Revisiting-Files.html</guid>
        </item>
        <item>
            <title>Portable Conversions (Integers)</title>
            <link>https://rsdoiel.github.io/blog/2021/11/26/Portable-Conversions-Integers.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>An area in working with Oberon-07 on a POSIX machine that has proven problematic is type conversion. In particular converting to and from INTEGER or REAL and ASCII.  None of the three compilers I am exploring provide a common way of handling this. I&#39;ve explored relying on C libraries but that approach has it&#39;s own set of problems.  I&#39;ve become convinced a better approach is a pure Oberon-07 library that handles type conversion with a minimum of assumptions about the implementation details of the Oberon compiler or hardware. I&#39;m calling my conversion module &#34;Types&#34;. The name is short and descriptive and seems an appropriate name for a module consisting of type conversion tests and transformations.  My initial implementation will focusing on converting integers to and from ASCII.&#xA;&#xA;I don&#39;t want to rely on the representation of the INTEGER value in the compiler or at the machine level. That has lead me to think in terms of an INTEGER as a signed whole number.&#xA;&#xA;The simplest case of converting to/from ASCII is the digits from zero to nine (inclusive). Going from an INTEGER to an ASCII CHAR is just looking up the offset of the character representing the &#34;digit&#34;. Like wise going from ASCII CHAR to a INTEGER is a matter of mapping in the reverse direction.  Let&#39;s call these procedures `DigitToChar` and  `CharToDigit*`.&#xA;&#xA;Since INTEGER can be larger than zero through nine and CHAR can hold non-digits I&#39;m going to add two additional procedures for validating inputs -- `IsIntDigit` and `IsCharDigit`. Both return TRUE if valid, FALSE if not.&#xA;&#xA;For numbers larger than one digit I can use decimal right shift to extract the ones column value or a left shift to reverse the process.  Let&#39;s called these `IntShiftRight` and `IntShiftLeft`.  For shift right it&#39;d be good to capture the ones column being lost. For shift left it would be good to be able to shift in a desired digit. That way you could shift/unshift to retrieve to extract and put back values. ...</description>
            <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/11/26/Portable-Conversions-Integers.html</guid>
        </item>
        <item>
            <title>Setting up FreeDOS 1.3rc4 with Qemu</title>
            <link>https://rsdoiel.github.io/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In this article I&#39;m going explore setting up FreeDOS with Qemu&#xA;on my venerable Dell 4319 running Raspberry Pi Desktop OS (Debian&#xA;GNU/Linux).  First step is to download FreeDOS &#34;Live CD&#34; in the&#xA;1.3 RC4 release. See http://freedos.org/download/ for that.&#xA;&#xA;I needed to install Qemu in my laptop. It runs the Raspberry Pi&#xA;Desktop OS (i.e. Debian with Raspberry Pi UI). I choose to install&#xA;the &#34;qemu-system&#34; package since I will likely use qemu for other&#xA;things besides FreeDOS. The qemu-system package contains all the&#xA;various systems I might want to emulate in other projects as well&#xA;as several qemu utilities that are handy.  Here&#39;s the full sequence&#xA;of `apt` commands I ran (NOTE: these included making sure my laptop&#xA;was up to date before I installed qemu-system).&#xA;&#xA;~~~&#xA;sudo apt update&#xA;sudo apt upgrade&#xA;sudo apt install qemu-system&#xA;~~~&#xA;&#xA;Now that I had the software available it was time to figure out&#xA;how to actually knit things together and run FreeDOS.&#xA;&#xA;Before I get started I create a folder in my home directory&#xA;for running everything. You can name it what you want&#xA;but I called mine `FreeDOS_13` and changed into that folder&#xA;for the work in this article. ...</description>
            <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.html</guid>
        </item>
        <item>
            <title>Notes on setting up a Mid-2010 Mac Mini</title>
            <link>https://rsdoiel.github.io/blog/2021/12/18/Notes-on-setting-up-a-2010-Mac-Mini.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>I acquired a Mid 2010 Mac Mini. It was in good condition but lacked an OS on the hard drive.  I used a previously purchased copy of Mac OS X Snow Leopard to get an OS up and running on the bare hardware. Then it was a longer effort to get the machine into a state with the software I wanted to use on it. My goal was Mac OS X High Sierra, Xcode 10.1 and Mac Ports. The process was straight forward but very time consuming but I think worth it.  I wound up with a nice machine for experimenting with and writing blog posts.&#xA;&#xA;The setup process was as follows:&#xA;&#xA;1. Install macOS Snow Leopard on the bare disk of the Mac Mini&#xA;2. Install macOS El Capitan on the Mac Mini after manually downloading it from Apple&#39;s support site&#xA;3. Run updates indicated by El Capitan&#xA;4. Install macOS High Sierra on the Mac Mini after manually downloading it from the Apple&#39;s support site&#xA;5. Run updates indicated by High Sierra &#xA;6. Manually download and install Xcode 10.1 command line tools &#xA;7. Check and run some updates again&#xA;8. Finally install Mac Ports&#xA;&#xA;The OS installs took about 45 minutes to 90 minutes each. Installing Xcode took about 45 minutes to an hour. Installing Mac Ports was fast as was installing software via Mac Ports.&#xA;&#xA;- Apple support pages that I found helpful&#xA;    - [How to get old versions of macOS](https://support.apple.com/en-us/HT211683)&#xA;    - [How to create a bootable installer for macOS](https://support.apple.com/en-us/HT201372)&#xA;    - [macOS High Sierra - Technical Specifications](https://support.apple.com/kb/SP765?locale=en_US)&#xA;- Wikipedia page on [Xcode](https://en.wikipedia.org/wiki/Xcode) is how I sorta out what version of Xcode I needed to install&#xA;- Links to old macOS and Xcode&#xA;    - Download [Mac OS X El El Capitan](http://updates-http.cdn-apple.com/2019/cert/061-41424-20191024-218af9ec-cf50-4516-9011-228c78eda3d2/InstallMacOSX.dmg)&#xA;    - Download [Mac OX X High Sierra](https://apps.apple.com/us/app/macos-high-sierra/id1246284741?mt=12)&#xA;    - Download [Xcode 10.1](https://developer.apple.com/download/all/?q=xcode), Scroll down the list until you want it.&#xA;        - [Command Line Tools (macOS 10.13) for Xcode 10.1](https://download.developer.apple.com/Developer_Tools/Command_Line_Tools_macOS_10.13_for_Xcode_10.1/Command_Line_Tools_macOS_10.13_for_Xcode_10.1.dmg)&#xA;        - NOTE: There are two version available, you want the version for macOS 10.13 (High Sierra) NOT Mac OS 10.14. ...</description>
            <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/12/18/Notes-on-setting-up-a-2010-Mac-Mini.html</guid>
        </item>
        <item>
            <title>Installing Golang from source on RPi-OS for arm64</title>
            <link>https://rsdoiel.github.io/blog/2022/02/18/Installing-Go-from-Source-RPiOS-arm64.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;&#xA;This are my quick notes on installing Golang from source on the Raspberry Pi OS 64 bit.&#xA;&#xA;1. Get a working compiler&#xA;&#x9;a. go to https://go.dev/dl/ and download go1.17.7.linux-arm64.tar.gz&#xA;&#x9;b. untar the tarball in your home directory (it&#39;ll unpack to $HOME/go)&#xA;&#x9;c. `cd go/src` and `make.bash`&#xA;2. Move go directory to go1.17&#xA;3. Clone go from GitHub&#xA;4. Compile with the downloaded compiler&#xA;&#x9;a. `cd go/src`&#xA;&#x9;b. `env GOROOT_BOOTSTRAP=$HOME/go1.17 ./make.bash`&#xA;&#x9;c. Make sure `$HOME/go/bin` is in the path&#xA;&#x9;d. `go version`&#xA;&#xA; ...</description>
            <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/02/18/Installing-Go-from-Source-RPiOS-arm64.html</guid>
        </item>
        <item>
            <title>Artemis Project Status, 2022</title>
            <link>https://rsdoiel.github.io/blog/2022/07/27/Artemis-Status-Summer-2022.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>It&#39;s been a while since I wrote an Oberon-07 post and even longer since I&#39;ve worked on Artemis. Am I done with Oberon-07 and abandoning Artemis?  No. Life happens and free time to just hasn&#39;t been available. I don&#39;t know when that will change.&#xA;&#xA;Since I plan to continue working Artemis I need to find a way forward in much less available time. Time to understand some of my constraints.&#xA;&#xA;1. I work on a variety of machines, OBNC is the only compiler I&#39;ve consistently been able to use across all my machines&#xA;2. Porting between compilers takes energy and time, and those compilers don&#39;t work across all my machines&#xA;3. When I write Oberon-07 code I quickly hit a wall for the things I want to do, this is what original inspired Artemis, so there is still a need for a collection of modules&#xA;4. Oberon/Oberon-07 on Wirth RISC virtual machine is not sufficient for my development needs&#xA;5. A2, while very impressive, isn&#39;t working for me either (mostly because I need to work on ARM CPUs)&#xA;&#xA;These constraints imply Artemis is currently too broadly scoped. I think I need to focus on what works in OBNC for now. Once I have a clear set of modules then I can revisit portability to other compilers.&#xA;&#xA;What modules do I think I need? If I look at my person projects I tend to work allot with text, often structured text (e.g. XML, JSON, CSV). I also tend to be working with network services. Occasionally I need to interact with database (e.g. SQLite3, MySQL, Postgres).  Artemis should provide modules to make it easy to write code in Oberon-07 that works in those areas. Some of that I can do by wrapping existing C libraries. Some I can simply write from scratch in Oberon-07 (e.g. a JSON encoder/decoder). That&#39;s going to me my focus as my hobby time becomes available and then. ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/07/27/Artemis-Status-Summer-2022.html</guid>
        </item>
        <item>
            <title>Turbo Oberon, the dream</title>
            <link>https://rsdoiel.github.io/blog/2022/07/30/Turbo-Oberon.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>Sometimes I have odd dreams and that was true last night through early this morning. The dream was set in the future. I was already retired. It was a dream about &#34;Turbo Oberon&#34;.&#xA;&#xA;&#34;Turbo Oberon&#34; was an Oberon language. The language compiler was named &#34;TO&#34; in my dream. A module&#39;s file extension was &#34;.tom&#34;, in honor of Tom Lopez (Meatball Fulton) of ZBS. There were allot of ZBS references in the dream.&#xA;&#xA;&#34;TO&#34; was very much a language in the Oberon-07 tradition with minor extensions when it came to bringing in modules. It allowed for a multi path search for module names. You could also express a Module import as a string allowing providing paths to the imported module.&#xA;&#xA;Compilation was similar to Go. Cross compilation was available out of the box by setting a few environment variables. I remember answering questions about the language and its evolution. I remember mentioning in the conversation about how I thought Go felling into the trap of complexity like Rust or C/C++ before it. The turning point for Go was generics. Complexity was the siren song to be resisted in &#34;Turbo Oberon&#34;. Complexity is seductive to language designers and implementers. I was only an implementer.&#xA;&#xA;Evolution wise &#34;TO&#34; was built initially on the Go tool chain. As a result it featured easily cross-compiled binaries and had a rich standard set of Modules like Go but also included portable libraries for implementing graphic user interfaces. &#34;Turbo Oberon&#34; evolved as a conversation between Go and the clean simplicity of Oberon-07. Two example applications &#34;shipped&#34; with the &#34;TO&#34; compiler. They were an Oberon like Operating System (stand alone and hosted) and a Turbo Pascal like IDE. The IDE was called &#34;toe&#34; for Turbo Oberon Editor. I don&#39;t remember the name of the OS implementation but it might have been &#34;toos&#34;. I remember &#34;TO&#34; caused problems for search engines and catalog systems. ...</description>
            <pubDate>Mon, 22 Aug 2022 12:48:09 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/07/30/Turbo-Oberon.html</guid>
        </item>
        <item>
            <title>4:30 PM, Golang: stngo</title>
            <link>https://rsdoiel.github.io/blog/2022/08/12/golang-development-2022-08-12_160430.html</link>
            <author>R. S. Doiel</author>
            <description>By R. S. Doiel, Friday, August 12, 2022 16:04 PDT&#xA;&#xA;A work slack exchange has perked my interest in using [simple timesheet notation](https://rsdoiel.github.io/stngo/docs/stn.html) for very short blog posts. This could be similar to Dave Winer title less posts on [scripting](http://scripting.com). How would this actually map? Should it be a tool in the [stngo](https://rsdoiel.githubio/stngo) project?&#xA;&#xA; ...</description>
            <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/08/12/golang-development-2022-08-12_160430.html</guid>
        </item>
        <item>
            <title>5:00 PM, Golang: pdtk,  stngo</title>
            <link>https://rsdoiel.github.io/blog/2022/08/14/golang-development-2022-08-14_170500.html</link>
            <author>R. S. Doiel</author>
            <description>By R. S. Doiel, Sunday, August 14, 2022 17:05 PDT&#xA;&#xA;Today I started an experiment. I cleaned up stngo a little today, still need to implement a general `Parse()` method that works on a `io.Reader`. After a few initial false starts I realized the &#34;right&#34; place for rendering simple timesheet notation as blog posts is in the the &#34;blogit&#34; action of [pdtk](https://rsdoiel.github.io/pdtk). I think this form might be useful for both release notes in projects as well as a series aggregated from single paragraphs. The limitation of the single paragraph used in simple timesheet notation is intriguing. Proof of concept is working in v0.0.3 of pdtk. Still sorting out if I need a title and if so what it should be.&#xA;&#xA; ...</description>
            <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/08/14/golang-development-2022-08-14_170500.html</guid>
        </item>
        <item>
            <title>5:45 PM, Golang: ptdk,  stngo</title>
            <link>https://rsdoiel.github.io/blog/2022/08/15/golang-development-2022-08-15_170545.html</link>
            <author>R. S. Doiel</author>
            <description>By R. S. Doiel, Monday, August 15, 2022 17:05 PDT&#xA;&#xA;Thinking through what a &#34;post&#34; from an simple timesheet notation file should look like. One thing occurred to me is that the entry&#39;s &#34;end&#34; time is the publication date, not the start time. That way the post is based on when it was completed not when it was started. There is an edge case of where two entries end at the same time on the same date. The calculated filename will collide. In the `BlogSTN()` function I could check for potential file collision and either issue a warning or append. Not sure of the right action. Since I write sequentially this might not be a big problem, not sure yet. Still playing with formatting before I add this type of post to my blog. Still not settled on the title question but I need something to link to from my blog&#39;s homepage and that &#34;title&#34; is what I use for other posts. Maybe I should just use a command line option to provide a title?&#xA;&#xA; ...</description>
            <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/08/15/golang-development-2022-08-15_170545.html</guid>
        </item>
        <item>
            <title>Pdtk and STN</title>
            <link>https://rsdoiel.github.io/blog/2022/08/15/golang-development.html</link>
            <author>R. S. Doiel</author>
            <description>This log is a proof of concept in using [simple timesheet notation](https://rsdoiel.github.io/stngo/docs/stn.html) as a source for very short blog posts. The tooling is written in Golang (though eventually I hope to port it to Oberon-07).  The implementation combines two of my personal projects, [stngo](https://github.com/rsdoiel/stngo) and my experimental writing tool [pdtk](https://github.com/rsdoiel/pdtk). Updating the __pdtk__ cli I added a function to the &#34;blogit&#34; action that will translates the simple timesheet notation (aka STN) to a short blog post.  My &#34;short post&#34; interest is a response to my limited writing time. What follows is the STN markup. See the [Markdown](https://raw.githubusercontent.com/rsdoiel/rsdoiel.github.io/main/blog/2022/08/15/golang-development.md) source for the unprocessed text.&#xA;&#xA;2022-08-15&#xA;&#xA;16:45 - 17:45; Golang; ptdk, stngo; Thinking through what a &#34;post&#34; from an simple timesheet notation file should look like. One thing occurred to me is that the entry&#39;s &#34;end&#34; time is the publication date, not the start time. That way the post is based on when it was completed not when it was started. There is an edge case of where two entries end at the same time on the same date. The calculated filename will collide. In the `BlogSTN()` function I could check for potential file collision and either issue a warning or append. Not sure of the right action. Since I write sequentially this might not be a big problem, not sure yet. Still playing with formatting before I add this type of post to my blog. Still not settled on the title question but I need something to link to from my blog&#39;s homepage and that &#34;title&#34; is what I use for other posts. Maybe I should just use a command line option to provide a title?&#xA;&#xA;2022-08-14&#xA;&#xA;14:00 - 17:00; Golang; pdtk, stngo; Today I started an experiment. I cleaned up stngo a little today, still need to implement a general `Parse()` method that works on a `io.Reader`. After a few initial false starts I realized the &#34;right&#34; place for rendering simple timesheet notation as blog posts is in the the &#34;blogit&#34; action of [pdtk](https://rsdoiel.github.io/pdtk). I think this form might be useful for both release notes in projects as well as a series aggregated from single paragraphs. The limitation of the single paragraph used in simple timesheet notation is intriguing. Proof of concept is working in v0.0.3 of pdtk. Still sorting out if I need a title and if so what it should be. ...</description>
            <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/08/15/golang-development.html</guid>
        </item>
        <item>
            <title>Rosette Notes: Postgres and MySQL</title>
            <link>https://rsdoiel.github.io/blog/2022/08/18/rosette-notes.html</link>
            <author>R. S. Doiel</author>
            <description>&gt; A dance around two relational databases, piecing together similarities as with the tiny mosaic tiles of a guitar&#39;s rosette&#xA;&#xA;What follows are my preliminary notes learning Postgres 12 and 14.&#xA;&#xA;This is a short comparison of some administrative commands I commonly use. The first column describes the task followed by the SQL to execute for Postgres 14.5 and then MySQL 8. The presumption is you&#39;re using `psql` to access Postgres and `mysql` to  access MySQL. Values between `&lt;` and `&gt;` should be replaced with an appropriate value.&#xA;&#xA;| Task                    | Postgres 14.5                     | MySQL 8           |&#xA;|-------------------------|------------------------------------|-------------------|&#xA;| show all databases      | `SELECT datname FROM pg_database;` | `SHOW DATABASES;` |&#xA;| select a database       | `\c &lt;dbname&gt;`                      | `USE &lt;dbname&gt;`    |&#xA;| show tables in database | `\dt`                              | `SHOW TABLES;`    |&#xA;| show columns in table   | `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = &#39;&lt;table_name&gt;&#39;;` | `SHOW COLUMNS IN &lt;table_name&gt;` |&#xA;&#xA;The Postgres shell, `psql`, provides the functionality of showing a list of tables via a short cut while MySQL choose to add the `SHOW TABLES` query. For me `SHOW ...` feels like SQL where as `\d` or `\dt` takes me out of SQL space. On the other hand given Postgres metadata structure the shortcut is appreciated and I often query for table names as I forget them. `\dt` quickly becomes second nature and is shorter to type than `SHOW TABLES`. ...</description>
            <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/08/18/rosette-notes.html</guid>
        </item>
        <item>
            <title>Rosette Notes: Postgres and MySQL</title>
            <link>https://rsdoiel.github.io/blog/2022/08/19/rosette-notes.html</link>
            <author>R. S. Doiel</author>
            <description>&gt; A dance around two relational databases, piecing together similarities as with the tiny mosaic tiles of a guitar&#39;s rosette&#xA;&#xA;What follows are my preliminary notes learning Postgres 12 and 14.&#xA;&#xA;This is a short comparison of some administrative commands I commonly use. The first column describes the task followed by the SQL to execute for Postgres 14.5 and then MySQL 8. The presumption is you&#39;re using `psql` to access Postgres and `mysql` to  access MySQL. Values between `&lt;` and `&gt;` should be replaced with an appropriate value.&#xA;&#xA;| Task                    | Postgres 14.5                     | MySQL 8           |&#xA;|-------------------------|------------------------------------|-------------------|&#xA;| show all databases      | `SELECT datname FROM pg_database;` | `SHOW DATABASES;` |&#xA;| select a database       | `\c &lt;dbname&gt;`                      | `USE &lt;dbname&gt;`    |&#xA;| show tables in database | `\dt`                              | `SHOW TABLES;`    |&#xA;| show columns in table   | `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = &#39;&lt;table_name&gt;&#39;;` | `SHOW COLUMNS IN &lt;table_name&gt;` |&#xA;&#xA;The Postgres shell, `psql`, provides the functionality of showing a list of tables via a short cut while MySQL choose to add the `SHOW TABLES` query. For me `SHOW ...` feels like SQL where as `\d` or `\dt` takes me out of SQL space. On the other hand given Postgres metadata structure the shortcut is appreciated and I often query for table names as I forget them. `\dt` quickly becomes second nature and is shorter to type than `SHOW TABLES`. ...</description>
            <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/08/19/rosette-notes.html</guid>
        </item>
        <item>
            <title>11:30 AM, SQL: Postgres</title>
            <link>https://rsdoiel.github.io/blog/2022/08/22/rosette-notes-2022-08-22_111130.html</link>
            <description>Post: Monday, August 22, 2022, 11:30 AM&#xA;&#xA;Three things have turned out to be challenges in the SQL I write, first back ticks is a MySQL-ism for literal quoting of table and column names, causes problems in Postgres. Second issue is &#34;REPLACE&#34; is a none standard extension I picked up from MySQL [it wraps a DELETE and INSERT together](https://dev.mysql.com/doc/refman/8.0/en/extensions-to-ansi.html), should be using UPDATE more than I have done in the past. The third is parameter replacement in SQL statement. This appears to be [db implementation specific](http://go-database-sql.org/prepared.html). I&#39;ve used &#34;?&#34; with SQLite and MySQL but with Postgres I need ot use &#34;$1&#34;, &#34;$2&#34;, etc. Challenging to write SQL once and have it work everywhere. Beginning to understand why GORM has traction.&#xA;&#xA; ...</description>
            <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/08/22/rosette-notes-2022-08-22_111130.html</guid>
        </item>
    </channel>
</rss>
