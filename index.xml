<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <atom:link href="https://rsdoiel.github.io/index.xml" rel="self" type="application/rss+xml"/>
        <title>R. S. Doiel Website</title>
        <link>https://rsdoiel.github.io</link>
        <description>Robert&#39;s Website</description>
        <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
        <lastBuildDate>Sat, 09 Aug 2025 14:25:35 -0700</lastBuildDate>
        <generator>pttk rss 0.0.18</generator>
        <item>
            <title>OPML to Markdown and back</title>
            <link>https://rsdoiel.github.io/blog/2016/05/28/OPML-to-Markdown-and-back.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post covers developing a Go package for [OPML](http://dev.opml.org/spec2.html) and it&#39;s features.&#xA;</description>
            <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/05/28/OPML-to-Markdown-and-back.html</guid>
        </item>
        <item>
            <title>Instant Articles, Accelerated Mobile Pages, Twitter Cards and Open Graph</title>
            <link>https://rsdoiel.github.io/blog/2016/05/30/amp-cards-and-open-graph.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post explores Twitter Cards, Facebook Open Graph, AMP and what implementations they have for page weight and usage.&#xA;</description>
            <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/05/30/amp-cards-and-open-graph.html</guid>
        </item>
        <item>
            <title>How to make a Pi-Top more Raspbian</title>
            <link>https://rsdoiel.github.io/blog/2016/07/04/How-To-Make-A-PiTop-More-Raspbian.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post explore making a PiTop a little more Raspbian.&#xA;</description>
            <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/07/04/How-To-Make-A-PiTop-More-Raspbian.html</guid>
        </item>
        <item>
            <title>Exploring Bash for Windows 10 Pro</title>
            <link>https://rsdoiel.github.io/blog/2016/08/15/Setting-up-Go-under-Bash-for-Windows-10.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#34;_Exploring Bash for Windows 10 Pro_&#34; coverse the process of setting up and configuring Bash on Windows 10 Pro within a Virtual Box environment. The setup involves enabling &#xA;developer mode, activating the Linux Subsystem Beta, and installing Bash on Ubuntu on Windows. Also covered is setting Go for this environment.&#xA;</description>
            <pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/08/15/Setting-up-Go-under-Bash-for-Windows-10.html</guid>
        </item>
        <item>
            <title>From Markdown and Bash to mkpage</title>
            <link>https://rsdoiel.github.io/blog/2016/08/16/From-Markdown-and-Bash-to-mkpage.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In this port I explore deconstructing functionality typically found in content management systems. It explores an approach to publishing a website hosted via GitHub. Covered the [MkPage](https://github.com/rsdoiel/mkpage) tools I developed.&#xA;</description>
            <pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/08/16/From-Markdown-and-Bash-to-mkpage.html</guid>
        </item>
        <item>
            <title>Android, Termux and Dev Environment</title>
            <link>https://rsdoiel.github.io/blog/2016/09/20/Android-Termux-Dev-environment.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In this post I explore getting a terminal setup configured on an Android tablet.&#xA;</description>
            <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/09/20/Android-Termux-Dev-environment.html</guid>
        </item>
        <item>
            <title>Cross compiling Go 1.8.3 for Pine64 Pinebook</title>
            <link>https://rsdoiel.github.io/blog/2017/06/16/cross-compiling-go.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is a post on setting cross compilation for a Pine64 Pinebook.&#xA;</description>
            <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/06/16/cross-compiling-go.html</guid>
        </item>
        <item>
            <title>NodeJS, NPM, Electron</title>
            <link>https://rsdoiel.github.io/blog/2017/10/20/node-npm-electron.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post discusses nodeJS and Electron.&#xA;</description>
            <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/10/20/node-npm-electron.html</guid>
        </item>
        <item>
            <title>Harvesting my Gists from GitHub</title>
            <link>https://rsdoiel.github.io/blog/2017/12/10/harvesting-my-gists-from-github.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is a just quick set of notes on harvesting my Gists on GitHub so I&#xA;have an independent copy for my own website. &#xA;</description>
            <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/12/10/harvesting-my-gists-from-github.html</guid>
        </item>
        <item>
            <title>Raspbian Stretch on DELL E4310 Laptop</title>
            <link>https://rsdoiel.github.io/blog/2017/12/18/raspbian-stretch-on-amd64.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post talks about a used Dell E4310 I purchased. It covers setting it up with [Raspbian Stretch](https://www.raspberrypi.org/blog/raspbian-stretch/) and configuring it so I can share it with my family.&#xA;</description>
            <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/12/18/raspbian-stretch-on-amd64.html</guid>
        </item>
        <item>
            <title>Go, Bleve and Library oriented software</title>
            <link>https://rsdoiel.github.io/blog/2018/02/19/go-bleve-and-libraries.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In 2016, Stephen Davison, asked me, &#34;Why use Go and Blevesearch for&#xA;our library projects?&#34; After our conversation I wrote up some notes so&#xA;I would remember. It is now 2018 and I am revising these notes. I&#xA;think our choice paid off.  What follows is the current state of my&#xA;reflection on the background, rational, concerns, and risk mitigation&#xA;strategies so far for using [Go](https://golang.org) and&#xA;[Blevesearch](https://blevesearch.com) for Caltech Library projects.&#xA;</description>
            <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/02/19/go-bleve-and-libraries.html</guid>
        </item>
        <item>
            <title>Go based Python modules</title>
            <link>https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>I have written a number of Go packages at work.&#xA;My colleagues know Python and I&#39;d like them to be able to use the&#xA;packages without resorting to system calls from Python to the&#xA;command line implementations. The solution is create a C-Shared&#xA;library from my Go packages, using Go&#39;s _C_ package and combine it&#xA;with Python&#39;s _ctypes_ package.  What follows is a series of &#xA;simple recipes I used to understand the details of how that worked.&#xA;&#xA;</description>
            <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.html</guid>
        </item>
        <item>
            <title>Accessing Go from Julia</title>
            <link>https://rsdoiel.github.io/blog/2018/03/11/accessing-go-from-julia.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>The problem: I&#39;ve started exploring Julia and I would like to leverage existing&#xA;code I&#39;ve written in Go. Essentially this is a revisit to the problem in my&#xA;last post [Go based Python Modules](https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.html) &#xA;but with the language pairing of Go and Julia.&#xA;&#xA;&#xA;</description>
            <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/03/11/accessing-go-from-julia.html</guid>
        </item>
        <item>
            <title>Review: Software Tools in Pascal</title>
            <link>https://rsdoiel.github.io/blog/2018/07/22/software-tools-in-pascal.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>Book Review: This book is by Brian W. Kernighan and P. J. Plauger. It is an&#xA;example of the type of books I find I re-read and want in my&#xA;personal library. The book covers software construction through &#xA;a series of programs written in pascal. It is about how these &#xA;programs work, how to approach problems and write sound software.&#xA;I was surprised I did not know about this book when I was browsing &#xA;the [Open Library](https://openlibrary.org) this weekend.  While &#xA;Pascal was a popular in the 1980&#39;s it has faded for most people in the &#xA;early 21st century.  This review maybe a small bit of nostalgia. &#xA;On the other hand I suspect &#xA;[&#34;Software Tools in Pascal&#34;](https://openlibrary.org/books/OL4258115M/Software_tools_in_Pascal)&#xA;is one of the short list of computer books that will remain useful&#xA;over the long run.&#xA;</description>
            <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/07/22/software-tools-in-pascal.html</guid>
        </item>
        <item>
            <title>FreeDOS 1.2 to Oberon System 3</title>
            <link>https://rsdoiel.github.io/blog/2019/07/28/freedos-to-oberon-system-3.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>What follows are notes on getting a FreeDOS 1.2[^1] and &#xA;then Native Oberon[^2] running under VirtualBox 6.0. You might &#xA;wonder why these two are together. While it was&#xA;easy to run the Native Oberon installation process that process&#xA;assumes you have a properly partitioned hard disk and VirtualBox&#xA;seems to skip that process. I found taking advantage of FreeDOS&#xA;simplified things for me.&#xA;</description>
            <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2019/07/28/freedos-to-oberon-system-3.html</guid>
        </item>
        <item>
            <title>Mostly Oberon</title>
            <link>https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>**Mostly Oberon** is a series of blog posts documenting my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.&#xA;&#xA;## Overview&#xA;&#xA;Oberon is a classical computer language and operating system originated by Professors Niklaus Wirth and Jürg Gutknecht at [ETH](https://en.wikipedia.org/wiki/ETH_Zurich) circa 1987.  It was inspired by their experiences in California at the [Xerox Palo Alto Research Center](https://en.wikipedia.org/wiki/PARC_\(company\)).  This series of blog posts are my meandering exploration of Oberon-07 language based on [Project Oberon 2013](http://www.projectoberon.com/).&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html</guid>
        </item>
        <item>
            <title>Oberon Modules and Procedures</title>
            <link>https://rsdoiel.github.io/blog/2020/04/12/Mostly-Oberon-Modules.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the second post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.&#xA;&#xA;## Modules&#xA;&#xA;The module is a primary code unit of Oberon language. Modules allow you to focus on functional units of code and can be readily composed into larger solutions.&#xA;A module&#39;s name should match the filename you are saving it under. A module starts with declaring it&#39;s name and ends the declaration with a semicolon&#xA;the statement separator in Oberon. Our simple &#34;Hello World&#34; example &#xA;shows the basic code shape.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/12/Mostly-Oberon-Modules.html</guid>
        </item>
        <item>
            <title>Oberon Basic Types</title>
            <link>https://rsdoiel.github.io/blog/2020/04/18/Mostly-Oberon-Basic-Types.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the third post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.&#xA;&#xA;## Simple Types&#xA;&#xA;Oberon is a small systems language. It provides a useful but &#xA;limited umber of basic types. These can be be&#xA;thought of as simple types mapping to specific memory locations&#xA;and more complex types composed of multiple memory locations.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/18/Mostly-Oberon-Basic-Types.html</guid>
        </item>
        <item>
            <title>Oberon Loops and Conditions</title>
            <link>https://rsdoiel.github.io/blog/2020/04/19/Mostly-Oberon-Loops-and-Conditions.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the four post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;## Data Flow&#xA;&#xA;Oberon is a small systems language and while it is minimalist.&#xA;It provides you with the necessary primitives to get things done.&#xA;I&#39;ve touched on code organization, basic types and basic type&#xA;extensions in the previous articles.  I have shown the basic&#xA;control statements but have not talked about them yet.&#xA;&#xA;Oberon offers four basic control statements. &#xA;&#xA;...&#xA;</description>
            <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/19/Mostly-Oberon-Loops-and-Conditions.html</guid>
        </item>
        <item>
            <title>Combining Oberon-07 and C with OBNC</title>
            <link>https://rsdoiel.github.io/blog/2020/05/01/Combining-Oberon-and-C.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the fifth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html)&#xA;series. Mostly Oberon documents my exploration of the Oberon&#xA;Language, Oberon System and the various rabbit holes I will&#xA;inevitably fall into.&#xA;&#xA;In my day job I write allot of code in Go and&#xA;orchestration code in Python.  It&#39;s nice having&#xA;the convenience of combining code written one&#xA;language with an another.  You can do the same&#xA;with [OBNC](https://miasap.se/obnc/).  The OBNC&#xA;compiler supports inclusion of C code in a&#xA;straight forward manner. In fact Karl&#39;s compiler&#xA;will generate the C file for you!&#xA;&#xA;In learning how to combine C code and Oberon-07&#xA;I started by reviewing Karl&#39;s [manual page](https://miasap.se/obnc/man/obnc.txt).&#xA;The bottom part of that manual page describes&#xA;the steps I will repeat below. The description&#xA;sounds more complicated but when you walk through&#xA;the steps it turns out to be pretty easy.&#xA;&#xA;...&#xA;</description>
            <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/01/Combining-Oberon-and-C.html</guid>
        </item>
        <item>
            <title>Compiling OBNC on macOS</title>
            <link>https://rsdoiel.github.io/blog/2020/05/06/Compiling-OBNC-on-macOS.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the sixth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;Compiling OBNC v0.16.1 on macOS (10.13.6) using MacPorts (2.6.2) &#xA;is straight forward if you have the required dependencies and &#xA;environment setup up. Below are my notes to get everything working.&#xA;&#xA;...&#xA;</description>
            <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/06/Compiling-OBNC-on-macOS.html</guid>
        </item>
        <item>
            <title>Oberon-07 and the file system</title>
            <link>https://rsdoiel.github.io/blog/2020/05/09/Oberon-07-and-the-filesystem.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the seventh post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/09/Oberon-07-and-the-filesystem.html</guid>
        </item>
        <item>
            <title>Dynamic types</title>
            <link>https://rsdoiel.github.io/blog/2020/05/25/Dynamic-types.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the eighth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html)&#xA;series. Mostly Oberon documents my exploration of the Oberon Language, &#xA;Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;## Dynamic Types in Oberon&#xA;&#xA;Oberon-07 is a succinct systems language. It provides a minimal&#xA;but useful set of basic static types. Relying on them addresses &#xA;many common programming needs. The Oberon compiler ensures &#xA;static types are efficiently allocated in memory. One of the &#xA;strengths of Oberon is this ability to extend the type system. &#xA;This means when the basic types fall short you can take &#xA;advantage of Oberon&#39;s type  extension features. This includes &#xA;creating dynamically allocated data structures. In Oberon-07 &#xA;combining Oberon&#39;s `POINTER TO` and `RECORD` types allows us to&#xA;create complex and dynamic data structures. &#xA;&#xA;...&#xA;</description>
            <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/25/Dynamic-types.html</guid>
        </item>
        <item>
            <title>Procedures as parameters</title>
            <link>https://rsdoiel.github.io/blog/2020/06/20/Procedures-as-parameters.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the ninth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the &#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;Oberon-07 supports the passing of procedures as parameters in a procedure. &#xA;Let&#39;s create a module name [Noises.Mod](Noises.Mod) to explore this.&#xA;&#xA;The key to supporting this is Oberon&#39;s type system.  We need to decide what our &#xA;generic procedure will look like first. In our case our procedures that will display &#xA;an animal noise will include the name of the animal speaking.  We&#39;ll call this type &#xA;of procedure &#34;Noise&#34;. It&#39;ll accept an ARRAY OF CHAR for the name as a parameter &#xA;then use the standard Out module to display the animal name and noise they make.&#xA;&#xA;&#xA;</description>
            <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/06/20/Procedures-as-parameters.html</guid>
        </item>
        <item>
            <title>Procedures in records</title>
            <link>https://rsdoiel.github.io/blog/2020/07/07/Procedures-in-records.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the tenth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the &#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;In my last post I looked at how Oberon-07 supports the passing of procedures as parameters in a procedure. In this one I am looking at how we can&#xA;include procedures as a part of an Oberon RECORD. &#xA;&#xA;Let&#39;s modify our module name [Noises.Mod](Noises.Mod) to explore this.&#xA;Copy &#34;Noises.Mod&#34; to &#34;Creatures.Mod&#34;. Replace the &#34;MODULE Noises;&#34; line with&#xA;&#34;MODULE Creatures;&#34; and the final &#34;END Noises.&#34; statement with &#34;END Creatures.&#34;.&#xA;&#xA;&#xA;</description>
            <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/07/07/Procedures-in-records.html</guid>
        </item>
        <item>
            <title>Words Matter</title>
            <link>https://rsdoiel.github.io/blog/2020/07/08/words-matter.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>**Why does software development use the vocabulary of slavery and&#xA;Jim Crow to describe our creations?** What we call things matters.&#xA;This is especially true of the words we use day to day without thinking.&#xA;&#xA;```shell&#xA;    git pull origin master&#xA;```&#xA;&#xA;&#34;Naming things is a hard problem in computer science.&#34; That is&#xA;a phrase I remember from my student days. We name variables,&#xA;programs and algorithms. We name architectures. Naming is a choice.&#xA;The names convey meaning and intent. Names and terms are a human&#xA;communication. They matter.&#xA;&#xA;```shell&#xA;    git push origin master&#xA;```&#xA;&#xA;</description>
            <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/07/08/words-matter.html</guid>
        </item>
        <item>
            <title>Portable Oberon-07</title>
            <link>https://rsdoiel.github.io/blog/2020/08/15/Portable-Oberon-07.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the eleventh post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the&#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/08/15/Portable-Oberon-07.html</guid>
        </item>
        <item>
            <title>Software Tools, Getting Started</title>
            <link>https://rsdoiel.github.io/blog/2020/09/29/Software-Tools-1.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post is the first in a series revisiting the&#xA;programs described in the 1981 book by Brian W. Kernighan and&#xA;P. J. Plauger&#39;s called [Software Tools in Pascal](https://archive.org/details/softwaretoolsinp00kern).&#xA;The book is available from the [Open Library](https://openlibrary.org/)&#xA;and physical copies are still (2020) commonly available from used book&#xA;sellers.  The book was an early text on creating portable command&#xA;line programs.  &#xA;&#xA;In this series I present the K &amp; P (i.e. Software Tools in Pascal)&#xA;programs re-implemented in Oberon-07. I have testing my implementations&#xA;using Karl Landström&#39;s [OBNC](http://miasap.se/obnc/)&#xA;compiler and his implementation of the Oakwood Guide&#39;s modules&#xA;for portable Oberon programs. Karl also provides a few additional&#xA;modules for working in a POSIX environment (e.g. BSD, macOS, Linux,&#xA;Windows 10 with Linux subsystem). I have also tested these&#xA;programs with Mike Spivey&#39;s [Oxford Oberon Compiler](http://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler) an aside&#xA;from the differences file extensions that both compilers use&#xA;the source code works the same. &#xA;&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/09/29/Software-Tools-1.html</guid>
        </item>
        <item>
            <title>Oberon to Markdown</title>
            <link>https://rsdoiel.github.io/blog/2020/10/03/Oberon-to-markdown.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the twelfth post in the [Mostly Oberon](https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/03/Oberon-to-markdown.html</guid>
        </item>
        <item>
            <title>Assembling Pages</title>
            <link>https://rsdoiel.github.io/blog/2020/10/19/Assemble-pages.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is the thirteenth post in the [Mostly Oberon](https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/19/Assemble-pages.html</guid>
        </item>
        <item>
            <title>Software Tools, Filters</title>
            <link>https://rsdoiel.github.io/blog/2020/10/31/Filters.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post is the second in a series revisiting the programs described in the 1981 book by Brian W. Kernighan and P. J.&#xA;Plauger&#39;s called [Software Tools in Pascal](https://archive.org/details/softwaretoolsinp00kern). The book is available from the&#xA;[Open Library](https://openlibrary.org/) and physical copies are still (2020) commonly available from used book sellers. The book was an late 20th century text on creating portable command line programs using ISO standard Pascal of the era.&#xA;...&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/31/Filters.html</guid>
        </item>
        <item>
            <title>Pandoc Partials</title>
            <link>https://rsdoiel.github.io/blog/2020/11/09/Pandoc-Partials.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>Most people know about [Pandoc](https://pandoc.org/) from its&#xA;fantastic ability to convert various markup formats from one to&#xA;another. A little less obvious is Pandoc can be a template engine&#xA;for rendering static websites allowing you full control over the&#xA;rendered content.&#xA;&#xA;The main Pandoc documentation of the template engine can be found&#xA;in the [User Guide](https://pandoc.org/MANUAL.html#templates).&#xA;The documentation is complete in terms of describing the template&#xA;capabilities but lacks a tutorial for using as a replacement for more&#xA;ambitious rendering systems like [Jekyll](https://jekyllrb.com/) or&#xA;[Hugo](https://gohugo.io/). Pandoc takes a vary direct approach and&#xA;can be deceptively simple to implement.&#xA;&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/09/Pandoc-Partials.html</guid>
        </item>
        <item>
            <title>Pandoc &amp; Metadata</title>
            <link>https://rsdoiel.github.io/blog/2020/11/11/Pandoc-Metadata.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>Pandoc supports three ways of providing metadata to its template&#xA;engine. &#xA;&#xA;1. Front matter&#xA;2. Command line optional metadata&#xA;3. A JSON metadata file.&#xA;&#xA;Front matter is a community term that comes from physical world&#xA;of paper books and articles.  It is the information that comes &#xA;before the primary content.  This information might be things &#xA;like title, author, publisher and publication date. These days &#xA;it&#39;ll also include things like identifiers like ISSN, ISBN possibly &#xA;newer identifiers like DOI or ORCID. In the library and programming&#xA;community we refer to this type of structured information as&#xA;metadata.  Data about the publication or article.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/11/Pandoc-Metadata.html</guid>
        </item>
        <item>
            <title>Chars</title>
            <link>https://rsdoiel.github.io/blog/2020/11/27/Chars.html</link>
            <author>R. S. Doiel</author>
            <description>Source code for Chars.Mod.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/27/Chars.html</guid>
        </item>
        <item>
            <title>Clock</title>
            <link>https://rsdoiel.github.io/blog/2020/11/27/Clock.html</link>
            <author>R. S. Doiel</author>
            <description>This is a C time library wrapper for getting system time&#xA;to support Dates.Mod. The procedures are read only as&#xA;setting time is non-standard on many Unix-like systems[^1].&#xA;The two procedures follow the A2 style procedure signatures&#xA;adjusted for Oberon-07.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/27/Clock.html</guid>
        </item>
        <item>
            <title>Dates &amp; Clock</title>
            <link>https://rsdoiel.github.io/blog/2020/11/27/Dates-and-Clock.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>The [Oakwood](http://www.edm2.com/index.php/The_Oakwood_Guidelines_for_Oberon-2_Compiler_Developers#The_Oakwood_Guidelines)&#xA;guidelines specified a common set of modules for Oberon-2 for writing&#xA;programs outside of an Oberon System. A missing module from the Oakwood&#xA;guidelines is modules for working with dates and the system clock.&#xA;Fortunately the A2 Oberon System provides a template for that&#xA;functionality. In this article I am exploring implementing the&#xA;[Dates](Dates.Mod) and [Clock](Clock.Mod) modules for Oberon-07. I&#xA;also plan to go beyond the A2 implementations and provide additional&#xA;functionality such as parsing procedures and the ability to work with&#xA;either the date or time related attributes separately in the&#xA;`Dates.DateTime` record.&#xA;&#xA;...&#xA;</description>
            <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/27/Dates-and-Clock.html</guid>
        </item>
        <item>
            <title>Dates</title>
            <link>https://rsdoiel.github.io/blog/2020/11/27/Dates.html</link>
            <author>R. S. Doiel</author>
            <description>This module provides minimal date time records and procedures&#xA;for working with dates in YYYY-MM-DD and MM/DD/YYYY format and&#xA;times in H:MM, HH:MM and HH:MM:SS formats.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/11/27/Dates.html</guid>
        </item>
        <item>
            <title>RetroFlag GPi Case Setup</title>
            <link>https://rsdoiel.github.io/blog/2020/12/24/gpi-case-setup.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>These are my notes for setting up a RetroFlag GPi case using Recalbox&#xA;distribution for retro gaming.&#xA;&#xA;+ RetroFlag GPi Case Kit (including a Raspberry Pi Zero W and blank SD Card)&#xA;+ A computer to setup the SD Card  and the Raspberry Pi Imager v1.5&#xA;&#xA;We will be installing [Recalbox](https://www.recalbox.com/ &#34;the all-in-one retro gaming console&#34;)&#xA;v7.7.x for Raspberry Pi Zero W and GPi case.  Recalbox which is a Retro&#xA;Gaming Linux distribution.&#xA;&#xA;&#xA;</description>
            <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/12/24/gpi-case-setup.html</guid>
        </item>
        <item>
            <title>ETH Oberon System 3 on VirtualBox 6.1</title>
            <link>https://rsdoiel.github.io/blog/2021/03/17/NativeOberon-VirtualBox.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In this post I am walking through installing Native Oberon 2.3.7&#xA;(aka ETH Oberon System 3) on a virtual machine running under&#xA;VirtualBox 6.1. It is a follow up to my 2019 post &#xA;[FreeDOS to Oberon System 3](/blog/2019/07/28/freedos-to-oberon-system-3.html &#34;Link to old blog post for bringing up Oberon System 3 in VirtualBox 6.0 using FreeDOS 1.2&#34;). To facilitate the install I will first prepare&#xA;my virtual machine as a FreeDOS 1.2 box. This simplifies getting the&#xA;virtual machines&#39; hard disk partitioned and formatted correctly.&#xA;When Native Oberon was released back in 1990&#39;s most Intel flavored&#xA;machines shipped with some sort Microsoft OS on them.  I believe&#xA;that is why the tools and instructions for Native Oberon assume&#xA;you&#39;re installing over or along side a DOS partition.&#xA;&#xA;...&#xA;</description>
            <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/03/17/NativeOberon-VirtualBox.html</guid>
        </item>
        <item>
            <title>A2 Oberon on VirtualBox 6.1</title>
            <link>https://rsdoiel.github.io/blog/2021/04/02/A2-Oberon-on-VirtualBox-6.1.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This is a short article documenting how I install A2 Oberon&#xA;in VirtualBox using the [FreeDOS 1.2](https://freedos.org),&#xA;the A2 [ISO](https://sourceforge.net/projects/a2oberon/files/) cd image and [VirtualBox 6.1](https://virtualbox.org).&#xA;&#xA;...&#xA;</description>
            <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/04/02/A2-Oberon-on-VirtualBox-6.1.html</guid>
        </item>
        <item>
            <title>Updating Schema in SQLite3</title>
            <link>https://rsdoiel.github.io/blog/2021/04/16/Updating-Schema-in-SQLite3.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>[SQLite3](https://sqlite.org/docs.html) is a handy little&#xA;database as single file tool.  You can interact with the file&#xA;through largely standard SQL commands and embed it easily into&#xA;applications via the C libraries that the project supports.&#xA;It is also available from various popular scripting languages&#xA;like Python, PHP, and Lua. One of the things I occasionally&#xA;need to do and always seems to forget it how to is modify a&#xA;table schema where I need to remove a column. So here are&#xA;some of the basics do I can quickly find them later and avoid&#xA;reading various articles tutorials because the search engines&#xA;doesn&#39;t return the page in the SQLite documentation.&#xA;&#xA;In the next sections I&#39;ll be modeling a simple person object&#xA;with a id, uname, display_name, role and updated fields.&#xA;&#xA;...&#xA;</description>
            <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/04/16/Updating-Schema-in-SQLite3.html</guid>
        </item>
        <item>
            <title>Ofront on Raspberry Pi OS</title>
            <link>https://rsdoiel.github.io/blog/2021/04/25/Ofront-on-Rasberry-Pi-OS.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>&#xA;This post is about getting Ofront up and running on Raspberry Pi OS.&#xA;Ofront provides a Oberon-2 to C transpiler as well as a Oberon V4&#xA;development environment. There are additional clever tools like `ocat`&#xA;that are helpful working with the differences in text file formats between&#xA;Oberon System 3, V4 and POSIX. The V4 implementation sits nicely on top of&#xA;POSIX with minimal compromises that distract from the Oberon experience.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/04/25/Ofront-on-Rasberry-Pi-OS.html</guid>
        </item>
        <item>
            <title>Beyond Oakwood, Modules and Aliases</title>
            <link>https://rsdoiel.github.io/blog/2021/05/16/Beyond-Oakwood-Modules-and-Aliases.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>Oakwood is the name used to refer to an early Oberon language&#xA;standardization effort in the late 20th century.  It&#39;s the name&#xA;of a hotel where compiler developers and the creators of Oberon&#xA;and the Oberon System met to discuss compatibility. The lasting&#xA;influence on the 21st century Oberon-07 language can be seen&#xA;in the standard set of modules shipped with POSIX based Oberon-07&#xA;compilers like&#xA;[OBNC](https://miasap.se/obnc/), [Vishap Oberon Compiler](https://github.com/vishaps/voc) and the &#xA;[Oxford Oberon Compiler](http://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler).&#xA;&#xA;The Oakwood guidelines described a minimum expectation for&#xA;a standard set of modules to be shipped with compilers.&#xA;The modules themselves are minimalist in implementation.&#xA;Minimalism can assist in easing the learning curve&#xA;and encouraging a deeper understanding of how things work.&#xA;&#xA;The Oberon-07 language is smaller than the original Oberon language&#xA;and the many dialects that followed.  I think of Oberon-07 as the&#xA;distillation of all previous innovation.  It embodies the&#xA;spirit of &#34;Simple but not simpler than necessary&#34;. Minimalism is&#xA;a fit description of the adaptions of the Oakwood modules for &#xA;Oberon-07 in the POSIX environment.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/05/16/Beyond-Oakwood-Modules-and-Aliases.html</guid>
        </item>
        <item>
            <title>Combining Oberon-07 with C using Obc-3</title>
            <link>https://rsdoiel.github.io/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>This post explores integrating C code with an Oberon-07 module use&#xA;Mike Spivey&#39;s Obc-3 Oberon Compiler.  Last year I wrote a similar post&#xA;for Karl Landström&#39;s [OBNC](/blog/2020/05/01/Combining-Oberon-and-C.html).&#xA;This goal of this post is to document how I created a version of Karl&#39;s&#xA;Extension Library that would work with Mike&#39;s Obc-3 compiler.&#xA;If you want to take a shortcut you can see the results on GitHub&#xA;in my [obc-3-libext](https://github.com/rsdoiel/obc-3-libext) repository.&#xA;&#xA;From my time with OBNC I&#39;ve come to rely on three modules from Karl&#39;s&#xA;extension library. When trying to port some of my code to use with&#xA;Mike&#39;s compiler. That&#39;s where I ran into a problem with that dependency.&#xA;Karl&#39;s modules aren&#39;t available. I needed an [extArgs](http://miasap.se/obnc/obncdoc/ext/extArgs.def.html),&#xA;an [extEnv](http://miasap.se/obnc/obncdoc/ext/extEnv.def.html) and&#xA;[extConvert](http://miasap.se/obnc/obncdoc/ext/extConvert.def.html).&#xA;&#xA;...&#xA;</description>
            <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/06/14/Combining-Oberon-07-with-C-using-Obc-3.html</guid>
        </item>
        <item>
            <title>Revisiting Files</title>
            <link>https://rsdoiel.github.io/blog/2021/11/22/Revisiting-Files.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In October I had an Email exchange with Algojack regarding a buggy example in [Oberon-07 and the file system](../../../2020/05/09/Oberon-07-and-the-filesystem.html). The serious bug was extraneous non-printable characters appearing a plain text file containing the string &#34;Hello World&#34;. The trouble with the example was a result of my misreading the Oakwood guidelines and how **Files.WriteString()** is required to work. The **Files.WriteString()** procedure is supposed to write every element of a string to a file. This __includes the trailing Null character__. The problem for me is **Files.WriteString()** litters plain text files with tailing nulls. What I should have done was write my own **WriteString()** and **WriteLn()**. The program [HelloworldFile](./HelloworldFile.Mod) below is a more appropriate solution to writing strings and line endings than relying directly on **Files**. In a future post I will explorer making this more generalized in a revised &#34;Fmt&#34; module.&#xA;&#xA;...&#xA;</description>
            <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/11/22/Revisiting-Files.html</guid>
        </item>
        <item>
            <title>Portable Conversions (Integers)</title>
            <link>https://rsdoiel.github.io/blog/2021/11/26/Portable-Conversions-Integers.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>An area in working with Oberon-07 on a POSIX machine that has proven problematic is type conversion. In particular converting to and from INTEGER or REAL and ASCII.  None of the three compilers I am exploring provide a common way of handling this. I&#39;ve explored relying on C libraries but that approach has it&#39;s own set of problems.  I&#39;ve become convinced a better approach is a pure Oberon-07 library that handles type conversion with a minimum of assumptions about the implementation details of the Oberon compiler or hardware. I&#39;m calling my conversion module &#34;Types&#34;. The name is short and descriptive and seems an appropriate name for a module consisting of type conversion tests and transformations.  My initial implementation will focusing on converting integers to and from ASCII.&#xA;&#xA;...&#xA;</description>
            <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/11/26/Portable-Conversions-Integers.html</guid>
        </item>
        <item>
            <title>Setting up FreeDOS 1.3rc4 with Qemu</title>
            <link>https://rsdoiel.github.io/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>In this article I&#39;m going explore setting up FreeDOS with Qemu&#xA;on my venerable Dell 4319 running Raspberry Pi Desktop OS (Debian&#xA;GNU/Linux).  First step is to download FreeDOS &#34;Live CD&#34; in the&#xA;1.3 RC4 release. See http://freedos.org/download/ for that.&#xA;&#xA;## Installing Qemu&#xA;&#xA;I needed to install Qemu in my laptop. It runs the Raspberry Pi&#xA;Desktop OS (i.e. Debian with Raspberry Pi UI). I choose to install&#xA;the &#34;qemu-system&#34; package since I will likely use qemu for other&#xA;things besides FreeDOS. The qemu-system package contains all the&#xA;various systems I might want to emulate in other projects as well&#xA;as several qemu utilities that are handy.  Here&#39;s the full sequence&#xA;of `apt` commands I ran (NOTE: these included making sure my laptop&#xA;was up to date before I installed qemu-system).&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/11/27/FreeDOS-1.3rc4-with-Qemu.html</guid>
        </item>
        <item>
            <title>Notes on setting up a Mid-2010 Mac Mini</title>
            <link>https://rsdoiel.github.io/blog/2021/12/18/Notes-on-setting-up-a-2010-Mac-Mini.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>I acquired a Mid 2010 Mac Mini. It was in good condition but lacked an OS on the hard drive.  I used a previously purchased copy of Mac OS X Snow Leopard to get an OS up and running on the bare hardware. Then it was a longer effort to get the machine into a state with the software I wanted to use on it. My goal was Mac OS X High Sierra, Xcode 10.1 and Mac Ports. The process was straight forward but very time consuming but I think worth it.  I wound up with a nice machine for experimenting with and writing blog posts.&#xA;&#xA;The setup process was as follows:&#xA;&#xA;1. Install macOS Snow Leopard on the bare disk of the Mac Mini&#xA;2. Install macOS El Capitan on the Mac Mini after manually downloading it from Apple&#39;s support site&#xA;3. Run updates indicated by El Capitan&#xA;4. Install macOS High Sierra on the Mac Mini after manually downloading it from the Apple&#39;s support site&#xA;5. Run updates indicated by High Sierra &#xA;6. Manually download and install Xcode 10.1 command line tools &#xA;7. Check and run some updates again&#xA;8. Finally install Mac Ports&#xA;&#xA;The OS installs took about 45 minutes to 90 minutes each. Installing Xcode took about 45 minutes to an hour. Installing Mac Ports was fast as was installing software via Mac Ports.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2021/12/18/Notes-on-setting-up-a-2010-Mac-Mini.html</guid>
        </item>
        <item>
            <title>Installing Golang from source on RPi-OS for arm64</title>
            <link>https://rsdoiel.github.io/blog/2022/02/18/Installing-Go-from-Source-RPiOS-arm64.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>By R. S. Doiel, 2022-02-18&#xA;&#xA;This are my quick notes on installing Golang from source on the Raspberry Pi OS 64 bit.&#xA;&#xA;1. Get a working compiler&#xA;&#x9;a. go to https://go.dev/dl/ and download go1.17.7.linux-arm64.tar.gz&#xA;&#x9;b. untar the tarball in your home directory (it&#39;ll unpack to $HOME/go)&#xA;&#x9;c. `cd go/src` and `make.bash`&#xA;2. Move go directory to go1.17&#xA;3. Clone go from GitHub&#xA;4. Compile with the downloaded compiler&#xA;&#x9;a. `cd go/src`&#xA;&#x9;b. `env GOROOT_BOOTSTRAP=$HOME/go1.17 ./make.bash`&#xA;&#x9;c. Make sure `$HOME/go/bin` is in the path&#xA;&#x9;d. `go version`&#xA;&#xA;&#xA;</description>
            <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/02/18/Installing-Go-from-Source-RPiOS-arm64.html</guid>
        </item>
        <item>
            <title>Artemis Project Status, 2022</title>
            <link>https://rsdoiel.github.io/blog/2022/07/27/Artemis-Status-Summer-2022.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>t&#39;s been a while since I wrote an Oberon-07 post and even longer since I&#39;ve worked on Artemis. Am I done with Oberon-07 and abandoning Artemis?  No. Life happens and free time to just hasn&#39;t been available. I don&#39;t know when that will change.&#xA;&#xA;What&#39;s the path forward? ...&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/07/27/Artemis-Status-Summer-2022.html</guid>
        </item>
        <item>
            <title>Turbo Oberon, the dream</title>
            <link>https://rsdoiel.github.io/blog/2022/07/30/Turbo-Oberon.html</link>
            <author>rsdoiel@gmail.com (R. S. Doiel)</author>
            <description>Sometimes I have odd dreams and that was true last night through early this morning. The dream was set in the future. I was already retired. It was a dream about &#34;Turbo Oberon&#34;.&#xA;&#xA;&#34;Turbo Oberon&#34; was an Oberon language. The language compiler was named &#34;TO&#34; in my dream. A module&#39;s file extension was &#34;.tom&#34;, in honor of Tom Lopez (Meatball Fulton) of ZBS. There were allot of ZBS references in the dream.&#xA;&#xA;&#34;TO&#34; was very much a language in the Oberon-07 tradition with minor extensions when it came to bringing in modules. It allowed for a multi path search for module names. You could also express a Module import as a string allowing providing paths to the imported module.&#xA;&#xA;Compilation was similar to Go. Cross compilation was available out of the box by setting a few environment variables. I remember answering questions about the language and its evolution. I remember mentioning in the conversation about how I thought Go felling into the trap of complexity like Rust or C/C++ before it. The turning point for Go was generics. Complexity was the siren song to be resisted in &#34;Turbo Oberon&#34;. Complexity is seductive to language designers and implementers. I was only an implementer.&#xA;&#xA;...&#xA;</description>
            <pubDate>Sat, 09 Aug 2025 14:25:35 -0700</pubDate>
            <guid>https://rsdoiel.github.io/blog/2022/07/30/Turbo-Oberon.html</guid>
        </item>
    </channel>
</rss>
